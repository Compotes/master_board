
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <Reset_Handler>:
 8000200:	b672      	cpsid	i
 8000202:	4822      	ldr	r0, [pc, #136]	; (800028c <endfiniloop+0x4>)
 8000204:	f380 8809 	msr	PSP, r0
 8000208:	2002      	movs	r0, #2
 800020a:	f380 8814 	msr	CONTROL, r0
 800020e:	f3bf 8f6f 	isb	sy
 8000212:	f000 fcf5 	bl	8000c00 <__core_init>
 8000216:	f002 fde3 	bl	8002de0 <__early_init>
 800021a:	481d      	ldr	r0, [pc, #116]	; (8000290 <endfiniloop+0x8>)
 800021c:	491d      	ldr	r1, [pc, #116]	; (8000294 <endfiniloop+0xc>)
 800021e:	4a1e      	ldr	r2, [pc, #120]	; (8000298 <endfiniloop+0x10>)

08000220 <msloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <msloop>
 800022a:	491c      	ldr	r1, [pc, #112]	; (800029c <endfiniloop+0x14>)
 800022c:	4a17      	ldr	r2, [pc, #92]	; (800028c <endfiniloop+0x4>)

0800022e <psloop>:
 800022e:	4291      	cmp	r1, r2
 8000230:	bf3c      	itt	cc
 8000232:	f841 0b04 	strcc.w	r0, [r1], #4
 8000236:	e7fa      	bcc.n	800022e <psloop>
 8000238:	4919      	ldr	r1, [pc, #100]	; (80002a0 <endfiniloop+0x18>)
 800023a:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <endfiniloop+0x1c>)
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <endfiniloop+0x20>)

0800023e <dloop>:
 800023e:	429a      	cmp	r2, r3
 8000240:	bf3e      	ittt	cc
 8000242:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000246:	f842 0b04 	strcc.w	r0, [r2], #4
 800024a:	e7f8      	bcc.n	800023e <dloop>
 800024c:	2000      	movs	r0, #0
 800024e:	4917      	ldr	r1, [pc, #92]	; (80002ac <endfiniloop+0x24>)
 8000250:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <endfiniloop+0x28>)

08000252 <bloop>:
 8000252:	4291      	cmp	r1, r2
 8000254:	bf3c      	itt	cc
 8000256:	f841 0b04 	strcc.w	r0, [r1], #4
 800025a:	e7fa      	bcc.n	8000252 <bloop>
 800025c:	f000 fce8 	bl	8000c30 <__init_ram_areas>
 8000260:	f000 fcd6 	bl	8000c10 <__late_init>
 8000264:	4c13      	ldr	r4, [pc, #76]	; (80002b4 <endfiniloop+0x2c>)
 8000266:	4d14      	ldr	r5, [pc, #80]	; (80002b8 <endfiniloop+0x30>)

08000268 <initloop>:
 8000268:	42ac      	cmp	r4, r5
 800026a:	da03      	bge.n	8000274 <endinitloop>
 800026c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000270:	4788      	blx	r1
 8000272:	e7f9      	b.n	8000268 <initloop>

08000274 <endinitloop>:
 8000274:	f003 fd4c 	bl	8003d10 <main>
 8000278:	4c10      	ldr	r4, [pc, #64]	; (80002bc <endfiniloop+0x34>)
 800027a:	4d11      	ldr	r5, [pc, #68]	; (80002c0 <endfiniloop+0x38>)

0800027c <finiloop>:
 800027c:	42ac      	cmp	r4, r5
 800027e:	da03      	bge.n	8000288 <endfiniloop>
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
 8000284:	4788      	blx	r1
 8000286:	e7f9      	b.n	800027c <finiloop>

08000288 <endfiniloop>:
 8000288:	f000 bcca 	b.w	8000c20 <__default_exit>
 800028c:	20000800 	.word	0x20000800
 8000290:	55555555 	.word	0x55555555
 8000294:	20000000 	.word	0x20000000
 8000298:	20000400 	.word	0x20000400
 800029c:	20000400 	.word	0x20000400
 80002a0:	08005c90 	.word	0x08005c90
 80002a4:	20000800 	.word	0x20000800
 80002a8:	2000081c 	.word	0x2000081c
 80002ac:	20000820 	.word	0x20000820
 80002b0:	200018e4 	.word	0x200018e4
 80002b4:	08000200 	.word	0x08000200
 80002b8:	08000200 	.word	0x08000200
 80002bc:	08000200 	.word	0x08000200
 80002c0:	08000200 	.word	0x08000200
	...

080002d0 <_port_switch>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002d8:	68c3      	ldr	r3, [r0, #12]
 80002da:	469d      	mov	sp, r3
 80002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e0 <_port_thread_start>:
 80002e0:	2300      	movs	r3, #0
 80002e2:	f383 8811 	msr	BASEPRI, r3
 80002e6:	4628      	mov	r0, r5
 80002e8:	47a0      	blx	r4
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 ff80 	bl	80011f0 <chThdExit>

080002f0 <_port_switch_from_isr>:
 80002f0:	f000 fece 	bl	8001090 <chSchDoReschedule>

080002f4 <_port_exit_from_isr>:
 80002f4:	df00      	svc	0
 80002f6:	e7fe      	b.n	80002f6 <_port_exit_from_isr+0x2>
	...

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800043e:	f1a4 0401 	sub.w	r4, r4, #1
 8000442:	d1e9      	bne.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f092 0f00 	teq	r2, #0
 80005ea:	bf14      	ite	ne
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	e720      	b.n	8000444 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aedc 	beq.w	80003f2 <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6c1      	b.n	80003f2 <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__aeabi_dmul>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800067a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067e:	bf1d      	ittte	ne
 8000680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000684:	ea94 0f0c 	teqne	r4, ip
 8000688:	ea95 0f0c 	teqne	r5, ip
 800068c:	f000 f8de 	bleq	800084c <__aeabi_dmul+0x1dc>
 8000690:	442c      	add	r4, r5
 8000692:	ea81 0603 	eor.w	r6, r1, r3
 8000696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a2:	bf18      	it	ne
 80006a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b0:	d038      	beq.n	8000724 <__aeabi_dmul+0xb4>
 80006b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c6:	f04f 0600 	mov.w	r6, #0
 80006ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ce:	f09c 0f00 	teq	ip, #0
 80006d2:	bf18      	it	ne
 80006d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e4:	d204      	bcs.n	80006f0 <__aeabi_dmul+0x80>
 80006e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ea:	416d      	adcs	r5, r5
 80006ec:	eb46 0606 	adc.w	r6, r6, r6
 80006f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000704:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000708:	bf88      	it	hi
 800070a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070e:	d81e      	bhi.n	800074e <__aeabi_dmul+0xde>
 8000710:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000714:	bf08      	it	eq
 8000716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071a:	f150 0000 	adcs.w	r0, r0, #0
 800071e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000728:	ea46 0101 	orr.w	r1, r6, r1
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000738:	bfc2      	ittt	gt
 800073a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000742:	bd70      	popgt	{r4, r5, r6, pc}
 8000744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000748:	f04f 0e00 	mov.w	lr, #0
 800074c:	3c01      	subs	r4, #1
 800074e:	f300 80ab 	bgt.w	80008a8 <__aeabi_dmul+0x238>
 8000752:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000756:	bfde      	ittt	le
 8000758:	2000      	movle	r0, #0
 800075a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd70      	pople	{r4, r5, r6, pc}
 8000760:	f1c4 0400 	rsb	r4, r4, #0
 8000764:	3c20      	subs	r4, #32
 8000766:	da35      	bge.n	80007d4 <__aeabi_dmul+0x164>
 8000768:	340c      	adds	r4, #12
 800076a:	dc1b      	bgt.n	80007a4 <__aeabi_dmul+0x134>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f305 	lsl.w	r3, r0, r5
 8000778:	fa20 f004 	lsr.w	r0, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	fa21 f604 	lsr.w	r6, r1, r4
 8000794:	eb42 0106 	adc.w	r1, r2, r6
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 040c 	rsb	r4, r4, #12
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f304 	lsl.w	r3, r0, r4
 80007b0:	fa20 f005 	lsr.w	r0, r0, r5
 80007b4:	fa01 f204 	lsl.w	r2, r1, r4
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c4:	f141 0100 	adc.w	r1, r1, #0
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f205 	lsl.w	r2, r0, r5
 80007dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e0:	fa20 f304 	lsr.w	r3, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea43 0302 	orr.w	r3, r3, r2
 80007ec:	fa21 f004 	lsr.w	r0, r1, r4
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	fa21 f204 	lsr.w	r2, r1, r4
 80007f8:	ea20 0002 	bic.w	r0, r0, r2
 80007fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f094 0f00 	teq	r4, #0
 8000810:	d10f      	bne.n	8000832 <__aeabi_dmul+0x1c2>
 8000812:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	eb41 0101 	adc.w	r1, r1, r1
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3c01      	subeq	r4, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1a6>
 8000826:	ea41 0106 	orr.w	r1, r1, r6
 800082a:	f095 0f00 	teq	r5, #0
 800082e:	bf18      	it	ne
 8000830:	4770      	bxne	lr
 8000832:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	eb43 0303 	adc.w	r3, r3, r3
 800083c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000840:	bf08      	it	eq
 8000842:	3d01      	subeq	r5, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1c6>
 8000846:	ea43 0306 	orr.w	r3, r3, r6
 800084a:	4770      	bx	lr
 800084c:	ea94 0f0c 	teq	r4, ip
 8000850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000854:	bf18      	it	ne
 8000856:	ea95 0f0c 	teqne	r5, ip
 800085a:	d00c      	beq.n	8000876 <__aeabi_dmul+0x206>
 800085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000866:	d1d1      	bne.n	800080c <__aeabi_dmul+0x19c>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087a:	bf06      	itte	eq
 800087c:	4610      	moveq	r0, r2
 800087e:	4619      	moveq	r1, r3
 8000880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x24a>
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	d102      	bne.n	8000892 <__aeabi_dmul+0x222>
 800088c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000890:	d113      	bne.n	80008ba <__aeabi_dmul+0x24a>
 8000892:	ea95 0f0c 	teq	r5, ip
 8000896:	d105      	bne.n	80008a4 <__aeabi_dmul+0x234>
 8000898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800089c:	bf1c      	itt	ne
 800089e:	4610      	movne	r0, r2
 80008a0:	4619      	movne	r1, r3
 80008a2:	d10a      	bne.n	80008ba <__aeabi_dmul+0x24a>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008c2:	bd70      	pop	{r4, r5, r6, pc}

080008c4 <__aeabi_ddiv>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d2:	bf1d      	ittte	ne
 80008d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d8:	ea94 0f0c 	teqne	r4, ip
 80008dc:	ea95 0f0c 	teqne	r5, ip
 80008e0:	f000 f8a7 	bleq	8000a32 <__aeabi_ddiv+0x16e>
 80008e4:	eba4 0405 	sub.w	r4, r4, r5
 80008e8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f4:	f000 8088 	beq.w	8000a08 <__aeabi_ddiv+0x144>
 80008f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000908:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800090c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000914:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000918:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800091c:	429d      	cmp	r5, r3
 800091e:	bf08      	it	eq
 8000920:	4296      	cmpeq	r6, r2
 8000922:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000926:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800092a:	d202      	bcs.n	8000932 <__aeabi_ddiv+0x6e>
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	1ab6      	subs	r6, r6, r2
 8000934:	eb65 0503 	sbc.w	r5, r5, r3
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000942:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 000c 	orrcs.w	r0, r0, ip
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a4:	d018      	beq.n	80009d8 <__aeabi_ddiv+0x114>
 80009a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c2:	d1c0      	bne.n	8000946 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_ddiv+0x11e>
 80009ca:	ea41 0100 	orr.w	r1, r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d6:	e7b6      	b.n	8000946 <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009dc:	bf04      	itt	eq
 80009de:	4301      	orreq	r1, r0
 80009e0:	2000      	moveq	r0, #0
 80009e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e6:	bf88      	it	hi
 80009e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ec:	f63f aeaf 	bhi.w	800074e <__aeabi_dmul+0xde>
 80009f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f4:	bf04      	itt	eq
 80009f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a14:	bfc2      	ittt	gt
 8000a16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a24:	f04f 0e00 	mov.w	lr, #0
 8000a28:	3c01      	subs	r4, #1
 8000a2a:	e690      	b.n	800074e <__aeabi_dmul+0xde>
 8000a2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a30:	e68d      	b.n	800074e <__aeabi_dmul+0xde>
 8000a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a36:	ea94 0f0c 	teq	r4, ip
 8000a3a:	bf08      	it	eq
 8000a3c:	ea95 0f0c 	teqeq	r5, ip
 8000a40:	f43f af3b 	beq.w	80008ba <__aeabi_dmul+0x24a>
 8000a44:	ea94 0f0c 	teq	r4, ip
 8000a48:	d10a      	bne.n	8000a60 <__aeabi_ddiv+0x19c>
 8000a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4e:	f47f af34 	bne.w	80008ba <__aeabi_dmul+0x24a>
 8000a52:	ea95 0f0c 	teq	r5, ip
 8000a56:	f47f af25 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e72c      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a60:	ea95 0f0c 	teq	r5, ip
 8000a64:	d106      	bne.n	8000a74 <__aeabi_ddiv+0x1b0>
 8000a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6a:	f43f aefd 	beq.w	8000868 <__aeabi_dmul+0x1f8>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e722      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	f47f aec5 	bne.w	800080c <__aeabi_dmul+0x19c>
 8000a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a86:	f47f af0d 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8e:	f47f aeeb 	bne.w	8000868 <__aeabi_dmul+0x1f8>
 8000a92:	e712      	b.n	80008ba <__aeabi_dmul+0x24a>
	...

08000aa0 <__gedf2>:
 8000aa0:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa4:	e006      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aa6:	bf00      	nop

08000aa8 <__ledf2>:
 8000aa8:	f04f 0c01 	mov.w	ip, #1
 8000aac:	e002      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aae:	bf00      	nop

08000ab0 <__cmpdf2>:
 8000ab0:	f04f 0c01 	mov.w	ip, #1
 8000ab4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	bf18      	it	ne
 8000ac6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aca:	d01b      	beq.n	8000b04 <__cmpdf2+0x54>
 8000acc:	b001      	add	sp, #4
 8000ace:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ad2:	bf0c      	ite	eq
 8000ad4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad8:	ea91 0f03 	teqne	r1, r3
 8000adc:	bf02      	ittt	eq
 8000ade:	ea90 0f02 	teqeq	r0, r2
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	4770      	bxeq	lr
 8000ae6:	f110 0f00 	cmn.w	r0, #0
 8000aea:	ea91 0f03 	teq	r1, r3
 8000aee:	bf58      	it	pl
 8000af0:	4299      	cmppl	r1, r3
 8000af2:	bf08      	it	eq
 8000af4:	4290      	cmpeq	r0, r2
 8000af6:	bf2c      	ite	cs
 8000af8:	17d8      	asrcs	r0, r3, #31
 8000afa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afe:	f040 0001 	orr.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__cmpdf2+0x64>
 8000b0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b12:	d107      	bne.n	8000b24 <__cmpdf2+0x74>
 8000b14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d1d6      	bne.n	8000acc <__cmpdf2+0x1c>
 8000b1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b22:	d0d3      	beq.n	8000acc <__cmpdf2+0x1c>
 8000b24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdrcmple>:
 8000b2c:	4684      	mov	ip, r0
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4662      	mov	r2, ip
 8000b32:	468c      	mov	ip, r1
 8000b34:	4619      	mov	r1, r3
 8000b36:	4663      	mov	r3, ip
 8000b38:	e000      	b.n	8000b3c <__aeabi_cdcmpeq>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_cdcmpeq>:
 8000b3c:	b501      	push	{r0, lr}
 8000b3e:	f7ff ffb7 	bl	8000ab0 <__cmpdf2>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	bf48      	it	mi
 8000b46:	f110 0f00 	cmnmi.w	r0, #0
 8000b4a:	bd01      	pop	{r0, pc}

08000b4c <__aeabi_dcmpeq>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff fff4 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b54:	bf0c      	ite	eq
 8000b56:	2001      	moveq	r0, #1
 8000b58:	2000      	movne	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmplt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffea 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmple>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffe0 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpge>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffce 	bl	8000b2c <__aeabi_cdrcmple>
 8000b90:	bf94      	ite	ls
 8000b92:	2001      	movls	r0, #1
 8000b94:	2000      	movhi	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpgt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffc4 	bl	8000b2c <__aeabi_cdrcmple>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	f3af 8000 	nop.w
 8000c08:	f3af 8000 	nop.w
 8000c0c:	f3af 8000 	nop.w

08000c10 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	f3af 8000 	nop.w
 8000c18:	f3af 8000 	nop.w
 8000c1c:	f3af 8000 	nop.w

08000c20 <__default_exit>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
  }
 8000c20:	e7fe      	b.n	8000c20 <__default_exit>
 8000c22:	bf00      	nop
 8000c24:	f3af 8000 	nop.w
 8000c28:	f3af 8000 	nop.w
 8000c2c:	f3af 8000 	nop.w

08000c30 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000c30:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8000c32:	4e11      	ldr	r6, [pc, #68]	; (8000c78 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000c34:	2500      	movs	r5, #0
 8000c36:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8000c3a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d20d      	bcs.n	8000c5e <__init_ram_areas+0x2e>
 8000c42:	461a      	mov	r2, r3
 8000c44:	3904      	subs	r1, #4
      *p = *tp;
 8000c46:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8000c4a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000c4e:	42a2      	cmp	r2, r4
 8000c50:	d3f9      	bcc.n	8000c46 <__init_ram_areas+0x16>
 8000c52:	43da      	mvns	r2, r3
 8000c54:	4414      	add	r4, r2
 8000c56:	f024 0403 	bic.w	r4, r4, #3
 8000c5a:	3404      	adds	r4, #4
 8000c5c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000c5e:	68f2      	ldr	r2, [r6, #12]
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d203      	bcs.n	8000c6c <__init_ram_areas+0x3c>
      *p = 0;
 8000c64:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d3fb      	bcc.n	8000c64 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 8000c6c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000c6e:	42be      	cmp	r6, r7
 8000c70:	d3e3      	bcc.n	8000c3a <__init_ram_areas+0xa>
#endif
}
 8000c72:	bcf0      	pop	{r4, r5, r6, r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	08005720 	.word	0x08005720
 8000c7c:	f3af 8000 	nop.w

08000c80 <_unhandled_exception>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
 8000c80:	e7fe      	b.n	8000c80 <_unhandled_exception>
 8000c82:	bf00      	nop
 8000c84:	f3af 8000 	nop.w
 8000c88:	f3af 8000 	nop.w
 8000c8c:	f3af 8000 	nop.w

08000c90 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000c90:	e7fe      	b.n	8000c90 <_idle_thread>
 8000c92:	bf00      	nop
 8000c94:	f3af 8000 	nop.w
 8000c98:	f3af 8000 	nop.w
 8000c9c:	f3af 8000 	nop.w

08000ca0 <chSysInit>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000ca0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <chSysInit+0x80>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000ca6:	b570      	push	{r4, r5, r6, lr}
 8000ca8:	2400      	movs	r4, #0
 8000caa:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000cae:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <chSysInit+0x84>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000cb0:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 8000cb2:	430a      	orrs	r2, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <chSysInit+0x88>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	68c2      	ldr	r2, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cba:	491c      	ldr	r1, [pc, #112]	; (8000d2c <chSysInit+0x8c>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cbc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cc0:	60c2      	str	r2, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cc2:	680a      	ldr	r2, [r1, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000cca:	4d19      	ldr	r5, [pc, #100]	; (8000d30 <chSysInit+0x90>)
 8000ccc:	2610      	movs	r6, #16
 8000cce:	600a      	str	r2, [r1, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	77de      	strb	r6, [r3, #31]
 8000cd4:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000cd8:	f000 f8e2 	bl	8000ea0 <_scheduler_init>
  _vt_init();
 8000cdc:	f000 f860 	bl	8000da0 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000ce0:	f000 faf6 	bl	80012d0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000ce4:	f000 fcd4 	bl	8001690 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000ce8:	f000 fd0a 	bl	8001700 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000cec:	4628      	mov	r0, r5
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	f000 f9de 	bl	80010b0 <_thread_init>
 8000cf4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000cf8:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000cfa:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000cfc:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000cfe:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000d02:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000d04:	490b      	ldr	r1, [pc, #44]	; (8000d34 <chSysInit+0x94>)
 8000d06:	699b      	ldr	r3, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8000d08:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8000d0c:	6199      	str	r1, [r3, #24]
 8000d0e:	21d8      	movs	r1, #216	; 0xd8
 8000d10:	9400      	str	r4, [sp, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <chSysInit+0x98>)
 8000d14:	f000 f9f4 	bl	8001100 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <chSysInit+0x9c>)
 8000d1a:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	05fa0300 	.word	0x05fa0300
 8000d28:	e000edf0 	.word	0xe000edf0
 8000d2c:	e0001000 	.word	0xe0001000
 8000d30:	20000850 	.word	0x20000850
 8000d34:	080057b0 	.word	0x080057b0
 8000d38:	08000c91 	.word	0x08000c91
 8000d3c:	080057a0 	.word	0x080057a0

08000d40 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000d42:	4b01      	ldr	r3, [pc, #4]	; (8000d48 <chSysHalt+0x8>)
 8000d44:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Harmless infinite loop.*/
  while (true) {
  }
 8000d46:	e7fe      	b.n	8000d46 <chSysHalt+0x6>
 8000d48:	20000820 	.word	0x20000820
 8000d4c:	f3af 8000 	nop.w

08000d50 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 8000d52:	4d11      	ldr	r5, [pc, #68]	; (8000d98 <chSysTimerHandlerI+0x48>)
 8000d54:	69aa      	ldr	r2, [r5, #24]
 8000d56:	7fd3      	ldrb	r3, [r2, #31]
 8000d58:	b10b      	cbz	r3, 8000d5e <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	77d3      	strb	r3, [r2, #31]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000d5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d60:	69eb      	ldr	r3, [r5, #28]
 8000d62:	4e0e      	ldr	r6, [pc, #56]	; (8000d9c <chSysTimerHandlerI+0x4c>)
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000d64:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d66:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000d68:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d6a:	d013      	beq.n	8000d94 <chSysTimerHandlerI+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 8000d6c:	689c      	ldr	r4, [r3, #8]
 8000d6e:	3c01      	subs	r4, #1
 8000d70:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8000d72:	b97c      	cbnz	r4, 8000d94 <chSysTimerHandlerI+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d74:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d76:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 8000d78:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 8000d7a:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d7c:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 8000d7e:	61ea      	str	r2, [r5, #28]
 8000d80:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 8000d84:	6918      	ldr	r0, [r3, #16]
 8000d86:	4788      	blx	r1
 8000d88:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8000d8c:	69eb      	ldr	r3, [r5, #28]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d0f0      	beq.n	8000d76 <chSysTimerHandlerI+0x26>
 8000d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000820 	.word	0x20000820
 8000d9c:	2000083c 	.word	0x2000083c

08000da0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000da2:	f04f 30ff 	mov.w	r0, #4294967295
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000da6:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 8000daa:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000dac:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 8000dae:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000db0:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000db2:	621a      	str	r2, [r3, #32]
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000820 	.word	0x20000820
 8000dbc:	f3af 8000 	nop.w

08000dc0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000dc0:	b410      	push	{r4}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8000dc2:	4c0d      	ldr	r4, [pc, #52]	; (8000df8 <chVTDoSetI+0x38>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000dc4:	6103      	str	r3, [r0, #16]
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8000dc6:	69e3      	ldr	r3, [r4, #28]

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000dc8:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	4291      	cmp	r1, r2
 8000dce:	d904      	bls.n	8000dda <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000dd0:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000dd2:	1a89      	subs	r1, r1, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	428a      	cmp	r2, r1
 8000dd8:	d3fa      	bcc.n	8000dd0 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000dda:	685a      	ldr	r2, [r3, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000ddc:	6003      	str	r3, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000dde:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 8000de0:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 8000de2:	6058      	str	r0, [r3, #4]
  vtp->vt_delta = delta
 8000de4:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000de6:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000dec:	1a51      	subs	r1, r2, r1
 8000dee:	6099      	str	r1, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000df0:	6260      	str	r0, [r4, #36]	; 0x24
}
 8000df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	20000820 	.word	0x20000820
 8000dfc:	f3af 8000 	nop.w

08000e00 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8000e00:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000e02:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8000e04:	6882      	ldr	r2, [r0, #8]
 8000e06:	689c      	ldr	r4, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8000e08:	6841      	ldr	r1, [r0, #4]
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8000e0a:	4422      	add	r2, r4
 8000e0c:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8000e0e:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8000e10:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <chVTDoResetI+0x24>)
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;
 8000e14:	2400      	movs	r4, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8000e16:	f04f 32ff 	mov.w	r2, #4294967295
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8000e1a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 8000e1c:	60c4      	str	r4, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000e20:	bc30      	pop	{r4, r5}
 8000e22:	4770      	bx	lr
 8000e24:	20000820 	.word	0x20000820
 8000e28:	f3af 8000 	nop.w
 8000e2c:	f3af 8000 	nop.w

08000e30 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000e30:	b410      	push	{r4}
 8000e32:	2320      	movs	r3, #32
 8000e34:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000e38:	7f03      	ldrb	r3, [r0, #28]
 8000e3a:	2b07      	cmp	r3, #7
 8000e3c:	d80e      	bhi.n	8000e5c <wakeup+0x2c>
 8000e3e:	e8df f003 	tbb	[pc, r3]
 8000e42:	0d27      	.short	0x0d27
 8000e44:	0408230d 	.word	0x0408230d
 8000e48:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000e4a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000e4c:	6893      	ldr	r3, [r2, #8]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000e52:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000e56:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000e58:	6802      	ldr	r2, [r0, #0]
 8000e5a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000e5c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000e60:	2200      	movs	r2, #0
 8000e62:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000e66:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000e68:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000e6a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d2fb      	bcs.n	8000e6a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000e76:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8000e78:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 8000e7a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8000e7c:	6058      	str	r0, [r3, #4]
 8000e7e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e86:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000e88:	6a03      	ldr	r3, [r0, #32]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
    break;
 8000e8e:	e7e5      	b.n	8000e5c <wakeup+0x2c>
 8000e90:	2300      	movs	r3, #0
 8000e92:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000820 	.word	0x20000820

08000ea0 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000ea6:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8000ea8:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8000eaa:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	4770      	bx	lr
 8000eb0:	20000820 	.word	0x20000820
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	f3af 8000 	nop.w
 8000ebc:	f3af 8000 	nop.w

08000ec0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000ec0:	b410      	push	{r4}
 8000ec2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000eca:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000ecc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	428a      	cmp	r2, r1
 8000ed2:	d2fb      	bcs.n	8000ecc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000ed4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8000ed6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000ed8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8000eda:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8000edc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000ede:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000820 	.word	0x20000820
 8000eec:	f3af 8000 	nop.w

08000ef0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <chSchGoSleepS+0x24>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000ef2:	b470      	push	{r4, r5, r6}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000ef4:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000ef6:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8000ef8:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8000efa:	260a      	movs	r6, #10
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000efc:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8000efe:	7708      	strb	r0, [r1, #28]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8000f00:	77ce      	strb	r6, [r1, #31]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f02:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000f04:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000f06:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8000f08:	4610      	mov	r0, r2
}
 8000f0a:	bc70      	pop	{r4, r5, r6}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000f0c:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8000f0e:	f7ff b9df 	b.w	80002d0 <_port_switch>
 8000f12:	bf00      	nop
 8000f14:	20000820 	.word	0x20000820
 8000f18:	f3af 8000 	nop.w
 8000f1c:	f3af 8000 	nop.w

08000f20 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000f20:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000f22:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000f24:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000f26:	d012      	beq.n	8000f4e <chSchGoSleepTimeoutS+0x2e>
 8000f28:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000f2a:	4c0c      	ldr	r4, [pc, #48]	; (8000f5c <chSchGoSleepTimeoutS+0x3c>)
 8000f2c:	a801      	add	r0, sp, #4
 8000f2e:	69a3      	ldr	r3, [r4, #24]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <chSchGoSleepTimeoutS+0x40>)
 8000f32:	f7ff ff45 	bl	8000dc0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8000f36:	4628      	mov	r0, r5
 8000f38:	f7ff ffda 	bl	8000ef0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000f3c:	9b04      	ldr	r3, [sp, #16]
 8000f3e:	b113      	cbz	r3, 8000f46 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8000f40:	a801      	add	r0, sp, #4
 8000f42:	f7ff ff5d 	bl	8000e00 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000f46:	69a3      	ldr	r3, [r4, #24]
}
 8000f48:	6a18      	ldr	r0, [r3, #32]
 8000f4a:	b007      	add	sp, #28
 8000f4c:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000f4e:	f7ff ffcf 	bl	8000ef0 <chSchGoSleepS>
 8000f52:	4c02      	ldr	r4, [pc, #8]	; (8000f5c <chSchGoSleepTimeoutS+0x3c>)
  }

  return currp->p_u.rdymsg;
 8000f54:	69a3      	ldr	r3, [r4, #24]
}
 8000f56:	6a18      	ldr	r0, [r3, #32]
 8000f58:	b007      	add	sp, #28
 8000f5a:	bd30      	pop	{r4, r5, pc}
 8000f5c:	20000820 	.word	0x20000820
 8000f60:	08000e31 	.word	0x08000e31
 8000f64:	f3af 8000 	nop.w
 8000f68:	f3af 8000 	nop.w
 8000f6c:	f3af 8000 	nop.w

08000f70 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000f72:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000f74:	699e      	ldr	r6, [r3, #24]
 8000f76:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000f78:	4605      	mov	r5, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000f7a:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000f7c:	68b0      	ldr	r0, [r6, #8]
 8000f7e:	4284      	cmp	r4, r0
 8000f80:	d80c      	bhi.n	8000f9c <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000f82:	2200      	movs	r2, #0
 8000f84:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000f86:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	4294      	cmp	r4, r2
 8000f8c:	d9fb      	bls.n	8000f86 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000f8e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000f90:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 8000f92:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = tp;
 8000f94:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 8000f96:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8000f98:	bc70      	pop	{r4, r5, r6}
 8000f9a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8000f9c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000fa2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000fa4:	6891      	ldr	r1, [r2, #8]
 8000fa6:	4288      	cmp	r0, r1
 8000fa8:	d9fb      	bls.n	8000fa2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000faa:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000fac:	2401      	movs	r4, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000fae:	6070      	str	r0, [r6, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000fb0:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000fb2:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 8000fb4:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000fb6:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 8000fb8:	4631      	mov	r1, r6
 8000fba:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8000fbc:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8000fbe:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000fc0:	f7ff b986 	b.w	80002d0 <_port_switch>
 8000fc4:	20000820 	.word	0x20000820
 8000fc8:	f3af 8000 	nop.w
 8000fcc:	f3af 8000 	nop.w

08000fd0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 8000fd2:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000fd4:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8000fd6:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000fd8:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 8000fda:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8000fdc:	b921      	cbnz	r1, 8000fe8 <chSchIsPreemptionRequired+0x18>
 8000fde:	4283      	cmp	r3, r0
 8000fe0:	bf34      	ite	cc
 8000fe2:	2000      	movcc	r0, #0
 8000fe4:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 8000fe6:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8000fe8:	4283      	cmp	r3, r0
 8000fea:	bf94      	ite	ls
 8000fec:	2000      	movls	r0, #0
 8000fee:	2001      	movhi	r0, #1
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000820 	.word	0x20000820
 8000ff8:	f3af 8000 	nop.w
 8000ffc:	f3af 8000 	nop.w

08001000 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 8001000:	4a10      	ldr	r2, [pc, #64]	; (8001044 <chSchDoRescheduleBehind+0x44>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 8001002:	b5f0      	push	{r4, r5, r6, r7, lr}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001004:	6810      	ldr	r0, [r2, #0]
  thread_t *otp;

  otp = currp;
 8001006:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8001008:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800100a:	f04f 0e01 	mov.w	lr, #1
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800100e:	270a      	movs	r7, #10
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001010:	2600      	movs	r6, #0
 8001012:	68a1      	ldr	r1, [r4, #8]
 8001014:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001016:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001018:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800101a:	f880 e01c 	strb.w	lr, [r0, #28]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800101e:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001020:	77e7      	strb	r7, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001022:	7726      	strb	r6, [r4, #28]
 8001024:	e000      	b.n	8001028 <chSchDoRescheduleBehind+0x28>
 8001026:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	428a      	cmp	r2, r1
 800102c:	d2fb      	bcs.n	8001026 <chSchDoRescheduleBehind+0x26>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800102e:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001030:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001032:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001034:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8001036:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001038:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 800103a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800103e:	f7ff b947 	b.w	80002d0 <_port_switch>
 8001042:	bf00      	nop
 8001044:	20000820 	.word	0x20000820
 8001048:	f3af 8000 	nop.w
 800104c:	f3af 8000 	nop.w

08001050 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001052:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001054:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8001056:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8001058:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800105a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800105c:	2600      	movs	r6, #0
 800105e:	68a1      	ldr	r1, [r4, #8]
 8001060:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001062:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001064:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001066:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001068:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800106a:	7726      	strb	r6, [r4, #28]
 800106c:	e000      	b.n	8001070 <chSchDoRescheduleAhead+0x20>
 800106e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	428a      	cmp	r2, r1
 8001074:	d8fb      	bhi.n	800106e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001076:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001078:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800107a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800107c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800107e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8001080:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8001082:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001084:	f7ff b924 	b.w	80002d0 <_port_switch>
 8001088:	20000820 	.word	0x20000820
 800108c:	f3af 8000 	nop.w

08001090 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <chSchDoReschedule+0x10>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	7fdb      	ldrb	r3, [r3, #31]
 8001096:	b10b      	cbz	r3, 800109c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 8001098:	f7ff bfda 	b.w	8001050 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800109c:	f7ff bfb0 	b.w	8001000 <chSchDoRescheduleBehind>
 80010a0:	20000820 	.word	0x20000820
 80010a4:	f3af 8000 	nop.w
 80010a8:	f3af 8000 	nop.w
 80010ac:	f3af 8000 	nop.w

080010b0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 80010b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010b4:	4c10      	ldr	r4, [pc, #64]	; (80010f8 <_thread_init+0x48>)
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80010b6:	2200      	movs	r2, #0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010b8:	6966      	ldr	r6, [r4, #20]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80010ba:	f100 0528 	add.w	r5, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80010be:	f04f 0802 	mov.w	r8, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 80010c2:	f04f 0c0a 	mov.w	ip, #10
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80010c6:	f04f 0e01 	mov.w	lr, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80010ca:	f100 0724 	add.w	r7, r0, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010ce:	6146      	str	r6, [r0, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80010d0:	6081      	str	r1, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80010d2:	6104      	str	r4, [r0, #16]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80010d4:	63c1      	str	r1, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80010d6:	f880 801c 	strb.w	r8, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 80010da:	f880 c01f 	strb.w	ip, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80010de:	f880 e01e 	strb.w	lr, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80010e2:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80010e4:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80010e6:	6342      	str	r2, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80010e8:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 80010ea:	6130      	str	r0, [r6, #16]
 80010ec:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80010ee:	6247      	str	r7, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80010f0:	6285      	str	r5, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80010f2:	62c5      	str	r5, [r0, #44]	; 0x2c
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 80010f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010f8:	20000820 	.word	0x20000820
 80010fc:	f3af 8000 	nop.w

08001100 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001104:	4696      	mov	lr, r2
 8001106:	4604      	mov	r4, r0
 8001108:	2220      	movs	r2, #32
 800110a:	f382 8811 	msr	BASEPRI, r2
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800110e:	4e1b      	ldr	r6, [pc, #108]	; (800117c <chThdCreateStatic+0x7c>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001110:	f1a1 0524 	sub.w	r5, r1, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001114:	6972      	ldr	r2, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001116:	1947      	adds	r7, r0, r5
 8001118:	990a      	ldr	r1, [sp, #40]	; 0x28
 800111a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8001180 <chThdCreateStatic+0x80>
 800111e:	60c7      	str	r7, [r0, #12]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001120:	f100 0c24 	add.w	ip, r0, #36	; 0x24

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001124:	5143      	str	r3, [r0, r5]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001126:	f04f 0a02 	mov.w	sl, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800112a:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800112c:	f100 0328 	add.w	r3, r0, #40	; 0x28

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001130:	f04f 090a 	mov.w	r9, #10
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001134:	f04f 0801 	mov.w	r8, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001138:	6079      	str	r1, [r7, #4]
 800113a:	f8c7 b020 	str.w	fp, [r7, #32]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800113e:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001140:	f8c0 e008 	str.w	lr, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001144:	6106      	str	r6, [r0, #16]
 8001146:	6142      	str	r2, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001148:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800114c:	f880 a01c 	strb.w	sl, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001150:	f880 901f 	strb.w	r9, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001154:	f880 801e 	strb.w	r8, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001158:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800115a:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800115c:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800115e:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8001160:	6110      	str	r0, [r2, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001162:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001166:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8001168:	62c3      	str	r3, [r0, #44]	; 0x2c
 800116a:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800116c:	f7ff ff00 	bl	8000f70 <chSchWakeupS>
 8001170:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8001174:	4620      	mov	r0, r4
 8001176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800117a:	bf00      	nop
 800117c:	20000820 	.word	0x20000820
 8001180:	080002e1 	.word	0x080002e1
 8001184:	f3af 8000 	nop.w
 8001188:	f3af 8000 	nop.w
 800118c:	f3af 8000 	nop.w

08001190 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001190:	b508      	push	{r3, lr}
 8001192:	4601      	mov	r1, r0
 8001194:	2320      	movs	r3, #32
 8001196:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800119a:	2008      	movs	r0, #8
 800119c:	f7ff fec0 	bl	8000f20 <chSchGoSleepTimeoutS>
 80011a0:	2300      	movs	r3, #0
 80011a2:	f383 8811 	msr	BASEPRI, r3
 80011a6:	bd08      	pop	{r3, pc}
 80011a8:	f3af 8000 	nop.w
 80011ac:	f3af 8000 	nop.w

080011b0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80011b0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <chThdExitS+0x3c>)
 80011b4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80011b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80011b8:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80011bc:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 80011be:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80011c0:	d007      	beq.n	80011d2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80011c2:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80011c4:	4618      	mov	r0, r3
 80011c6:	6262      	str	r2, [r4, #36]	; 0x24
 80011c8:	f7ff fe7a 	bl	8000ec0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80011cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80011ce:	42ab      	cmp	r3, r5
 80011d0:	d1f7      	bne.n	80011c2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80011d2:	7f63      	ldrb	r3, [r4, #29]
 80011d4:	079b      	lsls	r3, r3, #30
 80011d6:	d104      	bne.n	80011e2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 80011d8:	6922      	ldr	r2, [r4, #16]
 80011da:	6963      	ldr	r3, [r4, #20]
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	6922      	ldr	r2, [r4, #16]
 80011e0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80011e2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80011e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80011e8:	f7ff be82 	b.w	8000ef0 <chSchGoSleepS>
 80011ec:	20000820 	.word	0x20000820

080011f0 <chThdExit>:
 80011f0:	2320      	movs	r3, #32
 80011f2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80011f6:	f7ff bfdb 	b.w	80011b0 <chThdExitS>
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w

08001200 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001200:	6803      	ldr	r3, [r0, #0]
 8001202:	b12b      	cbz	r3, 8001210 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8001204:	2200      	movs	r2, #0
 8001206:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001208:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800120a:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 800120c:	f7ff be58 	b.w	8000ec0 <chSchReadyI>
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	f3af 8000 	nop.w
 800121c:	f3af 8000 	nop.w

08001220 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001220:	b169      	cbz	r1, 800123e <chThdEnqueueTimeoutS+0x1e>
 8001222:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001226:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001228:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800122a:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800122c:	2004      	movs	r0, #4
 800122e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001232:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001234:	6053      	str	r3, [r2, #4]
}
 8001236:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800123a:	f7ff be71 	b.w	8000f20 <chSchGoSleepTimeoutS>
}
 800123e:	f04f 30ff 	mov.w	r0, #4294967295
 8001242:	4770      	bx	lr
 8001244:	20000820 	.word	0x20000820
 8001248:	f3af 8000 	nop.w
 800124c:	f3af 8000 	nop.w

08001250 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001250:	6802      	ldr	r2, [r0, #0]
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001252:	4603      	mov	r3, r0

  if (queue_notempty(tqp)) {
 8001254:	4290      	cmp	r0, r2
 8001256:	d009      	beq.n	800126c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001258:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800125a:	6814      	ldr	r4, [r2, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800125c:	4610      	mov	r0, r2
 800125e:	601c      	str	r4, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001260:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001262:	6211      	str	r1, [r2, #32]

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001264:	f85d 4b04 	ldr.w	r4, [sp], #4
  (void) chSchReadyI(tp);
 8001268:	f7ff be2a 	b.w	8000ec0 <chSchReadyI>
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001270:	4b01      	ldr	r3, [pc, #4]	; (8001278 <chTMStartMeasurementX+0x8>)
 8001272:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001274:	6083      	str	r3, [r0, #8]
 8001276:	4770      	bx	lr
 8001278:	e0001000 	.word	0xe0001000
 800127c:	f3af 8000 	nop.w

08001280 <chTMStopMeasurementX>:
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001282:	490f      	ldr	r1, [pc, #60]	; (80012c0 <chTMStopMeasurementX+0x40>)
 8001284:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001286:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001288:	6f49      	ldr	r1, [r1, #116]	; 0x74
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800128a:	1ad3      	subs	r3, r2, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800128c:	68c2      	ldr	r2, [r0, #12]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800128e:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001290:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001294:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001296:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8001298:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800129a:	18e4      	adds	r4, r4, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800129c:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800129e:	6802      	ldr	r2, [r0, #0]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80012a0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80012a4:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 80012a6:	bf88      	it	hi
 80012a8:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80012aa:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80012ac:	e9c0 4504 	strd	r4, r5, [r0, #16]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80012b0:	bc30      	pop	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80012b2:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80012b4:	bf38      	it	cc
 80012b6:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e0001000 	.word	0xe0001000
 80012c0:	20000820 	.word	0x20000820
 80012c4:	f3af 8000 	nop.w
 80012c8:	f3af 8000 	nop.w
 80012cc:	f3af 8000 	nop.w

080012d0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80012d0:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80012d2:	4c0c      	ldr	r4, [pc, #48]	; (8001304 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 80012d4:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80012d6:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80012dc:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80012de:	2600      	movs	r6, #0
 80012e0:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80012e2:	6763      	str	r3, [r4, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80012e4:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 80012e6:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 80012e8:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80012ea:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80012ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80012f0:	f7ff ffbe 	bl	8001270 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80012f4:	4668      	mov	r0, sp
 80012f6:	f7ff ffc3 	bl	8001280 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80012fa:	9b02      	ldr	r3, [sp, #8]
 80012fc:	6763      	str	r3, [r4, #116]	; 0x74
}
 80012fe:	b006      	add	sp, #24
 8001300:	bdd0      	pop	{r4, r6, r7, pc}
 8001302:	bf00      	nop
 8001304:	20000820 	.word	0x20000820
 8001308:	f3af 8000 	nop.w
 800130c:	f3af 8000 	nop.w

08001310 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001310:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001312:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001314:	6040      	str	r0, [r0, #4]
 8001316:	6083      	str	r3, [r0, #8]
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w

08001320 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001320:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001322:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001324:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001326:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001328:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800132a:	d00a      	beq.n	8001342 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800132c:	2a0b      	cmp	r2, #11
 800132e:	d000      	beq.n	8001332 <chEvtSignalI+0x12>
 8001330:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001332:	6a03      	ldr	r3, [r0, #32]
 8001334:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001336:	428b      	cmp	r3, r1
 8001338:	d1fa      	bne.n	8001330 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 800133e:	f7ff bdbf 	b.w	8000ec0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001342:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001344:	4219      	tst	r1, r3
 8001346:	d1f8      	bne.n	800133a <chEvtSignalI+0x1a>
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w

08001350 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001350:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001352:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001354:	4606      	mov	r6, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001356:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001358:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800135a:	d00d      	beq.n	8001378 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 800135c:	68e3      	ldr	r3, [r4, #12]
 800135e:	432b      	orrs	r3, r5
 8001360:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001362:	b115      	cbz	r5, 800136a <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8001364:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001366:	4213      	tst	r3, r2
 8001368:	d003      	beq.n	8001372 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800136a:	6860      	ldr	r0, [r4, #4]
 800136c:	68a1      	ldr	r1, [r4, #8]
 800136e:	f7ff ffd7 	bl	8001320 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001372:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001374:	42a6      	cmp	r6, r4
 8001376:	d1f1      	bne.n	800135c <chEvtBroadcastFlagsI+0xc>
 8001378:	bd70      	pop	{r4, r5, r6, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w

08001380 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8001382:	b570      	push	{r4, r5, r6, lr}
 8001384:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8001386:	699c      	ldr	r4, [r3, #24]
 8001388:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800138c:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8001390:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8001392:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001394:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8001396:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8001398:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 800139a:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 800139c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800139e:	6014      	str	r4, [r2, #0]
  tqp->p_prev = tp;
 80013a0:	62c4      	str	r4, [r0, #44]	; 0x2c
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80013a2:	d007      	beq.n	80013b4 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80013a4:	200c      	movs	r0, #12
 80013a6:	f7ff fda3 	bl	8000ef0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 80013aa:	6a20      	ldr	r0, [r4, #32]
 80013ac:	2300      	movs	r3, #0
 80013ae:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 80013b4:	f7ff fd84 	bl	8000ec0 <chSchReadyI>
 80013b8:	e7f4      	b.n	80013a4 <chMsgSend+0x24>
 80013ba:	bf00      	nop
 80013bc:	20000820 	.word	0x20000820

080013c0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 80013c0:	b510      	push	{r4, lr}
 80013c2:	2320      	movs	r3, #32
 80013c4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 80013c8:	4c0b      	ldr	r4, [pc, #44]	; (80013f8 <chMsgWait+0x38>)
 80013ca:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 80013cc:	4613      	mov	r3, r2
 80013ce:	f853 0f28 	ldr.w	r0, [r3, #40]!
 80013d2:	4298      	cmp	r0, r3
 80013d4:	d008      	beq.n	80013e8 <chMsgWait+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80013d6:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 80013d8:	240d      	movs	r4, #13
 80013da:	6291      	str	r1, [r2, #40]	; 0x28
  tqp->p_next->p_prev = (thread_t *)tqp;
 80013dc:	604b      	str	r3, [r1, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	7704      	strb	r4, [r0, #28]
 80013e2:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return tp;
}
 80013e6:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 80013e8:	200e      	movs	r0, #14
 80013ea:	f7ff fd81 	bl	8000ef0 <chSchGoSleepS>
 80013ee:	69a2      	ldr	r2, [r4, #24]
 80013f0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80013f2:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80013f6:	e7ee      	b.n	80013d6 <chMsgWait+0x16>
 80013f8:	20000820 	.word	0x20000820
 80013fc:	f3af 8000 	nop.w

08001400 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 8001400:	b508      	push	{r3, lr}
 8001402:	2320      	movs	r3, #32
 8001404:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8001408:	f7ff fdb2 	bl	8000f70 <chSchWakeupS>
 800140c:	2300      	movs	r3, #0
 800140e:	f383 8811 	msr	BASEPRI, r3
 8001412:	bd08      	pop	{r3, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	f3af 8000 	nop.w
 800141c:	f3af 8000 	nop.w

08001420 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 8001420:	b430      	push	{r4, r5}
 8001422:	9c02      	ldr	r4, [sp, #8]

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001424:	2500      	movs	r5, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001426:	440a      	add	r2, r1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001428:	6085      	str	r5, [r0, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800142a:	6204      	str	r4, [r0, #32]
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800142c:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800142e:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001430:	6040      	str	r0, [r0, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001432:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 8001434:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 8001436:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001438:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
}
 800143a:	bc30      	pop	{r4, r5}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <chIQPutI>:
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001440:	6943      	ldr	r3, [r0, #20]
 8001442:	6982      	ldr	r2, [r0, #24]
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8001444:	b510      	push	{r4, lr}
 8001446:	4293      	cmp	r3, r2
 8001448:	d010      	beq.n	800146c <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800144a:	6882      	ldr	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 800144c:	1c5c      	adds	r4, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800144e:	3201      	adds	r2, #1
 8001450:	6082      	str	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 8001452:	6144      	str	r4, [r0, #20]
 8001454:	7019      	strb	r1, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001456:	6942      	ldr	r2, [r0, #20]
 8001458:	6903      	ldr	r3, [r0, #16]
 800145a:	429a      	cmp	r2, r3
 800145c:	d301      	bcc.n	8001462 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 800145e:	68c3      	ldr	r3, [r0, #12]
 8001460:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8001462:	2100      	movs	r1, #0
 8001464:	f7ff fef4 	bl	8001250 <chThdDequeueNextI>

  return Q_OK;
 8001468:	2000      	movs	r0, #0
 800146a:	bd10      	pop	{r4, pc}
 800146c:	6882      	ldr	r2, [r0, #8]
 800146e:	2a00      	cmp	r2, #0
 8001470:	d0eb      	beq.n	800144a <chIQPutI+0xa>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 8001472:	f06f 0003 	mvn.w	r0, #3
 8001476:	bd10      	pop	{r4, pc}
 8001478:	f3af 8000 	nop.w
 800147c:	f3af 8000 	nop.w

08001480 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	2320      	movs	r3, #32
 8001484:	460e      	mov	r6, r1
 8001486:	4604      	mov	r4, r0
 8001488:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800148c:	69c3      	ldr	r3, [r0, #28]
 800148e:	b13b      	cbz	r3, 80014a0 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8001490:	4798      	blx	r3
 8001492:	e005      	b.n	80014a0 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001494:	4620      	mov	r0, r4
 8001496:	4631      	mov	r1, r6
 8001498:	f7ff fec2 	bl	8001220 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800149c:	2800      	cmp	r0, #0
 800149e:	db13      	blt.n	80014c8 <chIQGetTimeout+0x48>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80014a0:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 80014a2:	2d00      	cmp	r5, #0
 80014a4:	d0f6      	beq.n	8001494 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80014a6:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80014a8:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80014aa:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80014ac:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80014ae:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80014b0:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80014b2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 80014b4:	bf28      	it	cs
 80014b6:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80014b8:	61a2      	str	r2, [r4, #24]
 80014ba:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 80014bc:	bf28      	it	cs
 80014be:	61a3      	strcs	r3, [r4, #24]
 80014c0:	2300      	movs	r3, #0
 80014c2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
 80014c8:	f385 8811 	msr	BASEPRI, r5

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
 80014ce:	bf00      	nop

080014d0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 80014d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d4:	4604      	mov	r4, r0
 80014d6:	b083      	sub	sp, #12
 80014d8:	4689      	mov	r9, r1
 80014da:	4693      	mov	fp, r2
 80014dc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80014de:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80014e2:	2720      	movs	r7, #32
 80014e4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80014e8:	2600      	movs	r6, #0
 80014ea:	46b2      	mov	sl, r6
 80014ec:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 80014ee:	f1b8 0f00 	cmp.w	r8, #0
 80014f2:	d007      	beq.n	8001504 <chIQReadTimeout+0x34>
      nfy(iqp);
 80014f4:	4620      	mov	r0, r4
 80014f6:	47c0      	blx	r8
 80014f8:	e004      	b.n	8001504 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7ff fe8f 	bl	8001220 <chThdEnqueueTimeoutS>
 8001502:	b9d0      	cbnz	r0, 800153a <chIQReadTimeout+0x6a>
 8001504:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001506:	2f00      	cmp	r7, #0
 8001508:	d0f7      	beq.n	80014fa <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800150a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800150c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800150e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001510:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001512:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001514:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001516:	7813      	ldrb	r3, [r2, #0]
 8001518:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800151c:	6923      	ldr	r3, [r4, #16]
 800151e:	69a2      	ldr	r2, [r4, #24]
 8001520:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001522:	bf24      	itt	cs
 8001524:	68e3      	ldrcs	r3, [r4, #12]
 8001526:	61a3      	strcs	r3, [r4, #24]
 8001528:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800152c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800152e:	45b3      	cmp	fp, r6
 8001530:	d005      	beq.n	800153e <chIQReadTimeout+0x6e>
 8001532:	9b01      	ldr	r3, [sp, #4]
 8001534:	f383 8811 	msr	BASEPRI, r3
 8001538:	e7d9      	b.n	80014ee <chIQReadTimeout+0x1e>
 800153a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800153e:	4630      	mov	r0, r6
 8001540:	b003      	add	sp, #12
 8001542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001546:	bf00      	nop
 8001548:	f3af 8000 	nop.w
 800154c:	f3af 8000 	nop.w

08001550 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 8001550:	b430      	push	{r4, r5}
 8001552:	9c02      	ldr	r4, [sp, #8]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001554:	188d      	adds	r5, r1, r2
 8001556:	6105      	str	r5, [r0, #16]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001558:	6204      	str	r4, [r0, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800155a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 800155c:	6040      	str	r0, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800155e:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 8001560:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 8001562:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 8001564:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001566:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
}
 8001568:	bc30      	pop	{r4, r5}
 800156a:	4770      	bx	lr
 800156c:	f3af 8000 	nop.w

08001570 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	4604      	mov	r4, r0
 8001574:	460f      	mov	r7, r1
 8001576:	4616      	mov	r6, r2
 8001578:	2320      	movs	r3, #32
 800157a:	f383 8811 	msr	BASEPRI, r3
 800157e:	e005      	b.n	800158c <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001580:	4620      	mov	r0, r4
 8001582:	4631      	mov	r1, r6
 8001584:	f7ff fe4c 	bl	8001220 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001588:	2800      	cmp	r0, #0
 800158a:	db17      	blt.n	80015bc <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800158c:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800158e:	2d00      	cmp	r5, #0
 8001590:	d0f6      	beq.n	8001580 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001592:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001594:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001596:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001598:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800159a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800159c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800159e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80015a0:	6923      	ldr	r3, [r4, #16]
 80015a2:	6962      	ldr	r2, [r4, #20]
 80015a4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80015a6:	bf24      	itt	cs
 80015a8:	68e3      	ldrcs	r3, [r4, #12]
 80015aa:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 80015ac:	69e3      	ldr	r3, [r4, #28]
 80015ae:	b10b      	cbz	r3, 80015b4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 80015b0:	4620      	mov	r0, r4
 80015b2:	4798      	blx	r3
 80015b4:	2000      	movs	r0, #0
 80015b6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 80015ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015bc:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      chSysUnlock();
      return msg;
 80015c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015c2:	bf00      	nop
 80015c4:	f3af 8000 	nop.w
 80015c8:	f3af 8000 	nop.w
 80015cc:	f3af 8000 	nop.w

080015d0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 80015d0:	b538      	push	{r3, r4, r5, lr}
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80015d2:	6942      	ldr	r2, [r0, #20]
 80015d4:	6983      	ldr	r3, [r0, #24]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d00f      	beq.n	80015fa <chOQGetI+0x2a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80015da:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 80015dc:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80015de:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80015e0:	3201      	adds	r2, #1
 80015e2:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 80015e4:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 80015e6:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80015e8:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80015ea:	d301      	bcc.n	80015f0 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 80015ec:	68c3      	ldr	r3, [r0, #12]
 80015ee:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 80015f0:	2100      	movs	r1, #0
 80015f2:	f7ff fe2d 	bl	8001250 <chThdDequeueNextI>

  return (msg_t)b;
 80015f6:	4620      	mov	r0, r4
 80015f8:	bd38      	pop	{r3, r4, r5, pc}
 80015fa:	6882      	ldr	r2, [r0, #8]
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	d0ec      	beq.n	80015da <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8001600:	f06f 0002 	mvn.w	r0, #2
 8001604:	bd38      	pop	{r3, r4, r5, pc}
 8001606:	bf00      	nop
 8001608:	f3af 8000 	nop.w
 800160c:	f3af 8000 	nop.w

08001610 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001614:	b083      	sub	sp, #12
 8001616:	4604      	mov	r4, r0
 8001618:	468b      	mov	fp, r1
 800161a:	4615      	mov	r5, r2
 800161c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800161e:	69c7      	ldr	r7, [r0, #28]
 8001620:	f04f 0820 	mov.w	r8, #32
 8001624:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8001628:	2600      	movs	r6, #0
 800162a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800162c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800162e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001632:	b1fb      	cbz	r3, 8001674 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001634:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001636:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001638:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800163a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800163c:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800163e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001640:	f89b 3000 	ldrb.w	r3, [fp]
 8001644:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001646:	6923      	ldr	r3, [r4, #16]
 8001648:	6962      	ldr	r2, [r4, #20]
 800164a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800164c:	bf24      	itt	cs
 800164e:	68e3      	ldrcs	r3, [r4, #12]
 8001650:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001652:	b10f      	cbz	r7, 8001658 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8001654:	4620      	mov	r0, r4
 8001656:	47b8      	blx	r7
 8001658:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800165c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800165e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001662:	d011      	beq.n	8001688 <chOQWriteTimeout+0x78>
 8001664:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001668:	46d3      	mov	fp, sl
 800166a:	68a3      	ldr	r3, [r4, #8]
 800166c:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1df      	bne.n	8001634 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001674:	4620      	mov	r0, r4
 8001676:	9901      	ldr	r1, [sp, #4]
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	f7ff fdd1 	bl	8001220 <chThdEnqueueTimeoutS>
 800167e:	9b00      	ldr	r3, [sp, #0]
 8001680:	2800      	cmp	r0, #0
 8001682:	d0d3      	beq.n	800162c <chOQWriteTimeout+0x1c>
 8001684:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8001688:	4630      	mov	r0, r6
 800168a:	b003      	add	sp, #12
 800168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001690 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001690:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001694:	4806      	ldr	r0, [pc, #24]	; (80016b0 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001696:	4907      	ldr	r1, [pc, #28]	; (80016b4 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001698:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800169c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80016a0:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80016a2:	600b      	str	r3, [r1, #0]
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200018ef 	.word	0x200018ef
 80016ac:	20014000 	.word	0x20014000
 80016b0:	20000974 	.word	0x20000974
 80016b4:	20000970 	.word	0x20000970
 80016b8:	f3af 8000 	nop.w
 80016bc:	f3af 8000 	nop.w

080016c0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 80016c0:	b410      	push	{r4}
 80016c2:	2320      	movs	r3, #32
 80016c4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80016c8:	4c09      	ldr	r4, [pc, #36]	; (80016f0 <chCoreAlloc+0x30>)
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <chCoreAlloc+0x34>)
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80016d0:	1dc3      	adds	r3, r0, #7
 80016d2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80016d6:	1a89      	subs	r1, r1, r2
 80016d8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80016da:	bf9d      	ittte	ls
 80016dc:	189b      	addls	r3, r3, r2
 80016de:	6023      	strls	r3, [r4, #0]

  return p;
 80016e0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80016e2:	2000      	movhi	r0, #0
 80016e4:	2300      	movs	r3, #0
 80016e6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80016ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000974 	.word	0x20000974
 80016f4:	20000970 	.word	0x20000970
 80016f8:	f3af 8000 	nop.w
 80016fc:	f3af 8000 	nop.w

08001700 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <_heap_init+0x14>)
 8001702:	4905      	ldr	r1, [pc, #20]	; (8001718 <_heap_init+0x18>)
  default_heap.h_free.h.u.next = NULL;
 8001704:	2200      	movs	r2, #0
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001706:	f103 0010 	add.w	r0, r3, #16
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800170a:	6019      	str	r1, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
 800170c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800170e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001710:	f7ff bdfe 	b.w	8001310 <chMtxObjectInit>
 8001714:	20000978 	.word	0x20000978
 8001718:	080016c1 	.word	0x080016c1
 800171c:	f3af 8000 	nop.w

08001720 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001720:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001724:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001726:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800172a:	2300      	movs	r3, #0
 800172c:	f383 8811 	msr	BASEPRI, r3
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	f3af 8000 	nop.w
 8001738:	f3af 8000 	nop.w
 800173c:	f3af 8000 	nop.w

08001740 <_port_irq_epilogue>:
 8001740:	2320      	movs	r3, #32
 8001742:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <_port_irq_epilogue+0x44>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800174e:	d102      	bne.n	8001756 <_port_irq_epilogue+0x16>
 8001750:	f383 8811 	msr	BASEPRI, r3
 8001754:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8001756:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001758:	f3ef 8409 	mrs	r4, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800175c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001760:	f844 3c04 	str.w	r3, [r4, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8001764:	f1a4 0320 	sub.w	r3, r4, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001768:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800176c:	f7ff fc30 	bl	8000fd0 <chSchIsPreemptionRequired>
 8001770:	b118      	cbz	r0, 800177a <_port_irq_epilogue+0x3a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <_port_irq_epilogue+0x48>)
 8001774:	f844 3c08 	str.w	r3, [r4, #-8]
 8001778:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <_port_irq_epilogue+0x4c>)
 800177c:	f844 3c08 	str.w	r3, [r4, #-8]
 8001780:	bd10      	pop	{r4, pc}
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	080002f1 	.word	0x080002f1
 800178c:	080002f4 	.word	0x080002f4

08001790 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001790:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001792:	f000 f945 	bl	8001a20 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <halInit+0x2c>)
 8001798:	f000 fd02 	bl	80021a0 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 800179c:	f000 f818 	bl	80017d0 <adcInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 80017a0:	f000 f83e 	bl	8001820 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 80017a4:	f000 f85c 	bl	8001860 <icuInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 80017a8:	f000 f86a 	bl	8001880 <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80017ac:	f000 f8b8 	bl	8001920 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80017b0:	f001 fb1e 	bl	8002df0 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 80017b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 80017b8:	f000 b802 	b.w	80017c0 <stInit>
 80017bc:	080058d0 	.word	0x080058d0

080017c0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 80017c0:	f000 bbc6 	b.w	8001f50 <st_lld_init>
 80017c4:	f3af 8000 	nop.w
 80017c8:	f3af 8000 	nop.w
 80017cc:	f3af 8000 	nop.w

080017d0 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 80017d0:	f000 bbce 	b.w	8001f70 <adc_lld_init>
 80017d4:	f3af 8000 	nop.w
 80017d8:	f3af 8000 	nop.w
 80017dc:	f3af 8000 	nop.w

080017e0 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 80017e0:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80017e2:	2201      	movs	r2, #1
 80017e4:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 80017e6:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 80017e8:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 80017ea:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 80017ec:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80017ee:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 80017f0:	3018      	adds	r0, #24
 80017f2:	f7ff bd8d 	b.w	8001310 <chMtxObjectInit>
 80017f6:	bf00      	nop
 80017f8:	f3af 8000 	nop.w
 80017fc:	f3af 8000 	nop.w

08001800 <adcStart>:
 * @param[in] config    pointer to the @p ADCConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {
 8001800:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001802:	2320      	movs	r3, #32
 8001804:	4604      	mov	r4, r0
 8001806:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 800180a:	6041      	str	r1, [r0, #4]
  adc_lld_start(adcp);
 800180c:	f000 fbd0 	bl	8001fb0 <adc_lld_start>
  adcp->state = ADC_READY;
 8001810:	2302      	movs	r3, #2
 8001812:	7023      	strb	r3, [r4, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	f383 8811 	msr	BASEPRI, r3
 800181a:	bd10      	pop	{r4, pc}
 800181c:	f3af 8000 	nop.w

08001820 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 8001820:	f000 bf56 	b.w	80026d0 <i2c_lld_init>
 8001824:	f3af 8000 	nop.w
 8001828:	f3af 8000 	nop.w
 800182c:	f3af 8000 	nop.w

08001830 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001830:	2201      	movs	r2, #1
  i2cp->config = NULL;
 8001832:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001834:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 8001836:	6043      	str	r3, [r0, #4]
 8001838:	300c      	adds	r0, #12
 800183a:	f7ff bd69 	b.w	8001310 <chMtxObjectInit>
 800183e:	bf00      	nop

08001840 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8001840:	b510      	push	{r4, lr}
 8001842:	2320      	movs	r3, #32
 8001844:	4604      	mov	r4, r0
 8001846:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 800184a:	6041      	str	r1, [r0, #4]
  i2c_lld_start(i2cp);
 800184c:	f000 ff58 	bl	8002700 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8001850:	2302      	movs	r3, #2
 8001852:	7023      	strb	r3, [r4, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	f383 8811 	msr	BASEPRI, r3
 800185a:	bd10      	pop	{r4, pc}
 800185c:	f3af 8000 	nop.w

08001860 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 8001860:	f001 b806 	b.w	8002870 <icu_lld_init>
 8001864:	f3af 8000 	nop.w
 8001868:	f3af 8000 	nop.w
 800186c:	f3af 8000 	nop.w

08001870 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8001870:	2201      	movs	r2, #1
  icup->config = NULL;
 8001872:	2300      	movs	r3, #0
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8001874:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 8001876:	6043      	str	r3, [r0, #4]
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	f3af 8000 	nop.w

08001880 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 8001880:	f001 b886 	b.w	8002990 <pwm_lld_init>
 8001884:	f3af 8000 	nop.w
 8001888:	f3af 8000 	nop.w
 800188c:	f3af 8000 	nop.w

08001890 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8001890:	2300      	movs	r3, #0
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8001892:	2201      	movs	r2, #1
 8001894:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 8001896:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 8001898:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 800189a:	7403      	strb	r3, [r0, #16]
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80018a0:	300c      	adds	r0, #12
 80018a2:	f7ff be15 	b.w	80014d0 <chIQReadTimeout>
 80018a6:	bf00      	nop
 80018a8:	f3af 8000 	nop.w
 80018ac:	f3af 8000 	nop.w

080018b0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80018b0:	300c      	adds	r0, #12
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	f7ff be0b 	b.w	80014d0 <chIQReadTimeout>
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w

080018c0 <writet>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80018c0:	3030      	adds	r0, #48	; 0x30
 80018c2:	f7ff bea5 	b.w	8001610 <chOQWriteTimeout>
 80018c6:	bf00      	nop
 80018c8:	f3af 8000 	nop.w
 80018cc:	f3af 8000 	nop.w

080018d0 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80018d0:	3030      	adds	r0, #48	; 0x30
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	f7ff be9b 	b.w	8001610 <chOQWriteTimeout>
 80018da:	bf00      	nop
 80018dc:	f3af 8000 	nop.w

080018e0 <gett>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80018e0:	300c      	adds	r0, #12
 80018e2:	f7ff bdcd 	b.w	8001480 <chIQGetTimeout>
 80018e6:	bf00      	nop
 80018e8:	f3af 8000 	nop.w
 80018ec:	f3af 8000 	nop.w

080018f0 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80018f0:	300c      	adds	r0, #12
 80018f2:	f04f 31ff 	mov.w	r1, #4294967295
 80018f6:	f7ff bdc3 	b.w	8001480 <chIQGetTimeout>
 80018fa:	bf00      	nop
 80018fc:	f3af 8000 	nop.w

08001900 <putt>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001900:	3030      	adds	r0, #48	; 0x30
 8001902:	f7ff be35 	b.w	8001570 <chOQPutTimeout>
 8001906:	bf00      	nop
 8001908:	f3af 8000 	nop.w
 800190c:	f3af 8000 	nop.w

08001910 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001910:	3030      	adds	r0, #48	; 0x30
 8001912:	f04f 32ff 	mov.w	r2, #4294967295
 8001916:	f7ff be2b 	b.w	8001570 <chOQPutTimeout>
 800191a:	bf00      	nop
 800191c:	f3af 8000 	nop.w

08001920 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 8001920:	f001 b98e 	b.w	8002c40 <sd_lld_init>
 8001924:	f3af 8000 	nop.w
 8001928:	f3af 8000 	nop.w
 800192c:	f3af 8000 	nop.w

08001930 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001930:	b530      	push	{r4, r5, lr}
 8001932:	4604      	mov	r4, r0
 8001934:	4615      	mov	r5, r2
 8001936:	460b      	mov	r3, r1

  sdp->vmt = &vmt;
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <sdObjectInit+0x3c>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800193a:	b083      	sub	sp, #12

  sdp->vmt = &vmt;
 800193c:	f840 1b04 	str.w	r1, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8001940:	2201      	movs	r2, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001942:	9400      	str	r4, [sp, #0]
 8001944:	f104 0154 	add.w	r1, r4, #84	; 0x54
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8001948:	6060      	str	r0, [r4, #4]
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800194a:	7222      	strb	r2, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800194c:	f104 000c 	add.w	r0, r4, #12
 8001950:	2210      	movs	r2, #16
 8001952:	f7ff fd65 	bl	8001420 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	462b      	mov	r3, r5
 800195a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800195e:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8001962:	2210      	movs	r2, #16
 8001964:	f7ff fdf4 	bl	8001550 <chOQObjectInit>
}
 8001968:	b003      	add	sp, #12
 800196a:	bd30      	pop	{r4, r5, pc}
 800196c:	080057d0 	.word	0x080057d0

08001970 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8001970:	b510      	push	{r4, lr}
 8001972:	2320      	movs	r3, #32
 8001974:	4604      	mov	r4, r0
 8001976:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 800197a:	f001 f9a9 	bl	8002cd0 <sd_lld_start>
  sdp->state = SD_READY;
 800197e:	2302      	movs	r3, #2
 8001980:	7223      	strb	r3, [r4, #8]
 8001982:	2300      	movs	r3, #0
 8001984:	f383 8811 	msr	BASEPRI, r3
 8001988:	bd10      	pop	{r4, pc}
 800198a:	bf00      	nop
 800198c:	f3af 8000 	nop.w

08001990 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8001990:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001992:	6943      	ldr	r3, [r0, #20]
 8001994:	4604      	mov	r4, r0
 8001996:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8001998:	b13b      	cbz	r3, 80019aa <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800199a:	4629      	mov	r1, r5
 800199c:	f104 000c 	add.w	r0, r4, #12
 80019a0:	f7ff fd4e 	bl	8001440 <chIQPutI>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	db0b      	blt.n	80019c0 <sdIncomingDataI+0x30>
 80019a8:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80019aa:	3004      	adds	r0, #4
 80019ac:	2104      	movs	r1, #4
 80019ae:	f7ff fccf 	bl	8001350 <chEvtBroadcastFlagsI>
 80019b2:	4629      	mov	r1, r5
 80019b4:	f104 000c 	add.w	r0, r4, #12
 80019b8:	f7ff fd42 	bl	8001440 <chIQPutI>
 80019bc:	2800      	cmp	r0, #0
 80019be:	daf3      	bge.n	80019a8 <sdIncomingDataI+0x18>
 80019c0:	1d20      	adds	r0, r4, #4
 80019c2:	2180      	movs	r1, #128	; 0x80
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 80019c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019c8:	f7ff bcc2 	b.w	8001350 <chEvtBroadcastFlagsI>
 80019cc:	f3af 8000 	nop.w

080019d0 <nvicEnableVector>:
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019d0:	0943      	lsrs	r3, r0, #5
 80019d2:	009b      	lsls	r3, r3, #2
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 80019d4:	b410      	push	{r4}

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80019d6:	0109      	lsls	r1, r1, #4
 80019d8:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80019dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019e0:	f000 001f 	and.w	r0, r0, #31
 80019e4:	2201      	movs	r2, #1

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80019e6:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80019ea:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019ee:	4082      	lsls	r2, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80019f0:	b2c9      	uxtb	r1, r1
 80019f2:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	f3af 8000 	nop.w
 8001a0c:	f3af 8000 	nop.w

08001a10 <nvicSetSystemHandlerPriority>:
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 8001a10:	0109      	lsls	r1, r1, #4
 8001a12:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a16:	b2c9      	uxtb	r1, r1
 8001a18:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 8001a1c:	7601      	strb	r1, [r0, #24]
 8001a1e:	4770      	bx	lr

08001a20 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <hal_lld_init+0x60>)
 8001a22:	f04f 31ff 	mov.w	r1, #4294967295
 8001a26:	2200      	movs	r2, #0
 8001a28:	6918      	ldr	r0, [r3, #16]
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8001a2a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001a2c:	6119      	str	r1, [r3, #16]
 8001a2e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001a30:	6958      	ldr	r0, [r3, #20]
 8001a32:	6159      	str	r1, [r3, #20]
 8001a34:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001a36:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001a38:	4c12      	ldr	r4, [pc, #72]	; (8001a84 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001a3a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8001a3e:	6218      	str	r0, [r3, #32]
 8001a40:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001a42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a44:	6259      	str	r1, [r3, #36]	; 0x24
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001a48:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a4a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001a4e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001a50:	6821      	ldr	r1, [r4, #0]
 8001a52:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a56:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001a58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a5a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001a5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001a62:	d003      	beq.n	8001a6c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001a64:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001a68:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001a6a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8001a6e:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001a72:	6853      	ldr	r3, [r2, #4]
 8001a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a78:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8001a7a:	f000 b9e9 	b.w	8001e50 <dmaInit>
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000
 8001a88:	f3af 8000 	nop.w
 8001a8c:	f3af 8000 	nop.w

08001a90 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <stm32_clock_init+0xa4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
#else
  PWR->CR = 0;
 8001a92:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <stm32_clock_init+0xa8>)
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001a94:	4619      	mov	r1, r3
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 8001a96:	b410      	push	{r4}

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
#else
  PWR->CR = 0;
 8001a98:	2000      	movs	r0, #0
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001a9a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 8001a9e:	641c      	str	r4, [r3, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
#else
  PWR->CR = 0;
 8001aa0:	6010      	str	r0, [r2, #0]
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001aaa:	680b      	ldr	r3, [r1, #0]
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <stm32_clock_init+0xa4>)
 8001aae:	079c      	lsls	r4, r3, #30
 8001ab0:	d5fb      	bpl.n	8001aaa <stm32_clock_init+0x1a>
  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001ab2:	4611      	mov	r1, r2
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001ab4:	6893      	ldr	r3, [r2, #8]
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001abc:	6893      	ldr	r3, [r2, #8]
 8001abe:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001ac0:	688b      	ldr	r3, [r1, #8]
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <stm32_clock_init+0xa4>)
 8001ac4:	f013 030c 	ands.w	r3, r3, #12
 8001ac8:	d1fa      	bne.n	8001ac0 <stm32_clock_init+0x30>
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001aca:	4611      	mov	r1, r2
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001acc:	6810      	ldr	r0, [r2, #0]
 8001ace:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8001ad2:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001ad4:	6093      	str	r3, [r2, #8]
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001ad6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001ade:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <stm32_clock_init+0xa4>)
 8001ae2:	0798      	lsls	r0, r3, #30
 8001ae4:	d5fb      	bpl.n	8001ade <stm32_clock_init+0x4e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001ae6:	4611      	mov	r1, r2
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <stm32_clock_init+0xac>)
 8001aea:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001aec:	6813      	ldr	r3, [r2, #0]
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	6013      	str	r3, [r2, #0]
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001af4:	680b      	ldr	r3, [r1, #0]
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <stm32_clock_init+0xa4>)
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	d5fb      	bpl.n	8001af4 <stm32_clock_init+0x64>
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001afc:	4611      	mov	r1, r2
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <stm32_clock_init+0xb0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001b00:	4c10      	ldr	r4, [pc, #64]	; (8001b44 <stm32_clock_init+0xb4>)
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001b02:	f44f 60e0 	mov.w	r0, #1792	; 0x700
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001b06:	6094      	str	r4, [r2, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001b08:	6018      	str	r0, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001b0a:	6893      	ldr	r3, [r2, #8]
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001b12:	688b      	ldr	r3, [r1, #8]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <stm32_clock_init+0xa4>)
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d1f9      	bne.n	8001b12 <stm32_clock_init+0x82>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001b1e:	6c53      	ldr	r3, [r2, #68]	; 0x44
}
 8001b20:	f85d 4b04 	ldr.w	r4, [sp], #4
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6653      	str	r3, [r2, #100]	; 0x64
}
 8001b32:	4770      	bx	lr
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	05013c10 	.word	0x05013c10
 8001b40:	40023c00 	.word	0x40023c00
 8001b44:	3c88b880 	.word	0x3c88b880
 8001b48:	f3af 8000 	nop.w
 8001b4c:	f3af 8000 	nop.w

08001b50 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8001b50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001b56:	6819      	ldr	r1, [r3, #0]
 8001b58:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8001b5c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8001b5e:	6813      	ldr	r3, [r2, #0]
 8001b60:	b10b      	cbz	r3, 8001b66 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001b62:	6850      	ldr	r0, [r2, #4]
 8001b64:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8001b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001b6a:	f7ff bde9 	b.w	8001740 <_port_irq_epilogue>
 8001b6e:	bf00      	nop
 8001b70:	40026000 	.word	0x40026000
 8001b74:	20000998 	.word	0x20000998
 8001b78:	f3af 8000 	nop.w
 8001b7c:	f3af 8000 	nop.w

08001b80 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <Vector70+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001b84:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8001b86:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001b88:	0989      	lsrs	r1, r1, #6
 8001b8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001b8e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
 8001b90:	018c      	lsls	r4, r1, #6
 8001b92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8001b94:	b10a      	cbz	r2, 8001b9a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8001b96:	68c0      	ldr	r0, [r0, #12]
 8001b98:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001b9e:	f7ff bdcf 	b.w	8001740 <_port_irq_epilogue>
 8001ba2:	bf00      	nop
 8001ba4:	40026000 	.word	0x40026000
 8001ba8:	20000998 	.word	0x20000998
 8001bac:	f3af 8000 	nop.w

08001bb0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <Vector74+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001bb4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8001bb6:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001bb8:	0c09      	lsrs	r1, r1, #16
 8001bba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001bbe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
 8001bc0:	040c      	lsls	r4, r1, #16
 8001bc2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8001bc4:	b10a      	cbz	r2, 8001bca <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8001bc6:	6940      	ldr	r0, [r0, #20]
 8001bc8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001bce:	f7ff bdb7 	b.w	8001740 <_port_irq_epilogue>
 8001bd2:	bf00      	nop
 8001bd4:	40026000 	.word	0x40026000
 8001bd8:	20000998 	.word	0x20000998
 8001bdc:	f3af 8000 	nop.w

08001be0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <Vector78+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001be4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8001be6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001be8:	0d89      	lsrs	r1, r1, #22
 8001bea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001bee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
 8001bf0:	058c      	lsls	r4, r1, #22
 8001bf2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8001bf4:	b10a      	cbz	r2, 8001bfa <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8001bf6:	69c0      	ldr	r0, [r0, #28]
 8001bf8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001bfe:	f7ff bd9f 	b.w	8001740 <_port_irq_epilogue>
 8001c02:	bf00      	nop
 8001c04:	40026000 	.word	0x40026000
 8001c08:	20000998 	.word	0x20000998
 8001c0c:	f3af 8000 	nop.w

08001c10 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001c10:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001c16:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8001c18:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001c1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8001c1e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8001c20:	b10a      	cbz	r2, 8001c26 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8001c22:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001c24:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001c26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001c2a:	f7ff bd89 	b.w	8001740 <_port_irq_epilogue>
 8001c2e:	bf00      	nop
 8001c30:	40026000 	.word	0x40026000
 8001c34:	20000998 	.word	0x20000998
 8001c38:	f3af 8000 	nop.w
 8001c3c:	f3af 8000 	nop.w

08001c40 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <Vector80+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001c44:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8001c46:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001c48:	0989      	lsrs	r1, r1, #6
 8001c4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001c4e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
 8001c50:	018c      	lsls	r4, r1, #6
 8001c52:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8001c54:	b10a      	cbz	r2, 8001c5a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8001c56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001c58:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001c5e:	f7ff bd6f 	b.w	8001740 <_port_irq_epilogue>
 8001c62:	bf00      	nop
 8001c64:	40026000 	.word	0x40026000
 8001c68:	20000998 	.word	0x20000998
 8001c6c:	f3af 8000 	nop.w

08001c70 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8001c72:	4809      	ldr	r0, [pc, #36]	; (8001c98 <Vector84+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001c74:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8001c76:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001c78:	0c09      	lsrs	r1, r1, #16
 8001c7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001c7e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
 8001c80:	040c      	lsls	r4, r1, #16
 8001c82:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8001c84:	b10a      	cbz	r2, 8001c8a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8001c86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001c88:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001c8e:	f7ff bd57 	b.w	8001740 <_port_irq_epilogue>
 8001c92:	bf00      	nop
 8001c94:	40026000 	.word	0x40026000
 8001c98:	20000998 	.word	0x20000998
 8001c9c:	f3af 8000 	nop.w

08001ca0 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8001ca2:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001ca4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8001ca6:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001ca8:	0d89      	lsrs	r1, r1, #22
 8001caa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001cae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
 8001cb0:	058c      	lsls	r4, r1, #22
 8001cb2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8001cb4:	b10a      	cbz	r2, 8001cba <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8001cb6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001cb8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001cbe:	f7ff bd3f 	b.w	8001740 <_port_irq_epilogue>
 8001cc2:	bf00      	nop
 8001cc4:	40026000 	.word	0x40026000
 8001cc8:	20000998 	.word	0x20000998
 8001ccc:	f3af 8000 	nop.w

08001cd0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8001cd0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <Vector120+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001cd6:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8001cd8:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001cda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8001cde:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8001ce0:	b10a      	cbz	r2, 8001ce6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8001ce2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001ce4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001cea:	f7ff bd29 	b.w	8001740 <_port_irq_epilogue>
 8001cee:	bf00      	nop
 8001cf0:	40026400 	.word	0x40026400
 8001cf4:	20000998 	.word	0x20000998
 8001cf8:	f3af 8000 	nop.w
 8001cfc:	f3af 8000 	nop.w

08001d00 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <Vector124+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001d04:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8001d06:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001d08:	0989      	lsrs	r1, r1, #6
 8001d0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8001d0e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
 8001d10:	018c      	lsls	r4, r1, #6
 8001d12:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8001d14:	b10a      	cbz	r2, 8001d1a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8001d16:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001d18:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001d1e:	f7ff bd0f 	b.w	8001740 <_port_irq_epilogue>
 8001d22:	bf00      	nop
 8001d24:	40026400 	.word	0x40026400
 8001d28:	20000998 	.word	0x20000998
 8001d2c:	f3af 8000 	nop.w

08001d30 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8001d32:	4809      	ldr	r0, [pc, #36]	; (8001d58 <Vector128+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001d34:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8001d36:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001d38:	0c09      	lsrs	r1, r1, #16
 8001d3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8001d3e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
 8001d40:	040c      	lsls	r4, r1, #16
 8001d42:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8001d44:	b10a      	cbz	r2, 8001d4a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8001d46:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001d48:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001d4e:	f7ff bcf7 	b.w	8001740 <_port_irq_epilogue>
 8001d52:	bf00      	nop
 8001d54:	40026400 	.word	0x40026400
 8001d58:	20000998 	.word	0x20000998
 8001d5c:	f3af 8000 	nop.w

08001d60 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001d64:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8001d66:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001d68:	0d89      	lsrs	r1, r1, #22
 8001d6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8001d6e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
 8001d70:	058c      	lsls	r4, r1, #22
 8001d72:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8001d74:	b10a      	cbz	r2, 8001d7a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8001d76:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001d78:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001d7e:	f7ff bcdf 	b.w	8001740 <_port_irq_epilogue>
 8001d82:	bf00      	nop
 8001d84:	40026400 	.word	0x40026400
 8001d88:	20000998 	.word	0x20000998
 8001d8c:	f3af 8000 	nop.w

08001d90 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8001d90:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8001d94:	4807      	ldr	r0, [pc, #28]	; (8001db4 <Vector130+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001d96:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8001d98:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001d9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8001d9e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8001da0:	b10a      	cbz	r2, 8001da6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8001da2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001da4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001daa:	f7ff bcc9 	b.w	8001740 <_port_irq_epilogue>
 8001dae:	bf00      	nop
 8001db0:	40026400 	.word	0x40026400
 8001db4:	20000998 	.word	0x20000998
 8001db8:	f3af 8000 	nop.w
 8001dbc:	f3af 8000 	nop.w

08001dc0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8001dc2:	4809      	ldr	r0, [pc, #36]	; (8001de8 <Vector150+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001dc4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8001dc6:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001dc8:	0989      	lsrs	r1, r1, #6
 8001dca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8001dce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
 8001dd0:	018c      	lsls	r4, r1, #6
 8001dd2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8001dd4:	b10a      	cbz	r2, 8001dda <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8001dd6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001dd8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001dde:	f7ff bcaf 	b.w	8001740 <_port_irq_epilogue>
 8001de2:	bf00      	nop
 8001de4:	40026400 	.word	0x40026400
 8001de8:	20000998 	.word	0x20000998
 8001dec:	f3af 8000 	nop.w

08001df0 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <Vector154+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001df4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8001df6:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001df8:	0c09      	lsrs	r1, r1, #16
 8001dfa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8001dfe:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
 8001e00:	040c      	lsls	r4, r1, #16
 8001e02:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8001e04:	b10a      	cbz	r2, 8001e0a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8001e06:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8001e08:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001e0e:	f7ff bc97 	b.w	8001740 <_port_irq_epilogue>
 8001e12:	bf00      	nop
 8001e14:	40026400 	.word	0x40026400
 8001e18:	20000998 	.word	0x20000998
 8001e1c:	f3af 8000 	nop.w

08001e20 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8001e22:	4809      	ldr	r0, [pc, #36]	; (8001e48 <Vector158+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001e24:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8001e26:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001e28:	0d89      	lsrs	r1, r1, #22
 8001e2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8001e2e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
 8001e30:	058c      	lsls	r4, r1, #22
 8001e32:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8001e34:	b10a      	cbz	r2, 8001e3a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8001e36:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8001e38:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8001e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8001e3e:	f7ff bc7f 	b.w	8001740 <_port_irq_epilogue>
 8001e42:	bf00      	nop
 8001e44:	40026400 	.word	0x40026400
 8001e48:	20000998 	.word	0x20000998
 8001e4c:	f3af 8000 	nop.w

08001e50 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8001e50:	2200      	movs	r2, #0
 8001e52:	4611      	mov	r1, r2
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001e54:	4613      	mov	r3, r2
    _stm32_dma_streams[i].stream->CR = 0U;
 8001e56:	4610      	mov	r0, r2
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8001e58:	b470      	push	{r4, r5, r6}
  unsigned i;

  dma_streams_mask = 0U;
 8001e5a:	4e0b      	ldr	r6, [pc, #44]	; (8001e88 <dmaInit+0x38>)
 8001e5c:	4d0b      	ldr	r5, [pc, #44]	; (8001e8c <dmaInit+0x3c>)
 8001e5e:	4c0c      	ldr	r4, [pc, #48]	; (8001e90 <dmaInit+0x40>)
 8001e60:	6032      	str	r2, [r6, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 8001e62:	586a      	ldr	r2, [r5, r1]
 8001e64:	310c      	adds	r1, #12
 8001e66:	6010      	str	r0, [r2, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001e68:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d1f7      	bne.n	8001e62 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <dmaInit+0x44>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001e74:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <dmaInit+0x48>)
  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  DMA2->HIFCR = 0xFFFFFFFFU;
}
 8001e7c:	bc70      	pop	{r4, r5, r6}
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001e7e:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001e80:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000a18 	.word	0x20000a18
 8001e8c:	080057f0 	.word	0x080057f0
 8001e90:	20000998 	.word	0x20000998
 8001e94:	40026000 	.word	0x40026000
 8001e98:	40026400 	.word	0x40026400
 8001e9c:	f3af 8000 	nop.w

08001ea0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001ea2:	4f1f      	ldr	r7, [pc, #124]	; (8001f20 <dmaStreamAllocate+0x80>)
 8001ea4:	7a46      	ldrb	r6, [r0, #9]
 8001ea6:	2401      	movs	r4, #1
 8001ea8:	683d      	ldr	r5, [r7, #0]
 8001eaa:	fa04 fe06 	lsl.w	lr, r4, r6
 8001eae:	ea1e 0f05 	tst.w	lr, r5
 8001eb2:	d131      	bne.n	8001f18 <dmaStreamAllocate+0x78>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001eb4:	4c1b      	ldr	r4, [pc, #108]	; (8001f24 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001eb6:	ea4e 0505 	orr.w	r5, lr, r5

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001eba:	f015 0fff 	tst.w	r5, #255	; 0xff
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001ebe:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001ec2:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001ec4:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001ec8:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001ecc:	d004      	beq.n	8001ed8 <dmaStreamAllocate+0x38>
    rccEnableDMA1(false);
 8001ece:	4c16      	ldr	r4, [pc, #88]	; (8001f28 <dmaStreamAllocate+0x88>)
 8001ed0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ed2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed6:	6323      	str	r3, [r4, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8001ed8:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8001edc:	d116      	bne.n	8001f0c <dmaStreamAllocate+0x6c>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001ede:	6805      	ldr	r5, [r0, #0]
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	f023 031f 	bic.w	r3, r3, #31
 8001ee6:	602b      	str	r3, [r5, #0]
 8001ee8:	682b      	ldr	r3, [r5, #0]
 8001eea:	f013 0401 	ands.w	r4, r3, #1
 8001eee:	d1fb      	bne.n	8001ee8 <dmaStreamAllocate+0x48>
 8001ef0:	7a07      	ldrb	r7, [r0, #8]
 8001ef2:	6846      	ldr	r6, [r0, #4]
 8001ef4:	233d      	movs	r3, #61	; 0x3d
 8001ef6:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001ef8:	2721      	movs	r7, #33	; 0x21
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001efa:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001efc:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001efe:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8001f00:	b162      	cbz	r2, 8001f1c <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 8001f02:	7a80      	ldrb	r0, [r0, #10]
 8001f04:	f7ff fd64 	bl	80019d0 <nvicEnableVector>
  }

  return false;
 8001f08:	4620      	mov	r0, r4
 8001f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
    rccEnableDMA1(false);
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
 8001f0c:	4c06      	ldr	r4, [pc, #24]	; (8001f28 <dmaStreamAllocate+0x88>)
 8001f0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f14:	6323      	str	r3, [r4, #48]	; 0x30
 8001f16:	e7e2      	b.n	8001ede <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;
 8001f18:	4620      	mov	r0, r4
 8001f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  }

  return false;
 8001f1c:	4610      	mov	r0, r2
}
 8001f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f20:	20000a18 	.word	0x20000a18
 8001f24:	20000998 	.word	0x20000998
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	f3af 8000 	nop.w

08001f30 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 8001f30:	b508      	push	{r3, lr}
 8001f32:	2320      	movs	r3, #32
 8001f34:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 8001f38:	f7fe ff0a 	bl	8000d50 <chSysTimerHandlerI>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8001f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8001f46:	f7ff bbfb 	b.w	8001740 <_port_irq_epilogue>
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w

08001f50 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8001f50:	f640 30b7 	movw	r0, #2999	; 0xbb7
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <st_lld_init+0x18>)
  SysTick->VAL = 0;
 8001f56:	2100      	movs	r1, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8001f58:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8001f5a:	6058      	str	r0, [r3, #4]
  SysTick->VAL = 0;
 8001f5c:	6099      	str	r1, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8001f5e:	200b      	movs	r0, #11
 8001f60:	2108      	movs	r1, #8
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8001f64:	f7ff bd54 	b.w	8001a10 <nvicSetSystemHandlerPriority>
 8001f68:	e000e010 	.word	0xe000e010
 8001f6c:	f3af 8000 	nop.w

08001f70 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 8001f70:	b538      	push	{r3, r4, r5, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8001f72:	4c08      	ldr	r4, [pc, #32]	; (8001f94 <adc_lld_init+0x24>)
  ADCD1.adc = ADC1;
 8001f74:	4d08      	ldr	r5, [pc, #32]	; (8001f98 <adc_lld_init+0x28>)
 */
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff fc32 	bl	80017e0 <adcObjectInit>
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <adc_lld_init+0x2c>)

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <adc_lld_init+0x30>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8001f80:	62a5      	str	r5, [r4, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001f82:	62e2      	str	r2, [r4, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001f84:	6323      	str	r3, [r4, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 8001f86:	2012      	movs	r0, #18
 8001f88:	2106      	movs	r1, #6
}
 8001f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 8001f8e:	f7ff bd1f 	b.w	80019d0 <nvicEnableVector>
 8001f92:	bf00      	nop
 8001f94:	20000a1c 	.word	0x20000a1c
 8001f98:	40012000 	.word	0x40012000
 8001f9c:	00022c16 	.word	0x00022c16
 8001fa0:	08005880 	.word	0x08005880
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	f3af 8000 	nop.w
 8001fac:	f3af 8000 	nop.w

08001fb0 <adc_lld_start>:
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 8001fb0:	7803      	ldrb	r3, [r0, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d000      	beq.n	8001fb8 <adc_lld_start+0x8>
 8001fb6:	4770      	bx	lr
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <adc_lld_start+0x50>)
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {
 8001fba:	b510      	push	{r4, lr}

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 8001fbc:	4298      	cmp	r0, r3
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	d00d      	beq.n	8001fde <adc_lld_start+0x2e>
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001fc2:	4810      	ldr	r0, [pc, #64]	; (8002004 <adc_lld_start+0x54>)
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8001fc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001fc6:	6843      	ldr	r3, [r0, #4]
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8001fc8:	2100      	movs	r1, #0
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001fca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
    adcp->adc->CR2 = 0;
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001fd2:	2401      	movs	r4, #1
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001fd4:	6043      	str	r3, [r0, #4]
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
 8001fd6:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8001fd8:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001fda:	6094      	str	r4, [r2, #8]
 8001fdc:	bd10      	pop	{r4, pc}
  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8001fde:	2106      	movs	r1, #6
 8001fe0:	4a09      	ldr	r2, [pc, #36]	; (8002008 <adc_lld_start+0x58>)
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001fe6:	f7ff ff5b 	bl	8001ea0 <dmaStreamAllocate>
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <adc_lld_start+0x5c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
      rccEnableADC1(FALSE);
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <adc_lld_start+0x60>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001ff2:	6099      	str	r1, [r3, #8]
      rccEnableADC1(FALSE);
 8001ff4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffc:	e7e1      	b.n	8001fc2 <adc_lld_start+0x12>
 8001ffe:	bf00      	nop
 8002000:	20000a1c 	.word	0x20000a1c
 8002004:	40012300 	.word	0x40012300
 8002008:	080020c1 	.word	0x080020c1
 800200c:	4001204c 	.word	0x4001204c
 8002010:	40023800 	.word	0x40023800
 8002014:	f3af 8000 	nop.w
 8002018:	f3af 8000 	nop.w
 800201c:	f3af 8000 	nop.w

08002020 <adc_lld_stop_conversion>:
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8002020:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002022:	680a      	ldr	r2, [r1, #0]
 8002024:	6813      	ldr	r3, [r2, #0]
 8002026:	f023 031f 	bic.w	r3, r3, #31
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	6813      	ldr	r3, [r2, #0]
 800202e:	f013 0301 	ands.w	r3, r3, #1
 8002032:	d1fb      	bne.n	800202c <adc_lld_stop_conversion+0xc>
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8002034:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8002036:	7a0d      	ldrb	r5, [r1, #8]
 8002038:	684c      	ldr	r4, [r1, #4]
  adcp->adc->CR1 = 0;
 800203a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800203c:	213d      	movs	r1, #61	; 0x3d
 800203e:	40a9      	lsls	r1, r5
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8002040:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8002042:	6021      	str	r1, [r4, #0]
  adcp->adc->CR1 = 0;
 8002044:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
}
 8002046:	bc30      	pop	{r4, r5}
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
 8002048:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800204a:	6090      	str	r0, [r2, #8]
}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop

08002050 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8002050:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <Vector88+0x5c>)
  ADC1->SR = 0;
 8002054:	2100      	movs	r1, #0
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8002056:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8002058:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800205a:	0693      	lsls	r3, r2, #26
 800205c:	d522      	bpl.n	80020a4 <Vector88+0x54>
 800205e:	4c14      	ldr	r4, [pc, #80]	; (80020b0 <Vector88+0x60>)
 8002060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	b1eb      	cbz	r3, 80020a4 <Vector88+0x54>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 8002068:	6923      	ldr	r3, [r4, #16]
 800206a:	b1db      	cbz	r3, 80020a4 <Vector88+0x54>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ffd7 	bl	8002020 <adc_lld_stop_conversion>
 8002072:	6923      	ldr	r3, [r4, #16]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	b14b      	cbz	r3, 800208c <Vector88+0x3c>
 8002078:	2205      	movs	r2, #5
 800207a:	7022      	strb	r2, [r4, #0]
 800207c:	4620      	mov	r0, r4
 800207e:	2101      	movs	r1, #1
 8002080:	4798      	blx	r3
 8002082:	7823      	ldrb	r3, [r4, #0]
 8002084:	2b05      	cmp	r3, #5
 8002086:	bf04      	itt	eq
 8002088:	2302      	moveq	r3, #2
 800208a:	7023      	strbeq	r3, [r4, #0]
 800208c:	2500      	movs	r5, #0
 800208e:	6125      	str	r5, [r4, #16]
 8002090:	2320      	movs	r3, #32
 8002092:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <Vector88+0x64>)
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	f7ff f8b0 	bl	8001200 <chThdResumeI>
 80020a0:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
}
 80020a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 80020a8:	f7ff bb4a 	b.w	8001740 <_port_irq_epilogue>
 80020ac:	40012000 	.word	0x40012000
 80020b0:	20000a1c 	.word	0x20000a1c
 80020b4:	20000a30 	.word	0x20000a30
 80020b8:	f3af 8000 	nop.w
 80020bc:	f3af 8000 	nop.w

080020c0 <adc_lld_serve_rx_interrupt>:
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80020c0:	f011 0f0c 	tst.w	r1, #12
 * @brief   ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80020c8:	d119      	bne.n	80020fe <adc_lld_serve_rx_interrupt+0x3e>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
 80020ca:	6903      	ldr	r3, [r0, #16]
 80020cc:	b1b3      	cbz	r3, 80020fc <adc_lld_serve_rx_interrupt+0x3c>

      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 80020ce:	068d      	lsls	r5, r1, #26
 80020d0:	d512      	bpl.n	80020f8 <adc_lld_serve_rx_interrupt+0x38>
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	2a00      	cmp	r2, #0
 80020d6:	d03d      	beq.n	8002154 <adc_lld_serve_rx_interrupt+0x94>
 80020d8:	685d      	ldr	r5, [r3, #4]
 80020da:	b17d      	cbz	r5, 80020fc <adc_lld_serve_rx_interrupt+0x3c>
 80020dc:	68c2      	ldr	r2, [r0, #12]
 80020de:	2a01      	cmp	r2, #1
 80020e0:	d933      	bls.n	800214a <adc_lld_serve_rx_interrupt+0x8a>
 80020e2:	885b      	ldrh	r3, [r3, #2]
 80020e4:	0852      	lsrs	r2, r2, #1
 80020e6:	fb03 f302 	mul.w	r3, r3, r2
 80020ea:	6881      	ldr	r1, [r0, #8]
 80020ec:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80020f0:	462b      	mov	r3, r5
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 80020f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {

      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 80020f6:	4718      	bx	r3
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 80020f8:	06ca      	lsls	r2, r1, #27
 80020fa:	d41d      	bmi.n	8002138 <adc_lld_serve_rx_interrupt+0x78>
 80020fc:	bd70      	pop	{r4, r5, r6, pc}

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80020fe:	f7ff ff8f 	bl	8002020 <adc_lld_stop_conversion>
 8002102:	6923      	ldr	r3, [r4, #16]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	b14b      	cbz	r3, 800211c <adc_lld_serve_rx_interrupt+0x5c>
 8002108:	2205      	movs	r2, #5
 800210a:	7022      	strb	r2, [r4, #0]
 800210c:	4620      	mov	r0, r4
 800210e:	2100      	movs	r1, #0
 8002110:	4798      	blx	r3
 8002112:	7823      	ldrb	r3, [r4, #0]
 8002114:	2b05      	cmp	r3, #5
 8002116:	bf04      	itt	eq
 8002118:	2302      	moveq	r3, #2
 800211a:	7023      	strbeq	r3, [r4, #0]
 800211c:	2500      	movs	r5, #0
 800211e:	6125      	str	r5, [r4, #16]
 8002120:	2320      	movs	r3, #32
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f04f 31ff 	mov.w	r1, #4294967295
 800212a:	f104 0014 	add.w	r0, r4, #20
 800212e:	f7ff f867 	bl	8001200 <chThdResumeI>
 8002132:	f385 8811 	msr	BASEPRI, r5
 8002136:	bd70      	pop	{r4, r5, r6, pc}
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0de      	beq.n	80020fc <adc_lld_serve_rx_interrupt+0x3c>
      }
    }
  }
}
 800213e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8002142:	68c2      	ldr	r2, [r0, #12]
 8002144:	6881      	ldr	r1, [r0, #8]
 8002146:	0852      	lsrs	r2, r2, #1
 8002148:	4718      	bx	r3
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {

      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 800214a:	462b      	mov	r3, r5
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 800214c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {

      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8002150:	6881      	ldr	r1, [r0, #8]
 8002152:	4718      	bx	r3
 8002154:	f7ff ff64 	bl	8002020 <adc_lld_stop_conversion>
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	b1a3      	cbz	r3, 8002188 <adc_lld_serve_rx_interrupt+0xc8>
 800215e:	2204      	movs	r2, #4
 8002160:	7022      	strb	r2, [r4, #0]
 8002162:	4620      	mov	r0, r4
 8002164:	68a1      	ldr	r1, [r4, #8]
 8002166:	68e2      	ldr	r2, [r4, #12]
 8002168:	4798      	blx	r3
 800216a:	7823      	ldrb	r3, [r4, #0]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00b      	beq.n	8002188 <adc_lld_serve_rx_interrupt+0xc8>
 8002170:	2320      	movs	r3, #32
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	2100      	movs	r1, #0
 8002178:	f104 0014 	add.w	r0, r4, #20
 800217c:	f7ff f840 	bl	8001200 <chThdResumeI>
 8002180:	2300      	movs	r3, #0
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	2202      	movs	r2, #2
 800218a:	2300      	movs	r3, #0
 800218c:	7022      	strb	r2, [r4, #0]
 800218e:	6123      	str	r3, [r4, #16]
 8002190:	e7ee      	b.n	8002170 <adc_lld_serve_rx_interrupt+0xb0>
 8002192:	bf00      	nop
 8002194:	f3af 8000 	nop.w
 8002198:	f3af 8000 	nop.w
 800219c:	f3af 8000 	nop.w

080021a0 <_pal_lld_init>:
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80021a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80021a4:	4b64      	ldr	r3, [pc, #400]	; (8002338 <_pal_lld_init+0x198>)
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 80021a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80021aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021ac:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002354 <_pal_lld_init+0x1b4>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80021b0:	4311      	orrs	r1, r2
 80021b2:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80021b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021b6:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8002358 <_pal_lld_init+0x1b8>
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80021ba:	430a      	orrs	r2, r1
 80021bc:	651a      	str	r2, [r3, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021be:	6843      	ldr	r3, [r0, #4]
 80021c0:	4e5e      	ldr	r6, [pc, #376]	; (800233c <_pal_lld_init+0x19c>)
 80021c2:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80021c6:	6883      	ldr	r3, [r0, #8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021c8:	4d5d      	ldr	r5, [pc, #372]	; (8002340 <_pal_lld_init+0x1a0>)
  gpiop->OSPEEDR = config->ospeedr;
 80021ca:	f8c8 3008 	str.w	r3, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 80021ce:	68c3      	ldr	r3, [r0, #12]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021d0:	4c5c      	ldr	r4, [pc, #368]	; (8002344 <_pal_lld_init+0x1a4>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80021d2:	f8c8 300c 	str.w	r3, [r8, #12]
  gpiop->ODR     = config->odr;
 80021d6:	6903      	ldr	r3, [r0, #16]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021d8:	495b      	ldr	r1, [pc, #364]	; (8002348 <_pal_lld_init+0x1a8>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80021da:	f8c8 3014 	str.w	r3, [r8, #20]
  gpiop->AFRL    = config->afrl;
 80021de:	6947      	ldr	r7, [r0, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021e0:	4a5a      	ldr	r2, [pc, #360]	; (800234c <_pal_lld_init+0x1ac>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80021e2:	f8c8 7020 	str.w	r7, [r8, #32]
  gpiop->AFRH    = config->afrh;
 80021e6:	6983      	ldr	r3, [r0, #24]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021e8:	f8df c170 	ldr.w	ip, [pc, #368]	; 800235c <_pal_lld_init+0x1bc>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80021ec:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80021f0:	6803      	ldr	r3, [r0, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021f2:	4f57      	ldr	r7, [pc, #348]	; (8002350 <_pal_lld_init+0x1b0>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80021f4:	f8c8 3000 	str.w	r3, [r8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80021f8:	6a03      	ldr	r3, [r0, #32]
 80021fa:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80021fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002200:	f8ce 3008 	str.w	r3, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8002204:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002206:	f8ce 300c 	str.w	r3, [lr, #12]
  gpiop->ODR     = config->odr;
 800220a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800220c:	f8ce 3014 	str.w	r3, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8002210:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002212:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8002216:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002218:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800221c:	69c3      	ldr	r3, [r0, #28]
 800221e:	f8ce 3000 	str.w	r3, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002222:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002224:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002226:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002228:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 800222a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800222c:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 800222e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002230:	6173      	str	r3, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8002232:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002234:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8002236:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002238:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800223a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800223c:	6033      	str	r3, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800223e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8002240:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002242:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8002244:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002246:	6e06      	ldr	r6, [r0, #96]	; 0x60
 8002248:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 800224a:	6e46      	ldr	r6, [r0, #100]	; 0x64
 800224c:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800224e:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8002250:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8002252:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 8002254:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002256:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8002258:	602e      	str	r6, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800225a:	6f45      	ldr	r5, [r0, #116]	; 0x74
 800225c:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800225e:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8002260:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8002262:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8002264:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8002266:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 800226a:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800226c:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8002270:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8002272:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8002276:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002278:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800227a:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800227c:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
 8002280:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002282:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 8002286:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8002288:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 800228c:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800228e:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8002292:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8002294:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
 8002298:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800229a:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 800229e:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022a0:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 80022a4:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80022a6:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
 80022aa:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022ac:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80022b0:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80022b2:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 80022b6:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 80022b8:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 80022bc:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80022be:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 80022c2:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80022c4:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 80022c8:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022ca:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
 80022ce:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80022d0:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 80022d4:	f8cc 2004 	str.w	r2, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022d8:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 80022dc:	f8cc 2008 	str.w	r2, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 80022e0:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 80022e4:	f8cc 200c 	str.w	r2, [ip, #12]
  gpiop->ODR     = config->odr;
 80022e8:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 80022ec:	f8cc 2014 	str.w	r2, [ip, #20]
  gpiop->AFRL    = config->afrl;
 80022f0:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 80022f4:	f8cc 2020 	str.w	r2, [ip, #32]
  gpiop->AFRH    = config->afrh;
 80022f8:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 80022fc:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002300:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 8002304:	f8cc 2000 	str.w	r2, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8002308:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 800230c:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800230e:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8002312:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8002314:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8002318:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 800231a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 800231e:	617b      	str	r3, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8002320:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 8002324:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8002326:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800232c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40021400 	.word	0x40021400
 800234c:	40021800 	.word	0x40021800
 8002350:	40022000 	.word	0x40022000
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400
 800235c:	40021c00 	.word	0x40021c00

08002360 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8002364:	f3c2 1c41 	ubfx	ip, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002368:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800236c:	f3c2 0980 	ubfx	r9, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8002370:	f3c2 08c1 	ubfx	r8, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8002374:	2700      	movs	r7, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8002376:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800237a:	f04f 0b0f 	mov.w	fp, #15
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800237e:	f04f 0a01 	mov.w	sl, #1
 8002382:	e00f      	b.n	80023a4 <_pal_lld_setgroupmode+0x44>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002384:	6a04      	ldr	r4, [r0, #32]
 8002386:	ea24 0303 	bic.w	r3, r4, r3
 800238a:	431d      	orrs	r5, r3
 800238c:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800238e:	0849      	lsrs	r1, r1, #1
 8002390:	d03a      	beq.n	8002408 <_pal_lld_setgroupmode+0xa8>
      return;
    otyper <<= 1;
 8002392:	ea4f 0949 	mov.w	r9, r9, lsl #1
    ospeedr <<= 2;
 8002396:	ea4f 0888 	mov.w	r8, r8, lsl #2
    pupdr <<= 2;
 800239a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 800239e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 80023a2:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 80023a4:	07cb      	lsls	r3, r1, #31
 80023a6:	d5f2      	bpl.n	800238e <_pal_lld_setgroupmode+0x2e>
 80023a8:	007b      	lsls	r3, r7, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80023aa:	2403      	movs	r4, #3
 80023ac:	409c      	lsls	r4, r3
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80023ae:	43e4      	mvns	r4, r4

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80023b0:	6843      	ldr	r3, [r0, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 80023b2:	fa0a f507 	lsl.w	r5, sl, r7
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80023b6:	ea23 0305 	bic.w	r3, r3, r5
 80023ba:	ea43 0309 	orr.w	r3, r3, r9
 80023be:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80023c0:	6885      	ldr	r5, [r0, #8]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80023c2:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80023c6:	4025      	ands	r5, r4
 80023c8:	ea45 0508 	orr.w	r5, r5, r8
 80023cc:	6085      	str	r5, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80023ce:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80023d0:	009b      	lsls	r3, r3, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80023d2:	4025      	ands	r5, r4
 80023d4:	ea45 050c 	orr.w	r5, r5, ip
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 80023d8:	f1be 0f02 	cmp.w	lr, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80023dc:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80023de:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80023e2:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 80023e6:	d011      	beq.n	800240c <_pal_lld_setgroupmode+0xac>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80023e8:	6806      	ldr	r6, [r0, #0]
        if (bit < 8)
 80023ea:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80023ec:	ea04 0406 	and.w	r4, r4, r6
 80023f0:	ea44 040e 	orr.w	r4, r4, lr
 80023f4:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 80023f6:	d9c5      	bls.n	8002384 <_pal_lld_setgroupmode+0x24>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80023f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 80023fa:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80023fc:	ea24 0303 	bic.w	r3, r4, r3
 8002400:	ea45 0503 	orr.w	r5, r5, r3
 8002404:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8002406:	d1c4      	bne.n	8002392 <_pal_lld_setgroupmode+0x32>
 8002408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 800240c:	2f07      	cmp	r7, #7
 800240e:	d80a      	bhi.n	8002426 <_pal_lld_setgroupmode+0xc6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002410:	6a06      	ldr	r6, [r0, #32]
 8002412:	ea26 0303 	bic.w	r3, r6, r3
 8002416:	431d      	orrs	r5, r3
 8002418:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	401c      	ands	r4, r3
 800241e:	f044 0402 	orr.w	r4, r4, #2
 8002422:	6004      	str	r4, [r0, #0]
 8002424:	e7b3      	b.n	800238e <_pal_lld_setgroupmode+0x2e>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002428:	ea26 0303 	bic.w	r3, r6, r3
 800242c:	431d      	orrs	r5, r3
 800242e:	6245      	str	r5, [r0, #36]	; 0x24
 8002430:	e7f3      	b.n	800241a <_pal_lld_setgroupmode+0xba>
 8002432:	bf00      	nop
 8002434:	f3af 8000 	nop.w
 8002438:	f3af 8000 	nop.w
 800243c:	f3af 8000 	nop.w

08002440 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002440:	f011 0f0c 	tst.w	r1, #12
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8002444:	b538      	push	{r3, r4, r5, lr}
 8002446:	4605      	mov	r5, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8002448:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800244a:	d112      	bne.n	8002472 <i2c_lld_serve_tx_end_irq+0x32>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 800244c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800244e:	680a      	ldr	r2, [r1, #0]
 8002450:	6813      	ldr	r3, [r2, #0]
 8002452:	f023 031f 	bic.w	r3, r3, #31
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	07db      	lsls	r3, r3, #31
 800245c:	d4fc      	bmi.n	8002458 <i2c_lld_serve_tx_end_irq+0x18>
 800245e:	7a08      	ldrb	r0, [r1, #8]
 8002460:	684a      	ldr	r2, [r1, #4]
 8002462:	233d      	movs	r3, #61	; 0x3d
 8002464:	4083      	lsls	r3, r0
 8002466:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8002468:	6863      	ldr	r3, [r4, #4]
 800246a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246e:	6063      	str	r3, [r4, #4]
 8002470:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8002472:	4802      	ldr	r0, [pc, #8]	; (800247c <i2c_lld_serve_tx_end_irq+0x3c>)
 8002474:	f7fe fc64 	bl	8000d40 <chSysHalt>
 8002478:	e7e8      	b.n	800244c <i2c_lld_serve_tx_end_irq+0xc>
 800247a:	bf00      	nop
 800247c:	080058b0 	.word	0x080058b0

08002480 <i2c_lld_serve_rx_end_irq>:
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002480:	f011 0f0c 	tst.w	r1, #12
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	4606      	mov	r6, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8002488:	6b45      	ldr	r5, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800248a:	d125      	bne.n	80024d8 <i2c_lld_serve_rx_end_irq+0x58>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 800248c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	6819      	ldr	r1, [r3, #0]
 8002492:	f021 011f 	bic.w	r1, r1, #31
 8002496:	6019      	str	r1, [r3, #0]
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	f011 0401 	ands.w	r4, r1, #1
 800249e:	d1fb      	bne.n	8002498 <i2c_lld_serve_rx_end_irq+0x18>
 80024a0:	7a11      	ldrb	r1, [r2, #8]
 80024a2:	233d      	movs	r3, #61	; 0x3d
 80024a4:	6852      	ldr	r2, [r2, #4]
 80024a6:	408b      	lsls	r3, r1
 80024a8:	6013      	str	r3, [r2, #0]

  dp->CR2 &= ~I2C_CR2_LAST;
 80024aa:	686b      	ldr	r3, [r5, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024b2:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024ba:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c2:	602b      	str	r3, [r5, #0]
 80024c4:	f382 8811 	msr	BASEPRI, r2
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80024c8:	f106 001c 	add.w	r0, r6, #28
 80024cc:	4621      	mov	r1, r4
 80024ce:	f7fe fe97 	bl	8001200 <chThdResumeI>
 80024d2:	f384 8811 	msr	BASEPRI, r4
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 80024d8:	4801      	ldr	r0, [pc, #4]	; (80024e0 <i2c_lld_serve_rx_end_irq+0x60>)
 80024da:	f7fe fc31 	bl	8000d40 <chSysHalt>
 80024de:	e7d5      	b.n	800248c <i2c_lld_serve_rx_end_irq+0xc>
 80024e0:	080058b0 	.word	0x080058b0
 80024e4:	f3af 8000 	nop.w
 80024e8:	f3af 8000 	nop.w
 80024ec:	f3af 8000 	nop.w

080024f0 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80024f0:	483a      	ldr	r0, [pc, #232]	; (80025dc <VectorBC+0xec>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 80024f2:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80024f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80024f6:	4a3a      	ldr	r2, [pc, #232]	; (80025e0 <VectorBC+0xf0>)
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 80024f8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80024fa:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80024fc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002500:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002504:	4293      	cmp	r3, r2
 8002506:	d04c      	beq.n	80025a2 <VectorBC+0xb2>
 8002508:	d81e      	bhi.n	8002548 <VectorBC+0x58>
 800250a:	3a07      	subs	r2, #7
 800250c:	4293      	cmp	r3, r2
 800250e:	d03c      	beq.n	800258a <VectorBC+0x9a>
 8002510:	3201      	adds	r2, #1
 8002512:	4293      	cmp	r3, r2
 8002514:	d110      	bne.n	8002538 <VectorBC+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002516:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002518:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800251a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800251e:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002520:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800252a:	6862      	ldr	r2, [r4, #4]
 800252c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002530:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d94b      	bls.n	80025d0 <VectorBC+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002538:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800253c:	bf18      	it	ne
 800253e:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8002540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8002544:	f7ff b8fc 	b.w	8001740 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <VectorBC+0xf4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d012      	beq.n	8002574 <VectorBC+0x84>
 800254e:	3202      	adds	r2, #2
 8002550:	4293      	cmp	r3, r2
 8002552:	d1f1      	bne.n	8002538 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002554:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685e      	ldr	r6, [r3, #4]
 800255a:	b33e      	cbz	r6, 80025ac <VectorBC+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800255c:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800255e:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002560:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800256a:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 800256c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8002570:	f7ff b8e6 	b.w	8001740 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002574:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002576:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800257c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800257e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002580:	6813      	ldr	r3, [r2, #0]
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e7d6      	b.n	8002538 <VectorBC+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 800258a:	8c03      	ldrh	r3, [r0, #32]
 800258c:	0a1a      	lsrs	r2, r3, #8
 800258e:	d00b      	beq.n	80025a8 <VectorBC+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002598:	f002 0206 	and.w	r2, r2, #6
 800259c:	4313      	orrs	r3, r2
 800259e:	6123      	str	r3, [r4, #16]
 80025a0:	e7ca      	b.n	8002538 <VectorBC+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80025a2:	8c03      	ldrh	r3, [r0, #32]
 80025a4:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80025a8:	6123      	str	r3, [r4, #16]
 80025aa:	e7c5      	b.n	8002538 <VectorBC+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025b4:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	f382 8811 	msr	BASEPRI, r2
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80025c2:	301c      	adds	r0, #28
 80025c4:	4631      	mov	r1, r6
 80025c6:	f7fe fe1b 	bl	8001200 <chThdResumeI>
 80025ca:	f386 8811 	msr	BASEPRI, r6
 80025ce:	e7b3      	b.n	8002538 <VectorBC+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025d6:	6023      	str	r3, [r4, #0]
 80025d8:	e7ae      	b.n	8002538 <VectorBC+0x48>
 80025da:	bf00      	nop
 80025dc:	20000a50 	.word	0x20000a50
 80025e0:	00030008 	.word	0x00030008
 80025e4:	00070082 	.word	0x00070082
 80025e8:	f3af 8000 	nop.w
 80025ec:	f3af 8000 	nop.w

080025f0 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80025f0:	4834      	ldr	r0, [pc, #208]	; (80026c4 <VectorC0+0xd4>)
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 80025f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 80025f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80025f6:	6b07      	ldr	r7, [r0, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80025f8:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80025fa:	683a      	ldr	r2, [r7, #0]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80025fc:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80025fe:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 8002602:	43db      	mvns	r3, r3
 8002604:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f023 031f 	bic.w	r3, r3, #31
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	07db      	lsls	r3, r3, #31
 8002612:	d4fc      	bmi.n	800260e <VectorC0+0x1e>
 8002614:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 8002616:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8002618:	687f      	ldr	r7, [r7, #4]
 800261a:	233d      	movs	r3, #61	; 0x3d
 800261c:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800261e:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8002620:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f023 031f 	bic.w	r3, r3, #31
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	6813      	ldr	r3, [r2, #0]
 800262c:	f013 0301 	ands.w	r3, r3, #1
 8002630:	d1fb      	bne.n	800262a <VectorC0+0x3a>
 8002632:	7a2f      	ldrb	r7, [r5, #8]
 8002634:	223d      	movs	r2, #61	; 0x3d
 8002636:	686d      	ldr	r5, [r5, #4]
 8002638:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800263a:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800263c:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800263e:	bf43      	ittte	mi
 8002640:	2201      	movmi	r2, #1
 8002642:	4613      	movmi	r3, r2
 8002644:	6082      	strmi	r2, [r0, #8]

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;
 8002646:	6083      	strpl	r3, [r0, #8]

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8002648:	058d      	lsls	r5, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800264a:	bf44      	itt	mi
 800264c:	f043 0302 	orrmi.w	r3, r3, #2
 8002650:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8002652:	054a      	lsls	r2, r1, #21
 8002654:	d50a      	bpl.n	800266c <VectorC0+0x7c>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8002656:	6862      	ldr	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
    i2cp->errors |= I2C_ACK_FAILURE;
 8002658:	f043 0304 	orr.w	r3, r3, #4

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800265c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002660:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002668:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800266a:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800266c:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800266e:	bf44      	itt	mi
 8002670:	f043 0308 	orrmi.w	r3, r3, #8
 8002674:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8002676:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8002678:	bf44      	itt	mi
 800267a:	f043 0320 	orrmi.w	r3, r3, #32
 800267e:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8002680:	04cc      	lsls	r4, r1, #19
 8002682:	d513      	bpl.n	80026ac <VectorC0+0xbc>
    i2cp->errors |= I2C_PEC_ERROR;
 8002684:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002688:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 800268a:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800268c:	d416      	bmi.n	80026bc <VectorC0+0xcc>
 800268e:	2320      	movs	r3, #32
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	480c      	ldr	r0, [pc, #48]	; (80026c8 <VectorC0+0xd8>)
 8002696:	f06f 0101 	mvn.w	r1, #1
 800269a:	f7fe fdb1 	bl	8001200 <chThdResumeI>
 800269e:	2300      	movs	r3, #0
 80026a0:	f383 8811 	msr	BASEPRI, r3

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 80026a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80026a8:	f7ff b84a 	b.w	8001740 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80026ac:	0432      	lsls	r2, r6, #16
 80026ae:	d405      	bmi.n	80026bc <VectorC0+0xcc>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ec      	bne.n	800268e <VectorC0+0x9e>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 80026b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80026b8:	f7ff b842 	b.w	8001740 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 80026bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c0:	6083      	str	r3, [r0, #8]
 80026c2:	e7e4      	b.n	800268e <VectorC0+0x9e>
 80026c4:	20000a50 	.word	0x20000a50
 80026c8:	20000a6c 	.word	0x20000a6c
 80026cc:	f3af 8000 	nop.w

080026d0 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 80026d0:	b510      	push	{r4, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 80026d2:	4c07      	ldr	r4, [pc, #28]	; (80026f0 <i2c_lld_init+0x20>)
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7ff f8ab 	bl	8001830 <i2cObjectInit>
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <i2c_lld_init+0x24>)
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 80026dc:	4906      	ldr	r1, [pc, #24]	; (80026f8 <i2c_lld_init+0x28>)
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 80026de:	2000      	movs	r0, #0
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80026e0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 80026e4:	61e0      	str	r0, [r4, #28]
  I2CD1.i2c    = I2C1;
 80026e6:	6361      	str	r1, [r4, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80026e8:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80026ea:	6322      	str	r2, [r4, #48]	; 0x30
 80026ec:	bd10      	pop	{r4, pc}
 80026ee:	bf00      	nop
 80026f0:	20000a50 	.word	0x20000a50
 80026f4:	080057f0 	.word	0x080057f0
 80026f8:	40005400 	.word	0x40005400
 80026fc:	f3af 8000 	nop.w

08002700 <i2c_lld_start>:
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002700:	f240 4156 	movw	r1, #1110	; 0x456
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002704:	f240 4216 	movw	r2, #1046	; 0x416
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800270a:	7803      	ldrb	r3, [r0, #0]
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 800270c:	4604      	mov	r4, r0
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800270e:	2b01      	cmp	r3, #1
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002710:	6281      	str	r1, [r0, #40]	; 0x28
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002712:	6242      	str	r2, [r0, #36]	; 0x24
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002714:	6b45      	ldr	r5, [r0, #52]	; 0x34
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8002716:	d03e      	beq.n	8002796 <i2c_lld_start+0x96>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002718:	462b      	mov	r3, r5
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800271a:	f64f 76c0 	movw	r6, #65472	; 0xffc0
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800271e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002720:	6b22      	ldr	r2, [r4, #48]	; 0x30
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002722:	f8d1 c000 	ldr.w	ip, [r1]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002726:	f8d2 e000 	ldr.w	lr, [r2]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800272a:	f105 0110 	add.w	r1, r5, #16
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800272e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002732:	f44f 6010 	mov.w	r0, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
 8002736:	2200      	movs	r2, #0
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002738:	f8cc 1008 	str.w	r1, [ip, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800273c:	f8ce 1008 	str.w	r1, [lr, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8002740:	602f      	str	r7, [r5, #0]
  dp->CR1 = 0;
 8002742:	602a      	str	r2, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002744:	6068      	str	r0, [r5, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	6864      	ldr	r4, [r4, #4]
 800274a:	400e      	ands	r6, r1
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 800274c:	6860      	ldr	r0, [r4, #4]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 800274e:	7a27      	ldrb	r7, [r4, #8]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002750:	605e      	str	r6, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002752:	6859      	ldr	r1, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002754:	4e3f      	ldr	r6, [pc, #252]	; (8002854 <i2c_lld_start+0x154>)
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002756:	f041 0103 	orr.w	r1, r1, #3

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 800275a:	42b0      	cmp	r0, r6
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800275c:	6059      	str	r1, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 800275e:	dd4e      	ble.n	80027fe <i2c_lld_start+0xfe>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 8002760:	493d      	ldr	r1, [pc, #244]	; (8002858 <i2c_lld_start+0x158>)
 8002762:	4288      	cmp	r0, r1
 8002764:	dc07      	bgt.n	8002776 <i2c_lld_start+0x76>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 8002766:	2f02      	cmp	r7, #2
 8002768:	d068      	beq.n	800283c <i2c_lld_start+0x13c>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 800276a:	2f03      	cmp	r7, #3
 800276c:	d059      	beq.n	8002822 <i2c_lld_start+0x122>
 800276e:	f648 72ff 	movw	r2, #36863	; 0x8fff
    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8002772:	2101      	movs	r1, #1
 8002774:	6219      	str	r1, [r3, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8002776:	61da      	str	r2, [r3, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8002778:	7821      	ldrb	r1, [r4, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 800277a:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 800277c:	2902      	cmp	r1, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 800277e:	b292      	uxth	r2, r2
  switch (opmode) {
 8002780:	d049      	beq.n	8002816 <i2c_lld_start+0x116>
 8002782:	2903      	cmp	r1, #3
 8002784:	d044      	beq.n	8002810 <i2c_lld_start+0x110>
 8002786:	2901      	cmp	r1, #1
 8002788:	d035      	beq.n	80027f6 <i2c_lld_start+0xf6>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 800278a:	601a      	str	r2, [r3, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	602b      	str	r3, [r5, #0]
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <i2c_lld_start+0x15c>)
 8002798:	4298      	cmp	r0, r3
 800279a:	d1bd      	bne.n	8002718 <i2c_lld_start+0x18>
      bool b;

      rccResetI2C1();
 800279c:	4e30      	ldr	r6, [pc, #192]	; (8002860 <i2c_lld_start+0x160>)
 800279e:	2200      	movs	r2, #0
 80027a0:	6a33      	ldr	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80027a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80027a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a8:	6233      	str	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80027aa:	2105      	movs	r1, #5

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80027ac:	6232      	str	r2, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80027ae:	4623      	mov	r3, r4
 80027b0:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <i2c_lld_start+0x164>)
 80027b2:	f7ff fb75 	bl	8001ea0 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(i2cp->dmatx,
 80027b6:	4a2c      	ldr	r2, [pc, #176]	; (8002868 <i2c_lld_start+0x168>)
 80027b8:	2105      	movs	r1, #5
 80027ba:	4623      	mov	r3, r4
 80027bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80027be:	f7ff fb6f 	bl	8001ea0 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 80027c2:	6c33      	ldr	r3, [r6, #64]	; 0x40
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 80027c4:	201f      	movs	r0, #31
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 80027c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ca:	6433      	str	r3, [r6, #64]	; 0x40
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 80027cc:	2105      	movs	r1, #5
 80027ce:	f7ff f8ff 	bl	80019d0 <nvicEnableVector>
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 80027d2:	2020      	movs	r0, #32
 80027d4:	2105      	movs	r1, #5
 80027d6:	f7ff f8fb 	bl	80019d0 <nvicEnableVector>

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80027da:	6a62      	ldr	r2, [r4, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80027dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80027de:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80027e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80027ea:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80027ee:	62a3      	str	r3, [r4, #40]	; 0x28
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80027f0:	6262      	str	r2, [r4, #36]	; 0x24
 80027f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027f4:	e791      	b.n	800271a <i2c_lld_start+0x1a>
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80027f6:	f022 020a 	bic.w	r2, r2, #10
 80027fa:	b292      	uxth	r2, r2
 80027fc:	e7c5      	b.n	800278a <i2c_lld_start+0x8a>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80027fe:	491b      	ldr	r1, [pc, #108]	; (800286c <i2c_lld_start+0x16c>)
 8002800:	0042      	lsls	r2, r0, #1
 8002802:	fb91 f2f2 	sdiv	r2, r1, r2
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8002806:	2104      	movs	r1, #4
 8002808:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800280c:	6219      	str	r1, [r3, #32]
 800280e:	e7b2      	b.n	8002776 <i2c_lld_start+0x76>
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002810:	f042 020a 	orr.w	r2, r2, #10
 8002814:	e7b9      	b.n	800278a <i2c_lld_start+0x8a>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8002816:	f022 0208 	bic.w	r2, r2, #8
 800281a:	b292      	uxth	r2, r2
 800281c:	f042 0202 	orr.w	r2, r2, #2
 8002820:	e7b3      	b.n	800278a <i2c_lld_start+0x8a>
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8002822:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8002826:	4911      	ldr	r1, [pc, #68]	; (800286c <i2c_lld_start+0x16c>)
 8002828:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800282c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002830:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 8002834:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 8002838:	b292      	uxth	r2, r2
 800283a:	e79a      	b.n	8002772 <i2c_lld_start+0x72>

    if (duty == FAST_DUTY_CYCLE_2) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 800283c:	490b      	ldr	r1, [pc, #44]	; (800286c <i2c_lld_start+0x16c>)
 800283e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002842:	fb91 f2f2 	sdiv	r2, r1, r2
 8002846:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800284a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800284e:	b292      	uxth	r2, r2
 8002850:	e78f      	b.n	8002772 <i2c_lld_start+0x72>
 8002852:	bf00      	nop
 8002854:	000186a0 	.word	0x000186a0
 8002858:	00061a80 	.word	0x00061a80
 800285c:	20000a50 	.word	0x20000a50
 8002860:	40023800 	.word	0x40023800
 8002864:	08002481 	.word	0x08002481
 8002868:	08002441 	.word	0x08002441
 800286c:	00393870 	.word	0x00393870

08002870 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 8002870:	b538      	push	{r3, r4, r5, lr}

#if STM32_ICU_USE_TIM1
  /* Driver initialization.*/
  icuObjectInit(&ICUD1);
 8002872:	4d07      	ldr	r5, [pc, #28]	; (8002890 <icu_lld_init+0x20>)
  ICUD1.tim = STM32_TIM1;
#endif

#if STM32_ICU_USE_TIM2
  /* Driver initialization.*/
  icuObjectInit(&ICUD2);
 8002874:	4c07      	ldr	r4, [pc, #28]	; (8002894 <icu_lld_init+0x24>)
 */
void icu_lld_init(void) {

#if STM32_ICU_USE_TIM1
  /* Driver initialization.*/
  icuObjectInit(&ICUD1);
 8002876:	4628      	mov	r0, r5
 8002878:	f7fe fffa 	bl	8001870 <icuObjectInit>
  ICUD1.tim = STM32_TIM1;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <icu_lld_init+0x28>)
#endif

#if STM32_ICU_USE_TIM2
  /* Driver initialization.*/
  icuObjectInit(&ICUD2);
 800287e:	4620      	mov	r0, r4
void icu_lld_init(void) {

#if STM32_ICU_USE_TIM1
  /* Driver initialization.*/
  icuObjectInit(&ICUD1);
  ICUD1.tim = STM32_TIM1;
 8002880:	60eb      	str	r3, [r5, #12]
#endif

#if STM32_ICU_USE_TIM2
  /* Driver initialization.*/
  icuObjectInit(&ICUD2);
 8002882:	f7fe fff5 	bl	8001870 <icuObjectInit>
  ICUD2.tim = STM32_TIM2;
 8002886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800288a:	60e3      	str	r3, [r4, #12]
 800288c:	bd38      	pop	{r3, r4, r5, pc}
 800288e:	bf00      	nop
 8002890:	20000aa0 	.word	0x20000aa0
 8002894:	20000a88 	.word	0x20000a88
 8002898:	40010000 	.word	0x40010000
 800289c:	f3af 8000 	nop.w

080028a0 <icu_lld_serve_interrupt>:
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 80028a0:	68c3      	ldr	r3, [r0, #12]
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 80028a2:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 80028a4:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80028a6:	68dc      	ldr	r4, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 80028a8:	6841      	ldr	r1, [r0, #4]
 80028aa:	4014      	ands	r4, r2
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80028ac:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 80028ae:	43d2      	mvns	r2, r2
  if (icup->config->channel == ICU_CHANNEL_1) {
 80028b0:	7d0d      	ldrb	r5, [r1, #20]
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 80028b2:	4606      	mov	r6, r0
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
 80028b4:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80028b6:	b9e5      	cbnz	r5, 80028f2 <icu_lld_serve_interrupt+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80028b8:	0765      	lsls	r5, r4, #29
 80028ba:	d50a      	bpl.n	80028d2 <icu_lld_serve_interrupt+0x32>
      _icu_isr_invoke_width_cb(icup);
 80028bc:	7803      	ldrb	r3, [r0, #0]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d004      	beq.n	80028cc <icu_lld_serve_interrupt+0x2c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80028c2:	07a1      	lsls	r1, r4, #30
 80028c4:	d40a      	bmi.n	80028dc <icu_lld_serve_interrupt+0x3c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80028c6:	07e4      	lsls	r4, r4, #31
 80028c8:	d40c      	bmi.n	80028e4 <icu_lld_serve_interrupt+0x44>
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 80028cc:	688b      	ldr	r3, [r1, #8]
 80028ce:	b33b      	cbz	r3, 8002920 <icu_lld_serve_interrupt+0x80>
 80028d0:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80028d2:	07a2      	lsls	r2, r4, #30
 80028d4:	d5f7      	bpl.n	80028c6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 80028d6:	7833      	ldrb	r3, [r6, #0]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d01a      	beq.n	8002912 <icu_lld_serve_interrupt+0x72>
 80028dc:	2304      	movs	r3, #4
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80028de:	07e4      	lsls	r4, r4, #31
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 80028e0:	7033      	strb	r3, [r6, #0]
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80028e2:	d5f2      	bpl.n	80028ca <icu_lld_serve_interrupt+0x2a>
    _icu_isr_invoke_overflow_cb(icup);
 80028e4:	6873      	ldr	r3, [r6, #4]
 80028e6:	4630      	mov	r0, r6
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	4798      	blx	r3
 80028ec:	2303      	movs	r3, #3
 80028ee:	7033      	strb	r3, [r6, #0]
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80028f2:	07a3      	lsls	r3, r4, #30
 80028f4:	d508      	bpl.n	8002908 <icu_lld_serve_interrupt+0x68>
      _icu_isr_invoke_width_cb(icup);
 80028f6:	7803      	ldrb	r3, [r0, #0]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d002      	beq.n	8002902 <icu_lld_serve_interrupt+0x62>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80028fc:	0763      	lsls	r3, r4, #29
 80028fe:	d4ed      	bmi.n	80028dc <icu_lld_serve_interrupt+0x3c>
 8002900:	e7e1      	b.n	80028c6 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 8002902:	688b      	ldr	r3, [r1, #8]
 8002904:	b17b      	cbz	r3, 8002926 <icu_lld_serve_interrupt+0x86>
 8002906:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8002908:	0765      	lsls	r5, r4, #29
 800290a:	d5dc      	bpl.n	80028c6 <icu_lld_serve_interrupt+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 800290c:	7833      	ldrb	r3, [r6, #0]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d1e4      	bne.n	80028dc <icu_lld_serve_interrupt+0x3c>
 8002912:	6871      	ldr	r1, [r6, #4]
 8002914:	68cb      	ldr	r3, [r1, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0e0      	beq.n	80028dc <icu_lld_serve_interrupt+0x3c>
 800291a:	4630      	mov	r0, r6
 800291c:	4798      	blx	r3
 800291e:	e7dd      	b.n	80028dc <icu_lld_serve_interrupt+0x3c>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8002920:	07a0      	lsls	r0, r4, #30
 8002922:	d4f7      	bmi.n	8002914 <icu_lld_serve_interrupt+0x74>
 8002924:	e7cf      	b.n	80028c6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8002926:	0762      	lsls	r2, r4, #29
 8002928:	d4f4      	bmi.n	8002914 <icu_lld_serve_interrupt+0x74>
 800292a:	e7cc      	b.n	80028c6 <icu_lld_serve_interrupt+0x26>
 800292c:	f3af 8000 	nop.w

08002930 <VectorA4>:
/**
 * @brief   TIM1 compare interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8002930:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);
 8002932:	4803      	ldr	r0, [pc, #12]	; (8002940 <VectorA4+0x10>)
 8002934:	f7ff ffb4 	bl	80028a0 <icu_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);

  OSAL_IRQ_EPILOGUE();
 800293c:	f7fe bf00 	b.w	8001740 <_port_irq_epilogue>
 8002940:	20000aa0 	.word	0x20000aa0
 8002944:	f3af 8000 	nop.w
 8002948:	f3af 8000 	nop.w
 800294c:	f3af 8000 	nop.w

08002950 <VectorAC>:
/**
 * @brief   TIM1 compare interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8002950:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);
 8002952:	4803      	ldr	r0, [pc, #12]	; (8002960 <VectorAC+0x10>)
 8002954:	f7ff ffa4 	bl	80028a0 <icu_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);

  OSAL_IRQ_EPILOGUE();
 800295c:	f7fe bef0 	b.w	8001740 <_port_irq_epilogue>
 8002960:	20000aa0 	.word	0x20000aa0
 8002964:	f3af 8000 	nop.w
 8002968:	f3af 8000 	nop.w
 800296c:	f3af 8000 	nop.w

08002970 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8002970:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD2);
 8002972:	4803      	ldr	r0, [pc, #12]	; (8002980 <VectorB0+0x10>)
 8002974:	f7ff ff94 	bl	80028a0 <icu_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD2);

  OSAL_IRQ_EPILOGUE();
 800297c:	f7fe bee0 	b.w	8001740 <_port_irq_epilogue>
 8002980:	20000a88 	.word	0x20000a88
 8002984:	f3af 8000 	nop.w
 8002988:	f3af 8000 	nop.w
 800298c:	f3af 8000 	nop.w

08002990 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
 8002990:	b510      	push	{r4, lr}
  PWMD3.tim = STM32_TIM3;
#endif

#if STM32_PWM_USE_TIM4
  /* Driver initialization.*/
  pwmObjectInit(&PWMD4);
 8002992:	4c04      	ldr	r4, [pc, #16]	; (80029a4 <pwm_lld_init+0x14>)
 8002994:	4620      	mov	r0, r4
 8002996:	f7fe ff7b 	bl	8001890 <pwmObjectInit>
  PWMD4.channels = STM32_TIM4_CHANNELS;
  PWMD4.tim = STM32_TIM4;
 800299a:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <pwm_lld_init+0x18>)
#endif

#if STM32_PWM_USE_TIM4
  /* Driver initialization.*/
  pwmObjectInit(&PWMD4);
  PWMD4.channels = STM32_TIM4_CHANNELS;
 800299c:	2204      	movs	r2, #4
 800299e:	7422      	strb	r2, [r4, #16]
  PWMD4.tim = STM32_TIM4;
 80029a0:	61a3      	str	r3, [r4, #24]
 80029a2:	bd10      	pop	{r4, pc}
 80029a4:	20000ab8 	.word	0x20000ab8
 80029a8:	40000800 	.word	0x40000800
 80029ac:	f3af 8000 	nop.w

080029b0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80029b0:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80029b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80029b4:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80029b6:	68dc      	ldr	r4, [r3, #12]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80029b8:	4605      	mov	r5, r0
 80029ba:	4014      	ands	r4, r2
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80029bc:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80029be:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80029c0:	07a6      	lsls	r6, r4, #30
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 80029c2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80029c4:	d503      	bpl.n	80029ce <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 80029c6:	6843      	ldr	r3, [r0, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80029ca:	b103      	cbz	r3, 80029ce <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 80029cc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80029ce:	0760      	lsls	r0, r4, #29
 80029d0:	d504      	bpl.n	80029dc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 80029d2:	686b      	ldr	r3, [r5, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80029d6:	b10b      	cbz	r3, 80029dc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 80029d8:	4628      	mov	r0, r5
 80029da:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80029dc:	0721      	lsls	r1, r4, #28
 80029de:	d504      	bpl.n	80029ea <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 80029e0:	686b      	ldr	r3, [r5, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80029e4:	b10b      	cbz	r3, 80029ea <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 80029e6:	4628      	mov	r0, r5
 80029e8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80029ea:	06e2      	lsls	r2, r4, #27
 80029ec:	d504      	bpl.n	80029f8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 80029ee:	686b      	ldr	r3, [r5, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80029f2:	b10b      	cbz	r3, 80029f8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 80029f4:	4628      	mov	r0, r5
 80029f6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80029f8:	07e3      	lsls	r3, r4, #31
 80029fa:	d506      	bpl.n	8002a0a <pwm_lld_serve_interrupt+0x5a>
 80029fc:	686b      	ldr	r3, [r5, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	b11b      	cbz	r3, 8002a0a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8002a02:	4628      	mov	r0, r5
}
 8002a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 8002a08:	4718      	bx	r3
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	f3af 8000 	nop.w

08002a10 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8002a10:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD4);
 8002a12:	4803      	ldr	r0, [pc, #12]	; (8002a20 <VectorB8+0x10>)
 8002a14:	f7ff ffcc 	bl	80029b0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002a18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD4);

  OSAL_IRQ_EPILOGUE();
 8002a1c:	f7fe be90 	b.w	8001740 <_port_irq_epilogue>
 8002a20:	20000ab8 	.word	0x20000ab8
 8002a24:	f3af 8000 	nop.w
 8002a28:	f3af 8000 	nop.w
 8002a2c:	f3af 8000 	nop.w

08002a30 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8002a30:	4a02      	ldr	r2, [pc, #8]	; (8002a3c <notify1+0xc>)
 8002a32:	68d3      	ldr	r3, [r2, #12]
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	60d3      	str	r3, [r2, #12]
 8002a3a:	4770      	bx	lr
 8002a3c:	40011000 	.word	0x40011000

08002a40 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8002a40:	4a02      	ldr	r2, [pc, #8]	; (8002a4c <notify2+0xc>)
 8002a42:	68d3      	ldr	r3, [r2, #12]
 8002a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a48:	60d3      	str	r3, [r2, #12]
 8002a4a:	4770      	bx	lr
 8002a4c:	40004400 	.word	0x40004400

08002a50 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8002a50:	4a02      	ldr	r2, [pc, #8]	; (8002a5c <notify3+0xc>)
 8002a52:	68d3      	ldr	r3, [r2, #12]
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	60d3      	str	r3, [r2, #12]
 8002a5a:	4770      	bx	lr
 8002a5c:	40004800 	.word	0x40004800

08002a60 <notify4>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE;
 8002a60:	4a02      	ldr	r2, [pc, #8]	; (8002a6c <notify4+0xc>)
 8002a62:	68d3      	ldr	r3, [r2, #12]
 8002a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a68:	60d3      	str	r3, [r2, #12]
 8002a6a:	4770      	bx	lr
 8002a6c:	40004c00 	.word	0x40004c00

08002a70 <notify6>:

#if STM32_SERIAL_USE_USART6 || defined(__DOXYGEN__)
static void notify6(io_queue_t *qp) {

  (void)qp;
  USART6->CR1 |= USART_CR1_TXEIE;
 8002a70:	4a02      	ldr	r2, [pc, #8]	; (8002a7c <notify6+0xc>)
 8002a72:	68d3      	ldr	r3, [r2, #12]
 8002a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a78:	60d3      	str	r3, [r2, #12]
 8002a7a:	4770      	bx	lr
 8002a7c:	40011400 	.word	0x40011400

08002a80 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8002a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
 8002a84:	6f45      	ldr	r5, [r0, #116]	; 0x74
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8002a86:	4606      	mov	r6, r0
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
 8002a88:	f8d5 800c 	ldr.w	r8, [r5, #12]
  uint16_t sr = u->SR;
 8002a8c:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002a8e:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8002a90:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002a92:	d451      	bmi.n	8002b38 <serve_interrupt+0xb8>
 8002a94:	2320      	movs	r3, #32
 8002a96:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002a9a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002a9e:	d02b      	beq.n	8002af8 <serve_interrupt+0x78>
    sts |= SD_PARITY_ERROR;
  if (sr & USART_SR_FE)
    sts |= SD_FRAMING_ERROR;
  if (sr & USART_SR_NE)
    sts |= SD_NOISE_ERROR;
  chnAddFlagsI(sdp, sts);
 8002aa0:	1d37      	adds	r7, r6, #4
 8002aa2:	e007      	b.n	8002ab4 <serve_interrupt+0x34>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8002aa4:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002aa6:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002aa8:	d41d      	bmi.n	8002ae6 <serve_interrupt+0x66>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8002aaa:	682c      	ldr	r4, [r5, #0]
 8002aac:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002aae:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002ab2:	d021      	beq.n	8002af8 <serve_interrupt+0x78>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8002ab4:	0723      	lsls	r3, r4, #28
 8002ab6:	d0f5      	beq.n	8002aa4 <serve_interrupt+0x24>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8002ab8:	f014 0f08 	tst.w	r4, #8
 8002abc:	bf0c      	ite	eq
 8002abe:	2100      	moveq	r1, #0
 8002ac0:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8002ac2:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8002ac4:	bf48      	it	mi
 8002ac6:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8002aca:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8002acc:	bf48      	it	mi
 8002ace:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8002ad2:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8002ad4:	bf48      	it	mi
 8002ad6:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002ada:	4638      	mov	r0, r7
 8002adc:	f7fe fc38 	bl	8001350 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8002ae0:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8002ae2:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 8002ae4:	d5e1      	bpl.n	8002aaa <serve_interrupt+0x2a>
      sdIncomingDataI(sdp, b);
 8002ae6:	b2c9      	uxtb	r1, r1
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f7fe ff51 	bl	8001990 <sdIncomingDataI>
    sr = u->SR;
 8002aee:	682c      	ldr	r4, [r5, #0]
 8002af0:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002af2:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002af6:	d1dd      	bne.n	8002ab4 <serve_interrupt+0x34>
 8002af8:	2300      	movs	r3, #0
 8002afa:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002afe:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002b02:	d001      	beq.n	8002b08 <serve_interrupt+0x88>
 8002b04:	0622      	lsls	r2, r4, #24
 8002b06:	d426      	bmi.n	8002b56 <serve_interrupt+0xd6>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8002b08:	0663      	lsls	r3, r4, #25
 8002b0a:	d513      	bpl.n	8002b34 <serve_interrupt+0xb4>
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8002b12:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8002b14:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d02b      	beq.n	8002b72 <serve_interrupt+0xf2>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002b1a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 8002b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002b22:	ea08 0303 	and.w	r3, r8, r3
 8002b26:	60eb      	str	r3, [r5, #12]
 8002b28:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8002b2a:	602a      	str	r2, [r5, #0]
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b38:	2320      	movs	r3, #32
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b42:	3004      	adds	r0, #4
 8002b44:	f7fe fc04 	bl	8001350 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8002b48:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8002b4c:	602b      	str	r3, [r5, #0]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	e79e      	b.n	8002a94 <serve_interrupt+0x14>
 8002b56:	2320      	movs	r3, #32
 8002b58:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8002b5c:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8002b60:	f7fe fd36 	bl	80015d0 <chOQGetI>
    if (b < Q_OK) {
 8002b64:	2800      	cmp	r0, #0
 8002b66:	db0c      	blt.n	8002b82 <serve_interrupt+0x102>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8002b68:	6068      	str	r0, [r5, #4]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	e7ca      	b.n	8002b08 <serve_interrupt+0x88>
 8002b72:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0d0      	beq.n	8002b1a <serve_interrupt+0x9a>
 8002b78:	1d30      	adds	r0, r6, #4
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	f7fe fbe8 	bl	8001350 <chEvtBroadcastFlagsI>
 8002b80:	e7cb      	b.n	8002b1a <serve_interrupt+0x9a>
 8002b82:	1d30      	adds	r0, r6, #4
 8002b84:	2108      	movs	r1, #8
 8002b86:	f7fe fbe3 	bl	8001350 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8002b8a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8002b8e:	ea08 0303 	and.w	r3, r8, r3
 8002b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b96:	60eb      	str	r3, [r5, #12]
 8002b98:	e7e7      	b.n	8002b6a <serve_interrupt+0xea>
 8002b9a:	bf00      	nop
 8002b9c:	f3af 8000 	nop.w

08002ba0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002ba0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);
 8002ba2:	4803      	ldr	r0, [pc, #12]	; (8002bb0 <VectorD4+0x10>)
 8002ba4:	f7ff ff6c 	bl	8002a80 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 8002bac:	f7fe bdc8 	b.w	8001740 <_port_irq_epilogue>
 8002bb0:	20000ad4 	.word	0x20000ad4
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	f3af 8000 	nop.w
 8002bbc:	f3af 8000 	nop.w

08002bc0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8002bc0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <VectorD8+0x10>)
 8002bc4:	f7ff ff5c 	bl	8002a80 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8002bcc:	f7fe bdb8 	b.w	8001740 <_port_irq_epilogue>
 8002bd0:	20000b4c 	.word	0x20000b4c
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	f3af 8000 	nop.w
 8002bdc:	f3af 8000 	nop.w

08002be0 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8002be0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);
 8002be2:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <VectorDC+0x10>)
 8002be4:	f7ff ff4c 	bl	8002a80 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002be8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 8002bec:	f7fe bda8 	b.w	8001740 <_port_irq_epilogue>
 8002bf0:	20000bc4 	.word	0x20000bc4
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	f3af 8000 	nop.w
 8002bfc:	f3af 8000 	nop.w

08002c00 <Vector110>:
/**
 * @brief   UART4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8002c00:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <Vector110+0x10>)
 8002c04:	f7ff ff3c 	bl	8002a80 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD4);

  OSAL_IRQ_EPILOGUE();
 8002c0c:	f7fe bd98 	b.w	8001740 <_port_irq_epilogue>
 8002c10:	20000c3c 	.word	0x20000c3c
 8002c14:	f3af 8000 	nop.w
 8002c18:	f3af 8000 	nop.w
 8002c1c:	f3af 8000 	nop.w

08002c20 <Vector15C>:
/**
 * @brief   USART6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8002c20:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD6);
 8002c22:	4803      	ldr	r0, [pc, #12]	; (8002c30 <Vector15C+0x10>)
 8002c24:	f7ff ff2c 	bl	8002a80 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8002c28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD6);

  OSAL_IRQ_EPILOGUE();
 8002c2c:	f7fe bd88 	b.w	8001740 <_port_irq_epilogue>
 8002c30:	20000cb4 	.word	0x20000cb4
 8002c34:	f3af 8000 	nop.w
 8002c38:	f3af 8000 	nop.w
 8002c3c:	f3af 8000 	nop.w

08002c40 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8002c40:	b570      	push	{r4, r5, r6, lr}

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8002c42:	4d14      	ldr	r5, [pc, #80]	; (8002c94 <sd_lld_init+0x54>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002c44:	4c14      	ldr	r4, [pc, #80]	; (8002c98 <sd_lld_init+0x58>)
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8002c46:	4628      	mov	r0, r5
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <sd_lld_init+0x5c>)
 8002c4c:	f7fe fe70 	bl	8001930 <sdObjectInit>
  SD1.usart = USART1;
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <sd_lld_init+0x60>)
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002c52:	4620      	mov	r0, r4
 8002c54:	2100      	movs	r1, #0
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <sd_lld_init+0x64>)
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002c58:	4e13      	ldr	r6, [pc, #76]	; (8002ca8 <sd_lld_init+0x68>)
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8002c5a:	676b      	str	r3, [r5, #116]	; 0x74
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002c5c:	f7fe fe68 	bl	8001930 <sdObjectInit>
  SD2.usart = USART2;
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <sd_lld_init+0x6c>)
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002c62:	4630      	mov	r0, r6
 8002c64:	2100      	movs	r1, #0
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <sd_lld_init+0x70>)
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 8002c68:	4d12      	ldr	r5, [pc, #72]	; (8002cb4 <sd_lld_init+0x74>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8002c6a:	6763      	str	r3, [r4, #116]	; 0x74
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
 8002c6c:	f7fe fe60 	bl	8001930 <sdObjectInit>
  SD3.usart = USART3;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <sd_lld_init+0x78>)
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 8002c72:	4628      	mov	r0, r5
 8002c74:	2100      	movs	r1, #0
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <sd_lld_init+0x7c>)
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 8002c78:	4c11      	ldr	r4, [pc, #68]	; (8002cc0 <sd_lld_init+0x80>)
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
 8002c7a:	6773      	str	r3, [r6, #116]	; 0x74
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 8002c7c:	f7fe fe58 	bl	8001930 <sdObjectInit>
  SD4.usart = UART4;
 8002c80:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <sd_lld_init+0x84>)
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 8002c82:	4620      	mov	r0, r4
 8002c84:	2100      	movs	r1, #0
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <sd_lld_init+0x88>)
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
  SD4.usart = UART4;
 8002c88:	676b      	str	r3, [r5, #116]	; 0x74
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 8002c8a:	f7fe fe51 	bl	8001930 <sdObjectInit>
  SD6.usart = USART6;
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <sd_lld_init+0x8c>)
 8002c90:	6763      	str	r3, [r4, #116]	; 0x74
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	20000ad4 	.word	0x20000ad4
 8002c98:	20000b4c 	.word	0x20000b4c
 8002c9c:	08002a31 	.word	0x08002a31
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	08002a41 	.word	0x08002a41
 8002ca8:	20000bc4 	.word	0x20000bc4
 8002cac:	40004400 	.word	0x40004400
 8002cb0:	08002a51 	.word	0x08002a51
 8002cb4:	20000c3c 	.word	0x20000c3c
 8002cb8:	40004800 	.word	0x40004800
 8002cbc:	08002a61 	.word	0x08002a61
 8002cc0:	20000cb4 	.word	0x20000cb4
 8002cc4:	40004c00 	.word	0x40004c00
 8002cc8:	08002a71 	.word	0x08002a71
 8002ccc:	40011400 	.word	0x40011400

08002cd0 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8002cd0:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 8002cd2:	4c39      	ldr	r4, [pc, #228]	; (8002db8 <sd_lld_start+0xe8>)

  if (sdp->state == SD_STOP) {
 8002cd4:	7a03      	ldrb	r3, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8002cd6:	2900      	cmp	r1, #0
 8002cd8:	bf18      	it	ne
 8002cda:	460c      	movne	r4, r1

  if (sdp->state == SD_STOP) {
 8002cdc:	2b01      	cmp	r3, #1
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8002cde:	4605      	mov	r5, r0

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002ce0:	d022      	beq.n	8002d28 <sd_lld_start+0x58>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8002ce2:	6f6b      	ldr	r3, [r5, #116]	; 0x74

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8002ce4:	4a35      	ldr	r2, [pc, #212]	; (8002dbc <sd_lld_start+0xec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d037      	beq.n	8002d5a <sd_lld_start+0x8a>
 8002cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d033      	beq.n	8002d5a <sd_lld_start+0x8a>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 8002cf2:	6821      	ldr	r1, [r4, #0]
 8002cf4:	4a32      	ldr	r2, [pc, #200]	; (8002dc0 <sd_lld_start+0xf0>)
 8002cf6:	fbb2 f2f1 	udiv	r2, r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002cfc:	88a2      	ldrh	r2, [r4, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002cfe:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002d00:	8921      	ldrh	r1, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002d02:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002d06:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002d0a:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002d0e:	f041 0101 	orr.w	r1, r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002d12:	b292      	uxth	r2, r2
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002d14:	b280      	uxth	r0, r0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002d16:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8002d18:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002d1a:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002d1c:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002d1e:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8002d20:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002d22:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 8002d28:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <sd_lld_start+0xf4>)
 8002d2a:	4298      	cmp	r0, r3
 8002d2c:	d02f      	beq.n	8002d8e <sd_lld_start+0xbe>
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8002d2e:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <sd_lld_start+0xf8>)
 8002d30:	4298      	cmp	r0, r3
 8002d32:	d018      	beq.n	8002d66 <sd_lld_start+0x96>
      rccEnableUSART2(FALSE);
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <sd_lld_start+0xfc>)
 8002d36:	4298      	cmp	r0, r3
 8002d38:	d01f      	beq.n	8002d7a <sd_lld_start+0xaa>
      rccEnableUSART3(FALSE);
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_UART4
    if (&SD4 == sdp) {
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <sd_lld_start+0x100>)
 8002d3c:	4298      	cmp	r0, r3
 8002d3e:	d030      	beq.n	8002da2 <sd_lld_start+0xd2>
      rccEnableUART5(FALSE);
      nvicEnableVector(STM32_UART5_NUMBER, STM32_SERIAL_UART5_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART6
    if (&SD6 == sdp) {
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <sd_lld_start+0x104>)
 8002d42:	4298      	cmp	r0, r3
 8002d44:	d1cd      	bne.n	8002ce2 <sd_lld_start+0x12>
      rccEnableUSART6(FALSE);
 8002d46:	4a24      	ldr	r2, [pc, #144]	; (8002dd8 <sd_lld_start+0x108>)
      nvicEnableVector(STM32_USART6_NUMBER, STM32_SERIAL_USART6_PRIORITY);
 8002d48:	2047      	movs	r0, #71	; 0x47
      nvicEnableVector(STM32_UART5_NUMBER, STM32_SERIAL_UART5_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART6
    if (&SD6 == sdp) {
      rccEnableUSART6(FALSE);
 8002d4a:	6c53      	ldr	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART6_NUMBER, STM32_SERIAL_USART6_PRIORITY);
 8002d4c:	210c      	movs	r1, #12
      nvicEnableVector(STM32_UART5_NUMBER, STM32_SERIAL_UART5_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART6
    if (&SD6 == sdp) {
      rccEnableUSART6(FALSE);
 8002d4e:	f043 0320 	orr.w	r3, r3, #32
 8002d52:	6453      	str	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART6_NUMBER, STM32_SERIAL_USART6_PRIORITY);
 8002d54:	f7fe fe3c 	bl	80019d0 <nvicEnableVector>
 8002d58:	e7c3      	b.n	8002ce2 <sd_lld_start+0x12>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8002d5a:	6821      	ldr	r1, [r4, #0]
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <sd_lld_start+0x10c>)
 8002d5e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	e7ca      	b.n	8002cfc <sd_lld_start+0x2c>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8002d66:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <sd_lld_start+0x108>)
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8002d68:	2026      	movs	r0, #38	; 0x26
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8002d6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8002d6c:	210c      	movs	r1, #12
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8002d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8002d74:	f7fe fe2c 	bl	80019d0 <nvicEnableVector>
 8002d78:	e7b3      	b.n	8002ce2 <sd_lld_start+0x12>
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <sd_lld_start+0x108>)
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 8002d7c:	2027      	movs	r0, #39	; 0x27
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
 8002d7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 8002d80:	210c      	movs	r1, #12
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
 8002d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d86:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
 8002d88:	f7fe fe22 	bl	80019d0 <nvicEnableVector>
 8002d8c:	e7a9      	b.n	8002ce2 <sd_lld_start+0x12>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <sd_lld_start+0x108>)
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
 8002d90:	2025      	movs	r0, #37	; 0x25
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8002d92:	6c53      	ldr	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
 8002d94:	210c      	movs	r1, #12
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8002d96:	f043 0310 	orr.w	r3, r3, #16
 8002d9a:	6453      	str	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
 8002d9c:	f7fe fe18 	bl	80019d0 <nvicEnableVector>
 8002da0:	e79f      	b.n	8002ce2 <sd_lld_start+0x12>
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_UART4
    if (&SD4 == sdp) {
      rccEnableUART4(FALSE);
 8002da2:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <sd_lld_start+0x108>)
      nvicEnableVector(STM32_UART4_NUMBER, STM32_SERIAL_UART4_PRIORITY);
 8002da4:	2034      	movs	r0, #52	; 0x34
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_UART4
    if (&SD4 == sdp) {
      rccEnableUART4(FALSE);
 8002da6:	6c13      	ldr	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_UART4_NUMBER, STM32_SERIAL_UART4_PRIORITY);
 8002da8:	210c      	movs	r1, #12
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_UART4
    if (&SD4 == sdp) {
      rccEnableUART4(FALSE);
 8002daa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dae:	6413      	str	r3, [r2, #64]	; 0x40
      nvicEnableVector(STM32_UART4_NUMBER, STM32_SERIAL_UART4_PRIORITY);
 8002db0:	f7fe fe0e 	bl	80019d0 <nvicEnableVector>
 8002db4:	e795      	b.n	8002ce2 <sd_lld_start+0x12>
 8002db6:	bf00      	nop
 8002db8:	080058c0 	.word	0x080058c0
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	00393870 	.word	0x00393870
 8002dc4:	20000ad4 	.word	0x20000ad4
 8002dc8:	20000b4c 	.word	0x20000b4c
 8002dcc:	20000bc4 	.word	0x20000bc4
 8002dd0:	20000c3c 	.word	0x20000c3c
 8002dd4:	20000cb4 	.word	0x20000cb4
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	007270e0 	.word	0x007270e0

08002de0 <__early_init>:
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8002de0:	f7fe be56 	b.w	8001a90 <stm32_clock_init>
 8002de4:	f3af 8000 	nop.w
 8002de8:	f3af 8000 	nop.w
 8002dec:	f3af 8000 	nop.w

08002df0 <boardInit>:
/*
 * Board-specific initialization code.
 */


void boardInit(void) {
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	f3af 8000 	nop.w
 8002df8:	f3af 8000 	nop.w
 8002dfc:	f3af 8000 	nop.w

08002e00 <set_pins>:
#include "config.h"

void set_pins(void)
{
 8002e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // BUTTON pins
    palSetPadMode(GPIOE, 2, PAL_MODE_INPUT_PULLDOWN);
 8002e04:	4c84      	ldr	r4, [pc, #528]	; (8003018 <set_pins+0x218>)
 8002e06:	2104      	movs	r1, #4
 8002e08:	4620      	mov	r0, r4
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	f7ff faa8 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, 3, PAL_MODE_INPUT_PULLDOWN);
 8002e10:	4620      	mov	r0, r4
 8002e12:	2108      	movs	r1, #8
 8002e14:	2240      	movs	r2, #64	; 0x40
 8002e16:	f7ff faa3 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, 4, PAL_MODE_INPUT_PULLDOWN);
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	f7ff fa9e 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, 5, PAL_MODE_INPUT_PULLDOWN);
 8002e24:	4620      	mov	r0, r4
 8002e26:	2120      	movs	r1, #32
 8002e28:	2240      	movs	r2, #64	; 0x40
 8002e2a:	f7ff fa99 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, 6, PAL_MODE_INPUT_PULLDOWN);
 8002e2e:	2140      	movs	r1, #64	; 0x40
 8002e30:	4620      	mov	r0, r4
 8002e32:	460a      	mov	r2, r1
 8002e34:	f7ff fa94 	bl	8002360 <_pal_lld_setgroupmode>

    // LED pins
    palSetPadMode(GPIOE, 0, PAL_MODE_OUTPUT_PUSHPULL);
 8002e38:	2101      	movs	r1, #1
    palSetPadMode(GPIOE, 1, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
 8002e3a:	4f78      	ldr	r7, [pc, #480]	; (800301c <set_pins+0x21c>)
    palSetPadMode(GPIOE, 4, PAL_MODE_INPUT_PULLDOWN);
    palSetPadMode(GPIOE, 5, PAL_MODE_INPUT_PULLDOWN);
    palSetPadMode(GPIOE, 6, PAL_MODE_INPUT_PULLDOWN);

    // LED pins
    palSetPadMode(GPIOE, 0, PAL_MODE_OUTPUT_PUSHPULL);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	460a      	mov	r2, r1
 8002e40:	f7ff fa8e 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, 1, PAL_MODE_OUTPUT_PUSHPULL);
 8002e44:	4620      	mov	r0, r4
 8002e46:	2102      	movs	r1, #2
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f7ff fa89 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
 8002e4e:	4638      	mov	r0, r7
 8002e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e54:	2201      	movs	r2, #1
 8002e56:	f7ff fa83 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e60:	2201      	movs	r2, #1

    palClearPad(GPIOE, 0);
 8002e62:	4691      	mov	r9, r2
    palClearPad(GPIOE, 1);
    palClearPad(GPIOB, 8);
    palClearPad(GPIOB, 9);
 8002e64:	468a      	mov	sl, r1

    // LED pins
    palSetPadMode(GPIOE, 0, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOE, 1, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);
 8002e66:	f7ff fa7b 	bl	8002360 <_pal_lld_setgroupmode>

    palClearPad(GPIOE, 0);
    palClearPad(GPIOE, 1);
    palClearPad(GPIOB, 8);
 8002e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
    palClearPad(GPIOB, 9);

    // UART pins
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // USART_1
 8002e6e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8003028 <set_pins+0x228>
    palSetPadMode(GPIOE, 1, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);

    palClearPad(GPIOE, 0);
    palClearPad(GPIOE, 1);
 8002e72:	f04f 0b02 	mov.w	fp, #2

    // UART pins
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // USART_1
    palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7));

    palSetPadMode(GPIOD, 5, PAL_MODE_ALTERNATE(7)); // USART_2
 8002e76:	4e6a      	ldr	r6, [pc, #424]	; (8003020 <set_pins+0x220>)
    palSetPadMode(GPIOE, 0, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOE, 1, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);

    palClearPad(GPIOE, 0);
 8002e78:	f8a4 901a 	strh.w	r9, [r4, #26]
    palClearPad(GPIOE, 1);
    palClearPad(GPIOB, 8);
    palClearPad(GPIOB, 9);

    // UART pins
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // USART_1
 8002e7c:	4651      	mov	r1, sl
    palSetPadMode(GPIOE, 1, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);

    palClearPad(GPIOE, 0);
    palClearPad(GPIOE, 1);
 8002e7e:	f8a4 b01a 	strh.w	fp, [r4, #26]
    palClearPad(GPIOB, 8);
    palClearPad(GPIOB, 9);

    // UART pins
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // USART_1
 8002e82:	4640      	mov	r0, r8
    palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);

    palClearPad(GPIOE, 0);
    palClearPad(GPIOE, 1);
    palClearPad(GPIOB, 8);
 8002e84:	837b      	strh	r3, [r7, #26]
    palClearPad(GPIOB, 9);

    // UART pins
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // USART_1
 8002e86:	f240 3282 	movw	r2, #898	; 0x382
    palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);

    palClearPad(GPIOE, 0);
    palClearPad(GPIOE, 1);
    palClearPad(GPIOB, 8);
    palClearPad(GPIOB, 9);
 8002e8a:	f8a7 a01a 	strh.w	sl, [r7, #26]

    // UART pins
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // USART_1
 8002e8e:	f7ff fa67 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7));
 8002e92:	4640      	mov	r0, r8
 8002e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e98:	f240 3282 	movw	r2, #898	; 0x382
 8002e9c:	f7ff fa60 	bl	8002360 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOD, 5, PAL_MODE_ALTERNATE(7)); // USART_2
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	2120      	movs	r1, #32
 8002ea4:	f240 3282 	movw	r2, #898	; 0x382
 8002ea8:	f7ff fa5a 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOD, 6, PAL_MODE_ALTERNATE(7));
 8002eac:	4630      	mov	r0, r6
 8002eae:	2140      	movs	r1, #64	; 0x40
 8002eb0:	f240 3282 	movw	r2, #898	; 0x382

    palSetPadMode(GPIOD, 8, PAL_MODE_INPUT_PULLDOWN); //                        // PAL_MODE_ALTERNATE(7)); // USART_3
    palSetPadMode(GPIOD, 9, PAL_MODE_OUTPUT_PUSHPULL); // DRIBLER_CONTROLL      // PAL_MODE_ALTERNATE(7));

    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(8)); // UART_4
 8002eb4:	4d5b      	ldr	r5, [pc, #364]	; (8003024 <set_pins+0x224>)
    // UART pins
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // USART_1
    palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7));

    palSetPadMode(GPIOD, 5, PAL_MODE_ALTERNATE(7)); // USART_2
    palSetPadMode(GPIOD, 6, PAL_MODE_ALTERNATE(7));
 8002eb6:	f7ff fa53 	bl	8002360 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOD, 8, PAL_MODE_INPUT_PULLDOWN); //                        // PAL_MODE_ALTERNATE(7)); // USART_3
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec0:	2240      	movs	r2, #64	; 0x40
 8002ec2:	f7ff fa4d 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOD, 9, PAL_MODE_OUTPUT_PUSHPULL); // DRIBLER_CONTROLL      // PAL_MODE_ALTERNATE(7));
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	4651      	mov	r1, sl
 8002eca:	464a      	mov	r2, r9
 8002ecc:	f7ff fa48 	bl	8002360 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(8)); // UART_4
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ed6:	f240 4202 	movw	r2, #1026	; 0x402
 8002eda:	f7ff fa41 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(8));
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ee4:	f240 4202 	movw	r2, #1026	; 0x402
 8002ee8:	f7ff fa3a 	bl	8002360 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOC, 6, PAL_MODE_ALTERNATE(8)); // USART_6
 8002eec:	4628      	mov	r0, r5
 8002eee:	2140      	movs	r1, #64	; 0x40
 8002ef0:	f240 4202 	movw	r2, #1026	; 0x402
 8002ef4:	f7ff fa34 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 7, PAL_MODE_ALTERNATE(8));
 8002ef8:	4628      	mov	r0, r5
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	f240 4202 	movw	r2, #1026	; 0x402
 8002f00:	f7ff fa2e 	bl	8002360 <_pal_lld_setgroupmode>

	// KICKER pins
    palSetPadMode(GPIOC, 12, PAL_MODE_OUTPUT_PUSHPULL); // KICK
 8002f04:	4628      	mov	r0, r5
 8002f06:	464a      	mov	r2, r9
 8002f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f0c:	f7ff fa28 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOD, 2, PAL_MODE_INPUT_PULLDOWN); // READY
 8002f10:	4630      	mov	r0, r6
 8002f12:	2104      	movs	r1, #4
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	f7ff fa23 	bl	8002360 <_pal_lld_setgroupmode>

    // BALL_DETECTON pin
    palSetPadMode(GPIOD, 15, PAL_MODE_INPUT_PULLDOWN); //BALL_DETECTON
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f20:	2240      	movs	r2, #64	; 0x40
 8002f22:	f7ff fa1d 	bl	8002360 <_pal_lld_setgroupmode>

    // ADC pins
    palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);
 8002f26:	4640      	mov	r0, r8
 8002f28:	4649      	mov	r1, r9
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	f7ff fa18 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);
 8002f30:	4640      	mov	r0, r8
 8002f32:	4659      	mov	r1, fp
 8002f34:	2203      	movs	r2, #3
 8002f36:	f7ff fa13 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);
 8002f3a:	4640      	mov	r0, r8
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	2203      	movs	r2, #3
 8002f40:	f7ff fa0e 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);
 8002f44:	4640      	mov	r0, r8
 8002f46:	2108      	movs	r1, #8
 8002f48:	2203      	movs	r2, #3
 8002f4a:	f7ff fa09 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);
 8002f4e:	4638      	mov	r0, r7
 8002f50:	4649      	mov	r1, r9
 8002f52:	2203      	movs	r2, #3
 8002f54:	f7ff fa04 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);
 8002f58:	4638      	mov	r0, r7
 8002f5a:	4659      	mov	r1, fp
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	f7ff f9ff 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_PULLDOWN);
 8002f62:	4628      	mov	r0, r5
 8002f64:	4649      	mov	r1, r9
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	f7ff f9fa 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	4659      	mov	r1, fp
 8002f70:	2203      	movs	r2, #3
 8002f72:	f7ff f9f5 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 4, PAL_MODE_INPUT_ANALOG);
 8002f76:	4628      	mov	r0, r5
 8002f78:	2110      	movs	r1, #16
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	f7ff f9f0 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 5, PAL_MODE_INPUT_ANALOG);
 8002f80:	4628      	mov	r0, r5
 8002f82:	2120      	movs	r1, #32
 8002f84:	2203      	movs	r2, #3
 8002f86:	f7ff f9eb 	bl	8002360 <_pal_lld_setgroupmode>

    // PWM pins
    palSetPadMode(GPIOD, 12, PAL_MODE_OUTPUT_PUSHPULL);
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	464a      	mov	r2, r9
 8002f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f92:	f7ff f9e5 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOD, 13, PAL_MODE_ALTERNATE(2));
 8002f96:	4630      	mov	r0, r6
 8002f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f9c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002fa0:	f7ff f9de 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOD, 14, PAL_MODE_ALTERNATE(2));
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002faa:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002fae:	f7ff f9d7 	bl	8002360 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOE, 9, PAL_MODE_INPUT_PULLDOWN);
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	2240      	movs	r2, #64	; 0x40
 8002fb8:	f7ff f9d2 	bl	8002360 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOE, 11, PAL_MODE_ALTERNATE(1));
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fc2:	2282      	movs	r2, #130	; 0x82
 8002fc4:	f7ff f9cc 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, 13, PAL_MODE_ALTERNATE(1));
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fce:	2282      	movs	r2, #130	; 0x82
 8002fd0:	f7ff f9c6 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, 14, PAL_MODE_ALTERNATE(1));
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fda:	2282      	movs	r2, #130	; 0x82
 8002fdc:	f7ff f9c0 	bl	8002360 <_pal_lld_setgroupmode>

    // I2C
    palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(4)); // COMPASS
 8002fe0:	4638      	mov	r0, r7
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	f240 2202 	movw	r2, #514	; 0x202
 8002fe8:	f7ff f9ba 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(4));
 8002fec:	4638      	mov	r0, r7
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	f240 2202 	movw	r2, #514	; 0x202
 8002ff4:	f7ff f9b4 	bl	8002360 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(4)); // I2C3
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ffe:	f240 2202 	movw	r2, #514	; 0x202
 8003002:	f7ff f9ad 	bl	8002360 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, 9, PAL_MODE_ALTERNATE(4));
 8003006:	4628      	mov	r0, r5
 8003008:	4651      	mov	r1, sl
}
 800300a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // I2C
    palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(4)); // COMPASS
    palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(4));

    palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(4)); // I2C3
    palSetPadMode(GPIOC, 9, PAL_MODE_ALTERNATE(4));
 800300e:	f240 2202 	movw	r2, #514	; 0x202
 8003012:	f7ff b9a5 	b.w	8002360 <_pal_lld_setgroupmode>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	40020400 	.word	0x40020400
 8003020:	40020c00 	.word	0x40020c00
 8003024:	40020800 	.word	0x40020800
 8003028:	40020000 	.word	0x40020000
 800302c:	f3af 8000 	nop.w

08003030 <init_drivers>:
    OPMODE_I2C,
    10000,
    FAST_DUTY_CYCLE_16_9
};

void init_drivers(void) {
 8003030:	b510      	push	{r4, lr}
    sdInit();
 8003032:	f7fe fc75 	bl	8001920 <sdInit>

    sdStart(&SD1, &usart_1_cfg);
 8003036:	4813      	ldr	r0, [pc, #76]	; (8003084 <init_drivers+0x54>)
 8003038:	4913      	ldr	r1, [pc, #76]	; (8003088 <init_drivers+0x58>)
 800303a:	f7fe fc99 	bl	8001970 <sdStart>
    sdStart(&SD2, &usart_2_cfg);
 800303e:	4813      	ldr	r0, [pc, #76]	; (800308c <init_drivers+0x5c>)
 8003040:	4913      	ldr	r1, [pc, #76]	; (8003090 <init_drivers+0x60>)
 8003042:	f7fe fc95 	bl	8001970 <sdStart>
    sdStart(&SD3, &usart_3_cfg);
 8003046:	4813      	ldr	r0, [pc, #76]	; (8003094 <init_drivers+0x64>)
 8003048:	4913      	ldr	r1, [pc, #76]	; (8003098 <init_drivers+0x68>)
 800304a:	f7fe fc91 	bl	8001970 <sdStart>
    sdStart(&SD4, &usart_4_cfg);
    sdStart(&SD6, &usart_6_cfg);

    i2cInit();

    i2cObjectInit(&I2CD1);  // compass i2c (I2CD1)
 800304e:	4c13      	ldr	r4, [pc, #76]	; (800309c <init_drivers+0x6c>)
    sdInit();

    sdStart(&SD1, &usart_1_cfg);
    sdStart(&SD2, &usart_2_cfg);
    sdStart(&SD3, &usart_3_cfg);
    sdStart(&SD4, &usart_4_cfg);
 8003050:	4813      	ldr	r0, [pc, #76]	; (80030a0 <init_drivers+0x70>)
 8003052:	4914      	ldr	r1, [pc, #80]	; (80030a4 <init_drivers+0x74>)
 8003054:	f7fe fc8c 	bl	8001970 <sdStart>
    sdStart(&SD6, &usart_6_cfg);
 8003058:	4913      	ldr	r1, [pc, #76]	; (80030a8 <init_drivers+0x78>)
 800305a:	4814      	ldr	r0, [pc, #80]	; (80030ac <init_drivers+0x7c>)
 800305c:	f7fe fc88 	bl	8001970 <sdStart>

    i2cInit();
 8003060:	f7fe fbde 	bl	8001820 <i2cInit>

    i2cObjectInit(&I2CD1);  // compass i2c (I2CD1)
 8003064:	4620      	mov	r0, r4
 8003066:	f7fe fbe3 	bl	8001830 <i2cObjectInit>
    i2cStart(&I2CD1,&compass_i2c_cfg);
 800306a:	4620      	mov	r0, r4
 800306c:	4910      	ldr	r1, [pc, #64]	; (80030b0 <init_drivers+0x80>)
 800306e:	f7fe fbe7 	bl	8001840 <i2cStart>

    adcStart(&ADCD1, NULL);
 8003072:	4810      	ldr	r0, [pc, #64]	; (80030b4 <init_drivers+0x84>)
 8003074:	2100      	movs	r1, #0
 8003076:	f7fe fbc3 	bl	8001800 <adcStart>
    pwmInit();

}
 800307a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    i2cObjectInit(&I2CD1);  // compass i2c (I2CD1)
    i2cStart(&I2CD1,&compass_i2c_cfg);

    adcStart(&ADCD1, NULL);
    pwmInit();
 800307e:	f7fe bbff 	b.w	8001880 <pwmInit>
 8003082:	bf00      	nop
 8003084:	20000ad4 	.word	0x20000ad4
 8003088:	08005a00 	.word	0x08005a00
 800308c:	20000b4c 	.word	0x20000b4c
 8003090:	08005a10 	.word	0x08005a10
 8003094:	20000bc4 	.word	0x20000bc4
 8003098:	08005a20 	.word	0x08005a20
 800309c:	20000a50 	.word	0x20000a50
 80030a0:	20000c3c 	.word	0x20000c3c
 80030a4:	080059d0 	.word	0x080059d0
 80030a8:	080059f0 	.word	0x080059f0
 80030ac:	20000cb4 	.word	0x20000cb4
 80030b0:	080059e0 	.word	0x080059e0
 80030b4:	20000a1c 	.word	0x20000a1c
 80030b8:	f3af 8000 	nop.w
 80030bc:	f3af 8000 	nop.w

080030c0 <board_init>:

}

void board_init(void) {
 80030c0:	b508      	push	{r3, lr}
    set_pins();
 80030c2:	f7ff fe9d 	bl	8002e00 <set_pins>
    init_drivers();
}
 80030c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

}

void board_init(void) {
    set_pins();
    init_drivers();
 80030ca:	f7ff bfb1 	b.w	8003030 <init_drivers>
 80030ce:	bf00      	nop

080030d0 <motor_speed_to_char>:

uint8_t *motor_speed_to_char(uint8_t *buff, int16_t value) {
    int8_t i;

    for(i = 0; i < CHARS_IN_VALUE; i++) {
        buff[i] = '0';
 80030d0:	4603      	mov	r3, r0
 80030d2:	2230      	movs	r2, #48	; 0x30
    }

    // set number polarity
    if(value < 0) {
 80030d4:	2900      	cmp	r1, #0

int16_t writing_motors_speeds[MAX_MOTORS_QUANTITY - NOT_USED_MOTORS];

uint8_t message[COMMAND_CHAR_LENGTH + MAX_MOTORS_QUANTITY * CHARS_IN_VALUE];

uint8_t *motor_speed_to_char(uint8_t *buff, int16_t value) {
 80030d6:	b430      	push	{r4, r5}
    int8_t i;

    for(i = 0; i < CHARS_IN_VALUE; i++) {
        buff[i] = '0';
 80030d8:	f803 2b01 	strb.w	r2, [r3], #1
 80030dc:	7042      	strb	r2, [r0, #1]
 80030de:	7082      	strb	r2, [r0, #2]
 80030e0:	70c2      	strb	r2, [r0, #3]
    }

    // set number polarity
    if(value < 0) {
 80030e2:	db10      	blt.n	8003106 <motor_speed_to_char+0x36>
 80030e4:	1d05      	adds	r5, r0, #4
        value *= -1;
        buff[0] = '1';
    }

    for(i = 0; i < SPEED_VALUE_CHAR_LENGTH; i++) {
        if((value & 0xf) > 9) {
 80030e6:	f001 020f 	and.w	r2, r1, #15
 80030ea:	2a09      	cmp	r2, #9
            buff[i + 1] = (value & 0xf) + 'A' - 10;
 80030ec:	f102 0437 	add.w	r4, r2, #55	; 0x37
        } else {
            buff[i + 1] = (value & 0xf) + '0';
 80030f0:	bf96      	itet	ls
 80030f2:	3230      	addls	r2, #48	; 0x30
        buff[0] = '1';
    }

    for(i = 0; i < SPEED_VALUE_CHAR_LENGTH; i++) {
        if((value & 0xf) > 9) {
            buff[i + 1] = (value & 0xf) + 'A' - 10;
 80030f4:	701c      	strbhi	r4, [r3, #0]
        } else {
            buff[i + 1] = (value & 0xf) + '0';
 80030f6:	701a      	strbls	r2, [r3, #0]
 80030f8:	3301      	adds	r3, #1
    if(value < 0) {
        value *= -1;
        buff[0] = '1';
    }

    for(i = 0; i < SPEED_VALUE_CHAR_LENGTH; i++) {
 80030fa:	42ab      	cmp	r3, r5
        if((value & 0xf) > 9) {
            buff[i + 1] = (value & 0xf) + 'A' - 10;
        } else {
            buff[i + 1] = (value & 0xf) + '0';
        }
        value = value >> BITS_IN_CHAR;
 80030fc:	ea4f 1121 	mov.w	r1, r1, asr #4
    if(value < 0) {
        value *= -1;
        buff[0] = '1';
    }

    for(i = 0; i < SPEED_VALUE_CHAR_LENGTH; i++) {
 8003100:	d1f1      	bne.n	80030e6 <motor_speed_to_char+0x16>
        }
        value = value >> BITS_IN_CHAR;
    }

    return buff;
}
 8003102:	bc30      	pop	{r4, r5}
 8003104:	4770      	bx	lr
        buff[i] = '0';
    }

    // set number polarity
    if(value < 0) {
        value *= -1;
 8003106:	4249      	negs	r1, r1
        buff[0] = '1';
 8003108:	2231      	movs	r2, #49	; 0x31
        buff[i] = '0';
    }

    // set number polarity
    if(value < 0) {
        value *= -1;
 800310a:	b209      	sxth	r1, r1
        buff[0] = '1';
 800310c:	7002      	strb	r2, [r0, #0]
 800310e:	e7e9      	b.n	80030e4 <motor_speed_to_char+0x14>

08003110 <set_motors_speeds>:
    }

    return buff;
}

void set_motors_speeds(int16_t motor_speed_1, int16_t motor_speed_2, int16_t motor_speed_3, int16_t motor_speed_4, int16_t motor_speed_5) {
 8003110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	// movement motor command BB04 
	message[0] = 'B';
	message[1] = 'B';
	message[2] = '0';
	message[3] = '4';
 8003114:	4686      	mov	lr, r0
    }

    return buff;
}

void set_motors_speeds(int16_t motor_speed_1, int16_t motor_speed_2, int16_t motor_speed_3, int16_t motor_speed_4, int16_t motor_speed_5) {
 8003116:	b084      	sub	sp, #16
	uint8_t k, l, motor_index;

	// set not used movement motors do nothing (0)
	for(k = 0; k < NOT_USED_MOTORS; k++) {
		for (l = 0; l < CHARS_IN_VALUE; l++) {
			message[COMMAND_CHAR_LENGTH + CHARS_IN_VALUE * ((MAX_MOTORS_QUANTITY - 1) - k) + l] = 0;
 8003118:	4e1d      	ldr	r6, [pc, #116]	; (8003190 <set_motors_speeds+0x80>)
    }

    return buff;
}

void set_motors_speeds(int16_t motor_speed_1, int16_t motor_speed_2, int16_t motor_speed_3, int16_t motor_speed_4, int16_t motor_speed_5) {
 800311a:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
	int16_t motors[MAX_MOTORS_QUANTITY] = {motor_speed_1, motor_speed_2, motor_speed_3, motor_speed_4, motor_speed_5, 0};
 800311e:	2700      	movs	r7, #0
			message[COMMAND_CHAR_LENGTH + CHARS_IN_VALUE * ((MAX_MOTORS_QUANTITY - 1) - k) + l] = 0;
		}
	}

	// movement motor command BB04 
	message[0] = 'B';
 8003120:	f04f 0c42 	mov.w	ip, #66	; 0x42
	message[1] = 'B';
	message[2] = '0';
 8003124:	f04f 0a30 	mov.w	sl, #48	; 0x30
	message[3] = '4';
 8003128:	f04f 0934 	mov.w	r9, #52	; 0x34
 800312c:	4d19      	ldr	r5, [pc, #100]	; (8003194 <set_motors_speeds+0x84>)
 800312e:	463c      	mov	r4, r7

    return buff;
}

void set_motors_speeds(int16_t motor_speed_1, int16_t motor_speed_2, int16_t motor_speed_3, int16_t motor_speed_4, int16_t motor_speed_5) {
	int16_t motors[MAX_MOTORS_QUANTITY] = {motor_speed_1, motor_speed_2, motor_speed_3, motor_speed_4, motor_speed_5, 0};
 8003130:	f8ad 700e 	strh.w	r7, [sp, #14]
	uint8_t k, l, motor_index;

	// set not used movement motors do nothing (0)
	for(k = 0; k < NOT_USED_MOTORS; k++) {
		for (l = 0; l < CHARS_IN_VALUE; l++) {
			message[COMMAND_CHAR_LENGTH + CHARS_IN_VALUE * ((MAX_MOTORS_QUANTITY - 1) - k) + l] = 0;
 8003134:	7637      	strb	r7, [r6, #24]
 8003136:	7677      	strb	r7, [r6, #25]
 8003138:	76b7      	strb	r7, [r6, #26]
 800313a:	76f7      	strb	r7, [r6, #27]

    return buff;
}

void set_motors_speeds(int16_t motor_speed_1, int16_t motor_speed_2, int16_t motor_speed_3, int16_t motor_speed_4, int16_t motor_speed_5) {
	int16_t motors[MAX_MOTORS_QUANTITY] = {motor_speed_1, motor_speed_2, motor_speed_3, motor_speed_4, motor_speed_5, 0};
 800313c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8003140:	f8ad 1006 	strh.w	r1, [sp, #6]
 8003144:	f8ad 2008 	strh.w	r2, [sp, #8]
 8003148:	f8ad 300a 	strh.w	r3, [sp, #10]
	}

	// movement motor command BB04 
	message[0] = 'B';
	message[1] = 'B';
	message[2] = '0';
 800314c:	f886 a002 	strb.w	sl, [r6, #2]
	message[3] = '4';
 8003150:	f886 9003 	strb.w	r9, [r6, #3]
			message[COMMAND_CHAR_LENGTH + CHARS_IN_VALUE * ((MAX_MOTORS_QUANTITY - 1) - k) + l] = 0;
		}
	}

	// movement motor command BB04 
	message[0] = 'B';
 8003154:	f886 c000 	strb.w	ip, [r6]
	message[1] = 'B';
 8003158:	f886 c001 	strb.w	ip, [r6, #1]

    return buff;
}

void set_motors_speeds(int16_t motor_speed_1, int16_t motor_speed_2, int16_t motor_speed_3, int16_t motor_speed_4, int16_t motor_speed_5) {
	int16_t motors[MAX_MOTORS_QUANTITY] = {motor_speed_1, motor_speed_2, motor_speed_3, motor_speed_4, motor_speed_5, 0};
 800315c:	f8ad 800c 	strh.w	r8, [sp, #12]
 8003160:	af01      	add	r7, sp, #4
	message[2] = '0';
	message[3] = '4';

	motor_index = 0;
	for(k = COMMAND_CHAR_LENGTH; k < MESSAGE_CHAR_LENGTH; k += CHARS_IN_VALUE) {
		motor_speed_to_char(motor_speed_buff, motors[motor_index]);
 8003162:	fa0f f18e 	sxth.w	r1, lr
 8003166:	480c      	ldr	r0, [pc, #48]	; (8003198 <set_motors_speeds+0x88>)
 8003168:	f7ff ffb2 	bl	80030d0 <motor_speed_to_char>
 800316c:	1d20      	adds	r0, r4, #4
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <set_motors_speeds+0x88>)
 8003170:	1832      	adds	r2, r6, r0
		for(l = 0; l < CHARS_IN_VALUE; l++) {
			message[k + l] = motor_speed_buff[l];
 8003172:	f813 1b01 	ldrb.w	r1, [r3], #1
	message[3] = '4';

	motor_index = 0;
	for(k = COMMAND_CHAR_LENGTH; k < MESSAGE_CHAR_LENGTH; k += CHARS_IN_VALUE) {
		motor_speed_to_char(motor_speed_buff, motors[motor_index]);
		for(l = 0; l < CHARS_IN_VALUE; l++) {
 8003176:	42ab      	cmp	r3, r5
			message[k + l] = motor_speed_buff[l];
 8003178:	f802 1b01 	strb.w	r1, [r2], #1
	message[3] = '4';

	motor_index = 0;
	for(k = COMMAND_CHAR_LENGTH; k < MESSAGE_CHAR_LENGTH; k += CHARS_IN_VALUE) {
		motor_speed_to_char(motor_speed_buff, motors[motor_index]);
		for(l = 0; l < CHARS_IN_VALUE; l++) {
 800317c:	d1f9      	bne.n	8003172 <set_motors_speeds+0x62>
	message[1] = 'B';
	message[2] = '0';
	message[3] = '4';

	motor_index = 0;
	for(k = COMMAND_CHAR_LENGTH; k < MESSAGE_CHAR_LENGTH; k += CHARS_IN_VALUE) {
 800317e:	2818      	cmp	r0, #24
 8003180:	d003      	beq.n	800318a <set_motors_speeds+0x7a>
 8003182:	4604      	mov	r4, r0
 8003184:	f837 ef02 	ldrh.w	lr, [r7, #2]!
 8003188:	e7eb      	b.n	8003162 <set_motors_speeds+0x52>
		for(l = 0; l < CHARS_IN_VALUE; l++) {
			message[k + l] = motor_speed_buff[l];
		}   
		motor_index++;
	}
}
 800318a:	b004      	add	sp, #16
 800318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003190:	20000e88 	.word	0x20000e88
 8003194:	20000ea8 	.word	0x20000ea8
 8003198:	20000ea4 	.word	0x20000ea4
 800319c:	f3af 8000 	nop.w

080031a0 <MotorThread>:
    writing_motors_speeds[4] = ms5;
    chMsgSend(motor_thread, (msg_t)sender_thread_id);
}

THD_WORKING_AREA(waMotorThread, 128);
THD_FUNCTION(MotorThread, arg) {
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	4e17      	ldr	r6, [pc, #92]	; (8003200 <MotorThread+0x60>)
 80031a4:	4d17      	ldr	r5, [pc, #92]	; (8003204 <MotorThread+0x64>)
 80031a6:	b083      	sub	sp, #12

    thread_t *master_thread;
    int8_t i;

    while (1) {
        master_thread = chMsgWait();
 80031a8:	f7fe f90a 	bl	80013c0 <chMsgWait>
 80031ac:	4604      	mov	r4, r0
        chMsgGet(master_thread);
        
        set_motors_speeds(writing_motors_speeds[0], writing_motors_speeds[1], writing_motors_speeds[2], writing_motors_speeds[3], writing_motors_speeds[4]);
 80031ae:	f9b6 7008 	ldrsh.w	r7, [r6, #8]
 80031b2:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 80031b6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80031ba:	f9b6 0000 	ldrsh.w	r0, [r6]
 80031be:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 80031c2:	9700      	str	r7, [sp, #0]
 80031c4:	f7ff ffa4 	bl	8003110 <set_motors_speeds>
        
        chMsgRelease(master_thread, MSG_OK);
 80031c8:	4620      	mov	r0, r4
 80031ca:	2100      	movs	r1, #0
 80031cc:	f7fe f918 	bl	8001400 <chMsgRelease>
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <MotorThread+0x68>)
 80031d2:	210a      	movs	r1, #10
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	f7fe f9ca 	bl	8001570 <chOQPutTimeout>
 80031dc:	4c0b      	ldr	r4, [pc, #44]	; (800320c <MotorThread+0x6c>)
 80031de:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80031e2:	4809      	ldr	r0, [pc, #36]	; (8003208 <MotorThread+0x68>)
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	f7fe f9c2 	bl	8001570 <chOQPutTimeout>

        sdPut(MOTOR_SERIAL, '\n');
        for(i = 0; i < MESSAGE_CHAR_LENGTH; i++) {
 80031ec:	42ac      	cmp	r4, r5
 80031ee:	d1f6      	bne.n	80031de <MotorThread+0x3e>
 80031f0:	210a      	movs	r1, #10
 80031f2:	f04f 32ff 	mov.w	r2, #4294967295
 80031f6:	4804      	ldr	r0, [pc, #16]	; (8003208 <MotorThread+0x68>)
 80031f8:	f7fe f9ba 	bl	8001570 <chOQPutTimeout>
 80031fc:	e7d4      	b.n	80031a8 <MotorThread+0x8>
 80031fe:	bf00      	nop
 8003200:	20000e78 	.word	0x20000e78
 8003204:	20000ea3 	.word	0x20000ea3
 8003208:	20000b7c 	.word	0x20000b7c
 800320c:	20000e87 	.word	0x20000e87

08003210 <change_motors_speeds>:
		}   
		motor_index++;
	}
}

void change_motors_speeds(int16_t ms1, int16_t ms2, int16_t ms3, int16_t ms4, int16_t ms5, uint8_t sender_thread_id) {
 8003210:	b4f0      	push	{r4, r5, r6, r7}
    writing_motors_speeds[0] = ms1;
 8003212:	4c08      	ldr	r4, [pc, #32]	; (8003234 <change_motors_speeds+0x24>)
		}   
		motor_index++;
	}
}

void change_motors_speeds(int16_t ms1, int16_t ms2, int16_t ms3, int16_t ms4, int16_t ms5, uint8_t sender_thread_id) {
 8003214:	f89d 6014 	ldrb.w	r6, [sp, #20]
    writing_motors_speeds[0] = ms1;
    writing_motors_speeds[1] = ms2;
    writing_motors_speeds[2] = ms3;
    writing_motors_speeds[3] = ms4;
    writing_motors_speeds[4] = ms5;
    chMsgSend(motor_thread, (msg_t)sender_thread_id);
 8003218:	4f07      	ldr	r7, [pc, #28]	; (8003238 <change_motors_speeds+0x28>)
		}   
		motor_index++;
	}
}

void change_motors_speeds(int16_t ms1, int16_t ms2, int16_t ms3, int16_t ms4, int16_t ms5, uint8_t sender_thread_id) {
 800321a:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
    writing_motors_speeds[0] = ms1;
 800321e:	8020      	strh	r0, [r4, #0]
    writing_motors_speeds[1] = ms2;
 8003220:	8061      	strh	r1, [r4, #2]
    writing_motors_speeds[2] = ms3;
    writing_motors_speeds[3] = ms4;
    writing_motors_speeds[4] = ms5;
    chMsgSend(motor_thread, (msg_t)sender_thread_id);
 8003222:	6838      	ldr	r0, [r7, #0]
 8003224:	4631      	mov	r1, r6
}

void change_motors_speeds(int16_t ms1, int16_t ms2, int16_t ms3, int16_t ms4, int16_t ms5, uint8_t sender_thread_id) {
    writing_motors_speeds[0] = ms1;
    writing_motors_speeds[1] = ms2;
    writing_motors_speeds[2] = ms3;
 8003226:	80a2      	strh	r2, [r4, #4]
    writing_motors_speeds[3] = ms4;
 8003228:	80e3      	strh	r3, [r4, #6]
    writing_motors_speeds[4] = ms5;
 800322a:	8125      	strh	r5, [r4, #8]
    chMsgSend(motor_thread, (msg_t)sender_thread_id);
}
 800322c:	bcf0      	pop	{r4, r5, r6, r7}
    writing_motors_speeds[0] = ms1;
    writing_motors_speeds[1] = ms2;
    writing_motors_speeds[2] = ms3;
    writing_motors_speeds[3] = ms4;
    writing_motors_speeds[4] = ms5;
    chMsgSend(motor_thread, (msg_t)sender_thread_id);
 800322e:	f7fe b8a7 	b.w	8001380 <chMsgSend>
 8003232:	bf00      	nop
 8003234:	20000e78 	.word	0x20000e78
 8003238:	20000e84 	.word	0x20000e84
 800323c:	f3af 8000 	nop.w

08003240 <motors_init>:
        }
        sdPut(MOTOR_SERIAL, '\n');
    }
}

void motors_init(void) {
 8003240:	b530      	push	{r4, r5, lr}
	uint8_t init_message[INIT_MESSAGE_LENGTH] = {'\n', 0x80, 0xC5, '\n', 'A', 'A', '0', '1', '1', '1', '1', '1', '1', '\n'};
 8003242:	4c11      	ldr	r4, [pc, #68]	; (8003288 <motors_init+0x48>)
        }
        sdPut(MOTOR_SERIAL, '\n');
    }
}

void motors_init(void) {
 8003244:	b087      	sub	sp, #28
	uint8_t init_message[INIT_MESSAGE_LENGTH] = {'\n', 0x80, 0xC5, '\n', 'A', 'A', '0', '1', '1', '1', '1', '1', '1', '\n'};
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	6861      	ldr	r1, [r4, #4]
 800324a:	68a2      	ldr	r2, [r4, #8]
 800324c:	ab02      	add	r3, sp, #8
 800324e:	c307      	stmia	r3!, {r0, r1, r2}
 8003250:	89a5      	ldrh	r5, [r4, #12]
 8003252:	f10d 0407 	add.w	r4, sp, #7
 8003256:	801d      	strh	r5, [r3, #0]
 8003258:	f10d 0515 	add.w	r5, sp, #21
 800325c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003260:	480a      	ldr	r0, [pc, #40]	; (800328c <motors_init+0x4c>)
 8003262:	f04f 32ff 	mov.w	r2, #4294967295
 8003266:	f7fe f983 	bl	8001570 <chOQPutTimeout>
    int8_t i;
    
    for(i = 0; i < INIT_MESSAGE_LENGTH; i++) {
 800326a:	42ac      	cmp	r4, r5
 800326c:	d1f6      	bne.n	800325c <motors_init+0x1c>
        sdPut(MOTOR_SERIAL, init_message[i]);
    }

    motor_thread = chThdCreateStatic(waMotorThread, sizeof(waMotorThread), NORMALPRIO, MotorThread, NULL);
 800326e:	2300      	movs	r3, #0
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003276:	2240      	movs	r2, #64	; 0x40
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <motors_init+0x50>)
 800327a:	4806      	ldr	r0, [pc, #24]	; (8003294 <motors_init+0x54>)
 800327c:	f7fd ff40 	bl	8001100 <chThdCreateStatic>
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <motors_init+0x58>)
 8003282:	6018      	str	r0, [r3, #0]
}
 8003284:	b007      	add	sp, #28
 8003286:	bd30      	pop	{r4, r5, pc}
 8003288:	08005710 	.word	0x08005710
 800328c:	20000b7c 	.word	0x20000b7c
 8003290:	080031a1 	.word	0x080031a1
 8003294:	20000d30 	.word	0x20000d30
 8003298:	20000e84 	.word	0x20000e84
 800329c:	f3af 8000 	nop.w

080032a0 <CompassReadThread>:
int16_t attack_degree = 0;

int16_t actual_angle = -1, final_degree = -1;

THD_WORKING_AREA(waCompassReadThread, 128);
THD_FUNCTION(CompassReadThread, arg) {
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4d13      	ldr	r5, [pc, #76]	; (80032f0 <CompassReadThread+0x50>)
 80032a4:	4e13      	ldr	r6, [pc, #76]	; (80032f4 <CompassReadThread+0x54>)
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 80032a6:	4814      	ldr	r0, [pc, #80]	; (80032f8 <CompassReadThread+0x58>)
 80032a8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ac:	f7fe f8e8 	bl	8001480 <chIQGetTimeout>
    int16_t dir;
    uint8_t received_char;

    while (1) {
        dir = 0;
        received_char = sdGet(COMPASS_SERIAL);
 80032b0:	b2c0      	uxtb	r0, r0
        while(received_char != '\n') {
 80032b2:	280a      	cmp	r0, #10
 80032b4:	d01a      	beq.n	80032ec <CompassReadThread+0x4c>
 80032b6:	2400      	movs	r4, #0
            dir += received_char - '0';
 80032b8:	4420      	add	r0, r4
 80032ba:	3830      	subs	r0, #48	; 0x30
            dir *= 10;
 80032bc:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80032c0:	f04f 31ff 	mov.w	r1, #4294967295
 80032c4:	480c      	ldr	r0, [pc, #48]	; (80032f8 <CompassReadThread+0x58>)
 80032c6:	f7fe f8db 	bl	8001480 <chIQGetTimeout>
 80032ca:	0064      	lsls	r4, r4, #1
            received_char = sdGet(COMPASS_SERIAL);
 80032cc:	b2c0      	uxtb	r0, r0
    while (1) {
        dir = 0;
        received_char = sdGet(COMPASS_SERIAL);
        while(received_char != '\n') {
            dir += received_char - '0';
            dir *= 10;
 80032ce:	b2a4      	uxth	r4, r4
    uint8_t received_char;

    while (1) {
        dir = 0;
        received_char = sdGet(COMPASS_SERIAL);
        while(received_char != '\n') {
 80032d0:	280a      	cmp	r0, #10
            dir += received_char - '0';
            dir *= 10;
 80032d2:	b2a4      	uxth	r4, r4
    uint8_t received_char;

    while (1) {
        dir = 0;
        received_char = sdGet(COMPASS_SERIAL);
        while(received_char != '\n') {
 80032d4:	d1f0      	bne.n	80032b8 <CompassReadThread+0x18>
 80032d6:	b224      	sxth	r4, r4
 80032d8:	fb86 3104 	smull	r3, r1, r6, r4
 80032dc:	17e4      	asrs	r4, r4, #31
 80032de:	ebc4 01a1 	rsb	r1, r4, r1, asr #2
 80032e2:	b209      	sxth	r1, r1
            dir *= 10;
            received_char = sdGet(COMPASS_SERIAL);
        }
        dir /= 10;

        chMsgSend(compass_process_thread, (msg_t)dir);
 80032e4:	6828      	ldr	r0, [r5, #0]
 80032e6:	f7fe f84b 	bl	8001380 <chMsgSend>
    }
 80032ea:	e7dc      	b.n	80032a6 <CompassReadThread+0x6>
    uint8_t received_char;

    while (1) {
        dir = 0;
        received_char = sdGet(COMPASS_SERIAL);
        while(received_char != '\n') {
 80032ec:	2100      	movs	r1, #0
 80032ee:	e7f9      	b.n	80032e4 <CompassReadThread+0x44>
 80032f0:	20000ea8 	.word	0x20000ea8
 80032f4:	66666667 	.word	0x66666667
 80032f8:	20000ae0 	.word	0x20000ae0
 80032fc:	f3af 8000 	nop.w

08003300 <CompassProcessThread>:
        chMsgSend(compass_process_thread, (msg_t)dir);
    }
}

THD_WORKING_AREA(waCompassProcessThread, 128);
THD_FUNCTION(CompassProcessThread, arg) {
 8003300:	b510      	push	{r4, lr}
 8003302:	4c07      	ldr	r4, [pc, #28]	; (8003320 <CompassProcessThread+0x20>)

    thread_t *master;
    msg_t msg;

    while(1) {
        master = chMsgWait();
 8003304:	f7fe f85c 	bl	80013c0 <chMsgWait>
 8003308:	6b01      	ldr	r1, [r0, #48]	; 0x30
        msg = chMsgGet(master);
        if(msg < 360) {
 800330a:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 800330e:	bfae      	itee	ge
 8003310:	8821      	ldrhge	r1, [r4, #0]
            actual_angle = (int16_t)msg;
 8003312:	b289      	uxthlt	r1, r1
 8003314:	8021      	strhlt	r1, [r4, #0]
        }
        chMsgRelease(master, (msg_t)actual_angle);
 8003316:	b209      	sxth	r1, r1
 8003318:	f7fe f872 	bl	8001400 <chMsgRelease>

    }
 800331c:	e7f2      	b.n	8003304 <CompassProcessThread+0x4>
 800331e:	bf00      	nop
 8003320:	20000800 	.word	0x20000800
 8003324:	f3af 8000 	nop.w
 8003328:	f3af 8000 	nop.w
 800332c:	f3af 8000 	nop.w

08003330 <compass_init>:
    azimuth = ((get_compass_degree() - attack_degree) + 360) % 360;
    if (azimuth > 180) azimuth -= 360;
    return azimuth;
}

void compass_init(void) {
 8003330:	b510      	push	{r4, lr}
    compass_read_thread = chThdCreateStatic(waCompassReadThread, sizeof(waCompassReadThread), NORMALPRIO, CompassReadThread, NULL);
 8003332:	2400      	movs	r4, #0
    azimuth = ((get_compass_degree() - attack_degree) + 360) % 360;
    if (azimuth > 180) azimuth -= 360;
    return azimuth;
}

void compass_init(void) {
 8003334:	b082      	sub	sp, #8
    compass_read_thread = chThdCreateStatic(waCompassReadThread, sizeof(waCompassReadThread), NORMALPRIO, CompassReadThread, NULL);
 8003336:	9400      	str	r4, [sp, #0]
 8003338:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800333c:	2240      	movs	r2, #64	; 0x40
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <compass_init+0x48>)
 8003340:	480e      	ldr	r0, [pc, #56]	; (800337c <compass_init+0x4c>)
 8003342:	f7fd fedd 	bl	8001100 <chThdCreateStatic>
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <compass_init+0x50>)
    compass_process_thread = chThdCreateStatic(waCompassProcessThread, sizeof(waCompassProcessThread), NORMALPRIO, CompassProcessThread, NULL);
 8003348:	9400      	str	r4, [sp, #0]
 800334a:	2240      	movs	r2, #64	; 0x40
    if (azimuth > 180) azimuth -= 360;
    return azimuth;
}

void compass_init(void) {
    compass_read_thread = chThdCreateStatic(waCompassReadThread, sizeof(waCompassReadThread), NORMALPRIO, CompassReadThread, NULL);
 800334c:	6018      	str	r0, [r3, #0]
    compass_process_thread = chThdCreateStatic(waCompassProcessThread, sizeof(waCompassProcessThread), NORMALPRIO, CompassProcessThread, NULL);
 800334e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <compass_init+0x54>)
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <compass_init+0x58>)
 8003356:	f7fd fed3 	bl	8001100 <chThdCreateStatic>
 800335a:	4c0c      	ldr	r4, [pc, #48]	; (800338c <compass_init+0x5c>)
 800335c:	6020      	str	r0, [r4, #0]
    chThdSleepMilliseconds(100);
 800335e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003362:	f7fd ff15 	bl	8001190 <chThdSleep>
    }
 
}

int16_t get_compass_degree(void) {
    return (int16_t)chMsgSend(compass_process_thread, MAIN);
 8003366:	6820      	ldr	r0, [r4, #0]
 8003368:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800336c:	f7fe f808 	bl	8001380 <chMsgSend>

void compass_init(void) {
    compass_read_thread = chThdCreateStatic(waCompassReadThread, sizeof(waCompassReadThread), NORMALPRIO, CompassReadThread, NULL);
    compass_process_thread = chThdCreateStatic(waCompassProcessThread, sizeof(waCompassProcessThread), NORMALPRIO, CompassProcessThread, NULL);
    chThdSleepMilliseconds(100);
    attack_degree = get_compass_degree();
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <compass_init+0x60>)
    }
 
}

int16_t get_compass_degree(void) {
    return (int16_t)chMsgSend(compass_process_thread, MAIN);
 8003372:	8018      	strh	r0, [r3, #0]
void compass_init(void) {
    compass_read_thread = chThdCreateStatic(waCompassReadThread, sizeof(waCompassReadThread), NORMALPRIO, CompassReadThread, NULL);
    compass_process_thread = chThdCreateStatic(waCompassProcessThread, sizeof(waCompassProcessThread), NORMALPRIO, CompassProcessThread, NULL);
    chThdSleepMilliseconds(100);
    attack_degree = get_compass_degree();
}
 8003374:	b002      	add	sp, #8
 8003376:	bd10      	pop	{r4, pc}
 8003378:	080032a1 	.word	0x080032a1
 800337c:	20001000 	.word	0x20001000
 8003380:	20001148 	.word	0x20001148
 8003384:	08003301 	.word	0x08003301
 8003388:	20000eb0 	.word	0x20000eb0
 800338c:	20000ea8 	.word	0x20000ea8
 8003390:	20000ff8 	.word	0x20000ff8
 8003394:	f3af 8000 	nop.w
 8003398:	f3af 8000 	nop.w
 800339c:	f3af 8000 	nop.w

080033a0 <LineWritingThread>:
	(void)arg;
	
    uint8_t msg_length = 0, msg_start_index = 0;
    int8_t i;

    init_queue = 1;
 80033a0:	2201      	movs	r2, #1
    else return result_degree;
}


THD_WORKING_AREA(waLineWritingThread, 128);
THD_FUNCTION(LineWritingThread, arg) {
 80033a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	(void)arg;
	
    uint8_t msg_length = 0, msg_start_index = 0;
    int8_t i;

    init_queue = 1;
 80033a6:	4613      	mov	r3, r2
 80033a8:	4f14      	ldr	r7, [pc, #80]	; (80033fc <LineWritingThread+0x5c>)
 80033aa:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003408 <LineWritingThread+0x68>

	while (1) {
		if(init_queue == 1) {
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	4e13      	ldr	r6, [pc, #76]	; (8003400 <LineWritingThread+0x60>)
	(void)arg;
	
    uint8_t msg_length = 0, msg_start_index = 0;
    int8_t i;

    init_queue = 1;
 80033b2:	703a      	strb	r2, [r7, #0]

	while (1) {
		if(init_queue == 1) {
			msg_length = INIT_MESSAGE_LENGTH;
			chMsgSend(readingp, (msg_t)msg_length);
			init_queue = 0;
 80033b4:	f04f 0900 	mov.w	r9, #0
    init_queue = 1;

	while (1) {
		if(init_queue == 1) {
			msg_length = INIT_MESSAGE_LENGTH;
			chMsgSend(readingp, (msg_t)msg_length);
 80033b8:	f8d8 0000 	ldr.w	r0, [r8]
    int8_t i;

    init_queue = 1;

	while (1) {
		if(init_queue == 1) {
 80033bc:	d015      	beq.n	80033ea <LineWritingThread+0x4a>
			chMsgSend(readingp, (msg_t)msg_length);
			init_queue = 0;
            msg_start_index = 0;
		} else {
            msg_length = COMMAND_MESSAGE_LENGTH;
            chMsgSend(readingp, (msg_t)msg_length);
 80033be:	2109      	movs	r1, #9
 80033c0:	f7fd ffde 	bl	8001380 <chMsgSend>
 80033c4:	2303      	movs	r3, #3
 80033c6:	461c      	mov	r4, r3
 80033c8:	250c      	movs	r5, #12
 80033ca:	3401      	adds	r4, #1
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 80033cc:	5cf1      	ldrb	r1, [r6, r3]
 80033ce:	480d      	ldr	r0, [pc, #52]	; (8003404 <LineWritingThread+0x64>)
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	b2e4      	uxtb	r4, r4
 80033d6:	f7fe f8cb 	bl	8001570 <chOQPutTimeout>
            msg_start_index = INIT_MESSAGE_LENGTH;
        }

        for(i = msg_start_index; i < (msg_start_index + msg_length); i++) {
 80033da:	b263      	sxtb	r3, r4
 80033dc:	42ab      	cmp	r3, r5
 80033de:	dbf4      	blt.n	80033ca <LineWritingThread+0x2a>
 80033e0:	783b      	ldrb	r3, [r7, #0]
    init_queue = 1;

	while (1) {
		if(init_queue == 1) {
			msg_length = INIT_MESSAGE_LENGTH;
			chMsgSend(readingp, (msg_t)msg_length);
 80033e2:	f8d8 0000 	ldr.w	r0, [r8]
    int8_t i;

    init_queue = 1;

	while (1) {
		if(init_queue == 1) {
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d1e9      	bne.n	80033be <LineWritingThread+0x1e>
			msg_length = INIT_MESSAGE_LENGTH;
			chMsgSend(readingp, (msg_t)msg_length);
 80033ea:	2103      	movs	r1, #3
 80033ec:	f7fd ffc8 	bl	8001380 <chMsgSend>
 80033f0:	2300      	movs	r3, #0
			init_queue = 0;
 80033f2:	f887 9000 	strb.w	r9, [r7]
 80033f6:	461c      	mov	r4, r3
 80033f8:	2503      	movs	r5, #3
 80033fa:	e7e6      	b.n	80033ca <LineWritingThread+0x2a>
 80033fc:	200014b4 	.word	0x200014b4
 8003400:	20000804 	.word	0x20000804
 8003404:	20000ce4 	.word	0x20000ce4
 8003408:	200013e0 	.word	0x200013e0
 800340c:	f3af 8000 	nop.w

08003410 <LineReadingThread>:
	}
}


THD_WORKING_AREA(waLineReadingThread, 128);
THD_FUNCTION(LineReadingThread, arg) {
 8003410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003414:	4f1a      	ldr	r7, [pc, #104]	; (8003480 <LineReadingThread+0x70>)
 8003416:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003488 <LineReadingThread+0x78>
	thread_t *writing_thread;
	uint8_t msg_length, received_char;
    int8_t i;

	while (1) {
		writing_thread = chMsgWait();
 800341a:	f7fd ffd1 	bl	80013c0 <chMsgWait>
		msg_length = (uint8_t)chMsgGet(writing_thread);
 800341e:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
        chMsgRelease(writing_thread, MSG_OK);
 8003422:	2100      	movs	r1, #0
 8003424:	f7fd ffec 	bl	8001400 <chMsgRelease>

        for(i = 0; i < msg_length; i++) {
 8003428:	b1ee      	cbz	r6, 8003466 <LineReadingThread+0x56>
 800342a:	2500      	movs	r5, #0
 800342c:	462c      	mov	r4, r5
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 800342e:	4815      	ldr	r0, [pc, #84]	; (8003484 <LineReadingThread+0x74>)
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	f7fe f824 	bl	8001480 <chIQGetTimeout>
            received_char = sdGet(LINES_SERIAL);
 8003438:	b2c0      	uxtb	r0, r0
            if(received_char != '\n' && i == 0) {
 800343a:	280a      	cmp	r0, #10
 800343c:	d002      	beq.n	8003444 <LineReadingThread+0x34>
 800343e:	b90c      	cbnz	r4, 8003444 <LineReadingThread+0x34>
	while (1) {
		writing_thread = chMsgWait();
		msg_length = (uint8_t)chMsgGet(writing_thread);
        chMsgRelease(writing_thread, MSG_OK);

        for(i = 0; i < msg_length; i++) {
 8003440:	4625      	mov	r5, r4
 8003442:	e7f4      	b.n	800342e <LineReadingThread+0x1e>
            received_char = sdGet(LINES_SERIAL);
            if(received_char != '\n' && i == 0) {
                i--;
            } else {
                if(msg_length != INIT_MESSAGE_LENGTH) {
 8003444:	2e03      	cmp	r6, #3
 8003446:	d014      	beq.n	8003472 <LineReadingThread+0x62>
                    if(i > ((RESET_LENGTH + COMMAND_LENGTH) - 1)) {
 8003448:	b263      	sxtb	r3, r4
 800344a:	2b04      	cmp	r3, #4
 800344c:	dd06      	ble.n	800345c <LineReadingThread+0x4c>
thread_t *writingp;
thread_t *readingp;
thread_t *workingp;

uint8_t char_to_value(uint8_t character) {
    if (character >= 'A') {
 800344e:	2840      	cmp	r0, #64	; 0x40
        character = character + 10 - 'A';
 8003450:	bf8c      	ite	hi
 8003452:	3837      	subhi	r0, #55	; 0x37
    } else {
        character = character - '0';
 8003454:	3830      	subls	r0, #48	; 0x30
            if(received_char != '\n' && i == 0) {
                i--;
            } else {
                if(msg_length != INIT_MESSAGE_LENGTH) {
                    if(i > ((RESET_LENGTH + COMMAND_LENGTH) - 1)) {
                        values[i - (RESET_LENGTH + COMMAND_LENGTH)] = char_to_value(received_char);
 8003456:	3d05      	subs	r5, #5

uint8_t char_to_value(uint8_t character) {
    if (character >= 'A') {
        character = character + 10 - 'A';
    } else {
        character = character - '0';
 8003458:	b2c0      	uxtb	r0, r0
            if(received_char != '\n' && i == 0) {
                i--;
            } else {
                if(msg_length != INIT_MESSAGE_LENGTH) {
                    if(i > ((RESET_LENGTH + COMMAND_LENGTH) - 1)) {
                        values[i - (RESET_LENGTH + COMMAND_LENGTH)] = char_to_value(received_char);
 800345a:	5578      	strb	r0, [r7, r5]
	while (1) {
		writing_thread = chMsgWait();
		msg_length = (uint8_t)chMsgGet(writing_thread);
        chMsgRelease(writing_thread, MSG_OK);

        for(i = 0; i < msg_length; i++) {
 800345c:	3401      	adds	r4, #1
 800345e:	b2e4      	uxtb	r4, r4
 8003460:	b265      	sxtb	r5, r4
 8003462:	42b5      	cmp	r5, r6
 8003464:	dbe3      	blt.n	800342e <LineReadingThread+0x1e>
                }
            }
        }
        
        if(msg_length != INIT_MESSAGE_LENGTH) {
            chMsgSend(workingp, (msg_t)1);
 8003466:	f8d8 0000 	ldr.w	r0, [r8]
 800346a:	2101      	movs	r1, #1
 800346c:	f7fd ff88 	bl	8001380 <chMsgSend>
 8003470:	e7d3      	b.n	800341a <LineReadingThread+0xa>
	while (1) {
		writing_thread = chMsgWait();
		msg_length = (uint8_t)chMsgGet(writing_thread);
        chMsgRelease(writing_thread, MSG_OK);

        for(i = 0; i < msg_length; i++) {
 8003472:	3401      	adds	r4, #1
 8003474:	b2e4      	uxtb	r4, r4
 8003476:	b265      	sxtb	r5, r4
 8003478:	2d03      	cmp	r5, #3
 800347a:	dbd8      	blt.n	800342e <LineReadingThread+0x1e>
 800347c:	e7cd      	b.n	800341a <LineReadingThread+0xa>
 800347e:	bf00      	nop
 8003480:	200014b0 	.word	0x200014b0
 8003484:	20000cc0 	.word	0x20000cc0
 8003488:	200014b8 	.word	0x200014b8
 800348c:	f3af 8000 	nop.w

08003490 <determine_avoiding_direction>:
        character = character - '0';
    }
    return character;
}
 
void determine_avoiding_direction(void) {
 8003490:	f8df c148 	ldr.w	ip, [pc, #328]	; 80035dc <determine_avoiding_direction+0x14c>
 8003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003498:	f04f 0b00 	mov.w	fp, #0
    int8_t i;
	res_x = 0, res_y = 0;
 800349c:	465d      	mov	r5, fp
 800349e:	465c      	mov	r4, fp
    
	for(i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = round_data_values[i] * INERTIA + round_values[i] * (1.0 - INERTIA);
		if (round_data_values[i] > 0.99 - INERTIA) {
			res_x += dx[i];
			res_y += dy[i];
 80034a0:	46e2      	mov	sl, ip
        character = character - '0';
    }
    return character;
}
 
void determine_avoiding_direction(void) {
 80034a2:	b085      	sub	sp, #20
 80034a4:	4e44      	ldr	r6, [pc, #272]	; (80035b8 <determine_avoiding_direction+0x128>)
 80034a6:	f8cd b00c 	str.w	fp, [sp, #12]
    int8_t i;
	res_x = 0, res_y = 0;
 80034aa:	f8cd b004 	str.w	fp, [sp, #4]
    
	for(i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = round_data_values[i] * INERTIA + round_values[i] * (1.0 - INERTIA);
		if (round_data_values[i] > 0.99 - INERTIA) {
			res_x += dx[i];
			res_y += dy[i];
 80034ae:	f8cd b008 	str.w	fp, [sp, #8]
	res_x = 0, res_y = 0;
    
    i_see_line = 0;
    
	for(i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = round_data_values[i] * INERTIA + round_values[i] * (1.0 - INERTIA);
 80034b2:	a339      	add	r3, pc, #228	; (adr r3, 8003598 <determine_avoiding_direction+0x108>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80034bc:	f7fd f8d8 	bl	8000670 <__aeabi_dmul>
 80034c0:	f85a 7f04 	ldr.w	r7, [sl, #4]!
 80034c4:	4680      	mov	r8, r0
 80034c6:	4638      	mov	r0, r7
 80034c8:	4689      	mov	r9, r1
 80034ca:	f7fd f86b 	bl	80005a4 <__aeabi_i2d>
 80034ce:	a334      	add	r3, pc, #208	; (adr r3, 80035a0 <determine_avoiding_direction+0x110>)
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f7fd f8cc 	bl	8000670 <__aeabi_dmul>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4640      	mov	r0, r8
 80034de:	4649      	mov	r1, r9
 80034e0:	f7fc ff14 	bl	800030c <__adddf3>
		if (round_data_values[i] > 0.99 - INERTIA) {
 80034e4:	a330      	add	r3, pc, #192	; (adr r3, 80035a8 <determine_avoiding_direction+0x118>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
	res_x = 0, res_y = 0;
    
    i_see_line = 0;
    
	for(i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = round_data_values[i] * INERTIA + round_values[i] * (1.0 - INERTIA);
 80034ea:	e9c6 0100 	strd	r0, r1, [r6]
		if (round_data_values[i] > 0.99 - INERTIA) {
 80034ee:	f7fd fb55 	bl	8000b9c <__aeabi_dcmpgt>
 80034f2:	b188      	cbz	r0, 8003518 <determine_avoiding_direction+0x88>
			res_x += dx[i];
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <determine_avoiding_direction+0x12c>)
 80034f6:	9a02      	ldr	r2, [sp, #8]
 80034f8:	f833 b015 	ldrh.w	fp, [r3, r5, lsl #1]
			res_y += dy[i];
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <determine_avoiding_direction+0x130>)
    i_see_line = 0;
    
	for(i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = round_data_values[i] * INERTIA + round_values[i] * (1.0 - INERTIA);
		if (round_data_values[i] > 0.99 - INERTIA) {
			res_x += dx[i];
 80034fe:	445a      	add	r2, fp
 8003500:	4693      	mov	fp, r2
			res_y += dy[i];
 8003502:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003506:	9a01      	ldr	r2, [sp, #4]
    i_see_line = 0;
    
	for(i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = round_data_values[i] * INERTIA + round_values[i] * (1.0 - INERTIA);
		if (round_data_values[i] > 0.99 - INERTIA) {
			res_x += dx[i];
 8003508:	fa1f fb8b 	uxth.w	fp, fp
			res_y += dy[i];
 800350c:	441a      	add	r2, r3
 800350e:	b293      	uxth	r3, r2
 8003510:	9303      	str	r3, [sp, #12]
 8003512:	f8cd b008 	str.w	fp, [sp, #8]
 8003516:	9301      	str	r3, [sp, #4]
		}
		if (round_values[i] == 1 && i_see_line == 0) {
			i_see_line = 1;
 8003518:	2f01      	cmp	r7, #1
 800351a:	f105 0501 	add.w	r5, r5, #1
 800351e:	bf08      	it	eq
 8003520:	2401      	moveq	r4, #1
    int8_t i;
	res_x = 0, res_y = 0;
    
    i_see_line = 0;
    
	for(i = 0; i < NUMBER_OF_SENSORS; i++) {
 8003522:	2d10      	cmp	r5, #16
 8003524:	d1c5      	bne.n	80034b2 <determine_avoiding_direction+0x22>
 8003526:	46a2      	mov	sl, r4
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <determine_avoiding_direction+0x134>)
 800352a:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <determine_avoiding_direction+0x138>)
 800352c:	f8a2 b000 	strh.w	fp, [r2]
 8003530:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8003534:	4a25      	ldr	r2, [pc, #148]	; (80035cc <determine_avoiding_direction+0x13c>)
 8003536:	f8a3 a000 	strh.w	sl, [r3]
		}
		if (round_values[i] == 1 && i_see_line == 0) {
			i_see_line = 1;
		}
	}        
	result_degree = ((int16_t)(atan2(res_y, res_x) / PI * 180) + 405 ) % 360;
 800353a:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800353e:	8011      	strh	r1, [r2, #0]
 8003540:	f7fd f830 	bl	80005a4 <__aeabi_i2d>
 8003544:	9c02      	ldr	r4, [sp, #8]
 8003546:	4606      	mov	r6, r0
 8003548:	b220      	sxth	r0, r4
 800354a:	460f      	mov	r7, r1
 800354c:	f7fd f82a 	bl	80005a4 <__aeabi_i2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4630      	mov	r0, r6
 8003556:	4639      	mov	r1, r7
 8003558:	f000 fd2a 	bl	8003fb0 <atan2>
 800355c:	a314      	add	r3, pc, #80	; (adr r3, 80035b0 <determine_avoiding_direction+0x120>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fd f9af 	bl	80008c4 <__aeabi_ddiv>
 8003566:	2200      	movs	r2, #0
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <determine_avoiding_direction+0x140>)
 800356a:	f7fd f881 	bl	8000670 <__aeabi_dmul>
 800356e:	f7fd fb1f 	bl	8000bb0 <__aeabi_d2iz>
 8003572:	4c18      	ldr	r4, [pc, #96]	; (80035d4 <determine_avoiding_direction+0x144>)
 8003574:	b200      	sxth	r0, r0
 8003576:	f200 1095 	addw	r0, r0, #405	; 0x195
 800357a:	fb80 4504 	smull	r4, r5, r0, r4
 800357e:	17c3      	asrs	r3, r0, #31
 8003580:	1942      	adds	r2, r0, r5
 8003582:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 8003586:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800358a:	fb02 0013 	mls	r0, r2, r3, r0
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <determine_avoiding_direction+0x148>)
 8003590:	8018      	strh	r0, [r3, #0]
}
 8003592:	b005      	add	sp, #20
 8003594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003598:	66666666 	.word	0x66666666
 800359c:	3fee6666 	.word	0x3fee6666
 80035a0:	999999a0 	.word	0x999999a0
 80035a4:	3fa99999 	.word	0x3fa99999
 80035a8:	47ae1480 	.word	0x47ae1480
 80035ac:	3fa47ae1 	.word	0x3fa47ae1
 80035b0:	f01b866e 	.word	0xf01b866e
 80035b4:	400921f9 	.word	0x400921f9
 80035b8:	20001428 	.word	0x20001428
 80035bc:	08005a30 	.word	0x08005a30
 80035c0:	08005a50 	.word	0x08005a50
 80035c4:	20001428 	.word	0x20001428
 80035c8:	2000142e 	.word	0x2000142e
 80035cc:	2000142c 	.word	0x2000142c
 80035d0:	40668000 	.word	0x40668000
 80035d4:	b60b60b7 	.word	0xb60b60b7
 80035d8:	2000142a 	.word	0x2000142a
 80035dc:	200013e0 	.word	0x200013e0

080035e0 <LineWorkingThread>:
	}
}


THD_WORKING_AREA(waLineWorkingThread, 128);
THD_FUNCTION(LineWorkingThread, arg) {
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	4f0e      	ldr	r7, [pc, #56]	; (800361c <LineWorkingThread+0x3c>)
    
    thread_t *reading_thread;
    int8_t i, j, f;

	while (1) {
        reading_thread = chMsgWait();
 80035e4:	f7fd feec 	bl	80013c0 <chMsgWait>
 80035e8:	4e0d      	ldr	r6, [pc, #52]	; (8003620 <LineWorkingThread+0x40>)
 80035ea:	4d0e      	ldr	r5, [pc, #56]	; (8003624 <LineWorkingThread+0x44>)
	}
}


THD_WORKING_AREA(waLineWorkingThread, 128);
THD_FUNCTION(LineWorkingThread, arg) {
 80035ec:	4629      	mov	r1, r5
 80035ee:	f816 4b01 	ldrb.w	r4, [r6], #1
 80035f2:	2300      	movs	r3, #0
        chMsgGet(reading_thread);
        f = 0;
        for(i = 0; i < 4-FERQUES; i++) {
			if(i == 1) f = FERQUES;
            for(j = 0; j < 4; j++) {
                round_values[4*(i+f) + j] = (values[i] >> j) & 1;
 80035f4:	fa44 f203 	asr.w	r2, r4, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f002 0201 	and.w	r2, r2, #1
        reading_thread = chMsgWait();
        chMsgGet(reading_thread);
        f = 0;
        for(i = 0; i < 4-FERQUES; i++) {
			if(i == 1) f = FERQUES;
            for(j = 0; j < 4; j++) {
 80035fe:	2b04      	cmp	r3, #4
                round_values[4*(i+f) + j] = (values[i] >> j) & 1;
 8003600:	f841 2b04 	str.w	r2, [r1], #4
        reading_thread = chMsgWait();
        chMsgGet(reading_thread);
        f = 0;
        for(i = 0; i < 4-FERQUES; i++) {
			if(i == 1) f = FERQUES;
            for(j = 0; j < 4; j++) {
 8003604:	d1f6      	bne.n	80035f4 <LineWorkingThread+0x14>

	while (1) {
        reading_thread = chMsgWait();
        chMsgGet(reading_thread);
        f = 0;
        for(i = 0; i < 4-FERQUES; i++) {
 8003606:	42be      	cmp	r6, r7
 8003608:	f105 0510 	add.w	r5, r5, #16
 800360c:	d1ee      	bne.n	80035ec <LineWorkingThread+0xc>
            for(j = 0; j < 4; j++) {
                round_values[4*(i+f) + j] = (values[i] >> j) & 1;
            }
        }

        chMsgRelease(reading_thread, MSG_OK);
 800360e:	2100      	movs	r1, #0
 8003610:	f7fd fef6 	bl	8001400 <chMsgRelease>
        determine_avoiding_direction();
 8003614:	f7ff ff3c 	bl	8003490 <determine_avoiding_direction>
	}
 8003618:	e7e4      	b.n	80035e4 <LineWorkingThread+0x4>
 800361a:	bf00      	nop
 800361c:	200014b4 	.word	0x200014b4
 8003620:	200014b0 	.word	0x200014b0
 8003624:	200013e4 	.word	0x200013e4
 8003628:	f3af 8000 	nop.w
 800362c:	f3af 8000 	nop.w

08003630 <check_line>:
	}        
	result_degree = ((int16_t)(atan2(res_y, res_x) / PI * 180) + 405 ) % 360;
}
  
int16_t check_line(void) {
	if (i_see_line == 0) return -1;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <check_line+0x18>)
 8003632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003636:	b11b      	cbz	r3, 8003640 <check_line+0x10>
    else return result_degree;
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <check_line+0x1c>)
 800363a:	8818      	ldrh	r0, [r3, #0]
}
 800363c:	b200      	sxth	r0, r0
 800363e:	4770      	bx	lr
	}        
	result_degree = ((int16_t)(atan2(res_y, res_x) / PI * 180) + 405 ) % 360;
}
  
int16_t check_line(void) {
	if (i_see_line == 0) return -1;
 8003640:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003644:	e7fa      	b.n	800363c <check_line+0xc>
 8003646:	bf00      	nop
 8003648:	2000142e 	.word	0x2000142e
 800364c:	2000142a 	.word	0x2000142a

08003650 <lines_init>:
        chMsgRelease(reading_thread, MSG_OK);
        determine_avoiding_direction();
	}
}
 
void lines_init(void) {
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <lines_init+0x5c>)
    
    int8_t i;
	
    for (i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = 0;
 8003652:	2000      	movs	r0, #0
 8003654:	2100      	movs	r1, #0
 8003656:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800365a:	e9e3 0102 	strd	r0, r1, [r3, #8]!
 
void lines_init(void) {
    
    int8_t i;
	
    for (i = 0; i < NUMBER_OF_SENSORS; i++) {
 800365e:	4293      	cmp	r3, r2
 8003660:	d1fb      	bne.n	800365a <lines_init+0xa>
        chMsgRelease(reading_thread, MSG_OK);
        determine_avoiding_direction();
	}
}
 
void lines_init(void) {
 8003662:	b530      	push	{r4, r5, lr}
	
    for (i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = 0;
	}
    
	i_see_line = 0; // 0 --> false, I don't see line
 8003664:	2400      	movs	r4, #0
        chMsgRelease(reading_thread, MSG_OK);
        determine_avoiding_direction();
	}
}
 
void lines_init(void) {
 8003666:	b083      	sub	sp, #12
	
    for (i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = 0;
	}
    
	i_see_line = 0; // 0 --> false, I don't see line
 8003668:	4d11      	ldr	r5, [pc, #68]	; (80036b0 <lines_init+0x60>)

    readingp = chThdCreateStatic(waLineReadingThread, sizeof(waLineReadingThread), NORMALPRIO, LineReadingThread, NULL);
 800366a:	9400      	str	r4, [sp, #0]
 800366c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <lines_init+0x64>)
 8003674:	4810      	ldr	r0, [pc, #64]	; (80036b8 <lines_init+0x68>)
	
    for (i = 0; i < NUMBER_OF_SENSORS; i++) {
		round_data_values[i] = 0;
	}
    
	i_see_line = 0; // 0 --> false, I don't see line
 8003676:	802c      	strh	r4, [r5, #0]

    readingp = chThdCreateStatic(waLineReadingThread, sizeof(waLineReadingThread), NORMALPRIO, LineReadingThread, NULL);
 8003678:	f7fd fd42 	bl	8001100 <chThdCreateStatic>
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <lines_init+0x6c>)
    writingp = chThdCreateStatic(waLineWritingThread, sizeof(waLineWritingThread), NORMALPRIO, LineWritingThread, NULL);
 800367e:	9400      	str	r4, [sp, #0]
 8003680:	f44f 71a4 	mov.w	r1, #328	; 0x148
		round_data_values[i] = 0;
	}
    
	i_see_line = 0; // 0 --> false, I don't see line

    readingp = chThdCreateStatic(waLineReadingThread, sizeof(waLineReadingThread), NORMALPRIO, LineReadingThread, NULL);
 8003684:	6018      	str	r0, [r3, #0]
    writingp = chThdCreateStatic(waLineWritingThread, sizeof(waLineWritingThread), NORMALPRIO, LineWritingThread, NULL);
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <lines_init+0x70>)
 800368a:	480e      	ldr	r0, [pc, #56]	; (80036c4 <lines_init+0x74>)
 800368c:	f7fd fd38 	bl	8001100 <chThdCreateStatic>
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <lines_init+0x78>)
	workingp = chThdCreateStatic(waLineWorkingThread, sizeof(waLineWorkingThread), NORMALPRIO, LineWorkingThread, NULL);
 8003692:	9400      	str	r4, [sp, #0]
 8003694:	f44f 71a4 	mov.w	r1, #328	; 0x148
	}
    
	i_see_line = 0; // 0 --> false, I don't see line

    readingp = chThdCreateStatic(waLineReadingThread, sizeof(waLineReadingThread), NORMALPRIO, LineReadingThread, NULL);
    writingp = chThdCreateStatic(waLineWritingThread, sizeof(waLineWritingThread), NORMALPRIO, LineWritingThread, NULL);
 8003698:	6018      	str	r0, [r3, #0]
	workingp = chThdCreateStatic(waLineWorkingThread, sizeof(waLineWorkingThread), NORMALPRIO, LineWorkingThread, NULL);
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <lines_init+0x7c>)
 800369e:	480c      	ldr	r0, [pc, #48]	; (80036d0 <lines_init+0x80>)
 80036a0:	f7fd fd2e 	bl	8001100 <chThdCreateStatic>
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <lines_init+0x84>)
 80036a6:	6018      	str	r0, [r3, #0]
}
 80036a8:	b003      	add	sp, #12
 80036aa:	bd30      	pop	{r4, r5, pc}
 80036ac:	20001428 	.word	0x20001428
 80036b0:	2000142e 	.word	0x2000142e
 80036b4:	08003411 	.word	0x08003411
 80036b8:	20001298 	.word	0x20001298
 80036bc:	200013e0 	.word	0x200013e0
 80036c0:	080033a1 	.word	0x080033a1
 80036c4:	20001150 	.word	0x20001150
 80036c8:	20001424 	.word	0x20001424
 80036cc:	080035e1 	.word	0x080035e1
 80036d0:	200014c0 	.word	0x200014c0
 80036d4:	200014b8 	.word	0x200014b8
 80036d8:	f3af 8000 	nop.w
 80036dc:	f3af 8000 	nop.w

080036e0 <CameraProcessThread>:
        chMsgSend(camera_process_thread, (msg_t)READ);
	}
}

THD_WORKING_AREA(waCameraProcessThread, 128);
THD_FUNCTION(CameraProcessThread, arg) {
 80036e0:	b538      	push	{r3, r4, r5, lr}

    thread_t *master_thread;
    msg_t msg;

    while(1) {
        master_thread = chMsgWait();
 80036e2:	f7fd fe6d 	bl	80013c0 <chMsgWait>
        msg = chMsgGet(master_thread);
        if(msg == READ) {
 80036e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80036e8:	4c0f      	ldr	r4, [pc, #60]	; (8003728 <CameraProcessThread+0x48>)
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	4d0f      	ldr	r5, [pc, #60]	; (800372c <CameraProcessThread+0x4c>)
 80036ee:	d00f      	beq.n	8003710 <CameraProcessThread+0x30>
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <CameraProcessThread+0x50>)
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <CameraProcessThread+0x54>)
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
                camera_actual_values[i] = camera_read_values[i];
            }
        } else {
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
                camera_values[i] = camera_actual_values[i];
 80036f4:	f833 1b02 	ldrh.w	r1, [r3], #2
        if(msg == READ) {
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
                camera_actual_values[i] = camera_read_values[i];
            }
        } else {
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
 80036f8:	42a3      	cmp	r3, r4
                camera_values[i] = camera_actual_values[i];
 80036fa:	f822 1b02 	strh.w	r1, [r2], #2
        if(msg == READ) {
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
                camera_actual_values[i] = camera_read_values[i];
            }
        } else {
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
 80036fe:	d1f9      	bne.n	80036f4 <CameraProcessThread+0x14>
                camera_values[i] = camera_actual_values[i];
            }
        }
        chMsgRelease(master_thread, MSG_OK);
 8003700:	2100      	movs	r1, #0
 8003702:	f7fd fe7d 	bl	8001400 <chMsgRelease>

    thread_t *master_thread;
    msg_t msg;

    while(1) {
        master_thread = chMsgWait();
 8003706:	f7fd fe5b 	bl	80013c0 <chMsgWait>
        msg = chMsgGet(master_thread);
        if(msg == READ) {
 800370a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800370c:	2b01      	cmp	r3, #1
 800370e:	d1ef      	bne.n	80036f0 <CameraProcessThread+0x10>
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <CameraProcessThread+0x58>)
 8003712:	4a07      	ldr	r2, [pc, #28]	; (8003730 <CameraProcessThread+0x50>)
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
                camera_actual_values[i] = camera_read_values[i];
 8003714:	f833 1b02 	ldrh.w	r1, [r3], #2

    while(1) {
        master_thread = chMsgWait();
        msg = chMsgGet(master_thread);
        if(msg == READ) {
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
 8003718:	42ab      	cmp	r3, r5
                camera_actual_values[i] = camera_read_values[i];
 800371a:	f822 1b02 	strh.w	r1, [r2], #2

    while(1) {
        master_thread = chMsgWait();
        msg = chMsgGet(master_thread);
        if(msg == READ) {
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
 800371e:	d1f9      	bne.n	8003714 <CameraProcessThread+0x34>
        } else {
            for(i = 0; i < NUMBER_OF_VALUES; i++) {
                camera_values[i] = camera_actual_values[i];
            }
        }
        chMsgRelease(master_thread, MSG_OK);
 8003720:	2100      	movs	r1, #0
 8003722:	f7fd fe6d 	bl	8001400 <chMsgRelease>
 8003726:	e7ee      	b.n	8003706 <CameraProcessThread+0x26>
 8003728:	20001618 	.word	0x20001618
 800372c:	200018c8 	.word	0x200018c8
 8003730:	2000160c 	.word	0x2000160c
 8003734:	200018b0 	.word	0x200018b0
 8003738:	200018bc 	.word	0x200018bc
 800373c:	f3af 8000 	nop.w

08003740 <get_camera_values>:
    }
}

void get_camera_values(void) {
    chMsgSend(camera_process_thread, (msg_t)MAIN);
 8003740:	4b02      	ldr	r3, [pc, #8]	; (800374c <get_camera_values+0xc>)
 8003742:	2102      	movs	r1, #2
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	f7fd be1b 	b.w	8001380 <chMsgSend>
 800374a:	bf00      	nop
 800374c:	20001760 	.word	0x20001760

08003750 <get_goal_degree>:
}

int16_t get_goal_degree(void) {
    return camera_values[0];
 8003750:	4b01      	ldr	r3, [pc, #4]	; (8003758 <get_goal_degree+0x8>)
}
 8003752:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003756:	4770      	bx	lr
 8003758:	200018b0 	.word	0x200018b0
 800375c:	f3af 8000 	nop.w

08003760 <get_goal_distance>:

int16_t get_goal_distance(void) {
    return camera_values[1];
 8003760:	4b01      	ldr	r3, [pc, #4]	; (8003768 <get_goal_distance+0x8>)
}
 8003762:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8003766:	4770      	bx	lr
 8003768:	200018b0 	.word	0x200018b0
 800376c:	f3af 8000 	nop.w

08003770 <get_ball_degree>:

int16_t get_ball_degree(void) {
    return camera_values[2];
 8003770:	4b01      	ldr	r3, [pc, #4]	; (8003778 <get_ball_degree+0x8>)
}
 8003772:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8003776:	4770      	bx	lr
 8003778:	200018b0 	.word	0x200018b0
 800377c:	f3af 8000 	nop.w

08003780 <get_ball_distance>:

int16_t get_ball_distance(void) {
    return camera_values[3];
 8003780:	4b01      	ldr	r3, [pc, #4]	; (8003788 <get_ball_distance+0x8>)
}
 8003782:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8003786:	4770      	bx	lr
 8003788:	200018b0 	.word	0x200018b0
 800378c:	f3af 8000 	nop.w

08003790 <get_start>:

int16_t get_start(void) {
    return camera_values[4];
 8003790:	4b01      	ldr	r3, [pc, #4]	; (8003798 <get_start+0x8>)
}
 8003792:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8003796:	4770      	bx	lr
 8003798:	200018b0 	.word	0x200018b0
 800379c:	f3af 8000 	nop.w

080037a0 <get_shooting_event>:

int16_t get_shooting_event(void) {
    return camera_values[5];
 80037a0:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <get_shooting_event+0x8>)
}
 80037a2:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80037a6:	4770      	bx	lr
 80037a8:	200018b0 	.word	0x200018b0
 80037ac:	f3af 8000 	nop.w

080037b0 <process_value>:

int16_t process_value(void) {
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	481b      	ldr	r0, [pc, #108]	; (8003820 <process_value+0x70>)
 80037b4:	f04f 31ff 	mov.w	r1, #4294967295
 80037b8:	f7fd fe62 	bl	8001480 <chIQGetTimeout>
	int16_t val = 0;

	current_value = sdGet(&SD4);
 80037bc:	4d19      	ldr	r5, [pc, #100]	; (8003824 <process_value+0x74>)
 80037be:	b2c0      	uxtb	r0, r0
	while(current_value != '+' && current_value != '-') {
 80037c0:	282b      	cmp	r0, #43	; 0x2b
}

int16_t process_value(void) {
	int16_t val = 0;

	current_value = sdGet(&SD4);
 80037c2:	7028      	strb	r0, [r5, #0]
	while(current_value != '+' && current_value != '-') {
 80037c4:	d029      	beq.n	800381a <process_value+0x6a>
 80037c6:	282d      	cmp	r0, #45	; 0x2d
 80037c8:	d027      	beq.n	800381a <process_value+0x6a>
 80037ca:	2400      	movs	r4, #0
 80037cc:	e001      	b.n	80037d2 <process_value+0x22>
 80037ce:	282d      	cmp	r0, #45	; 0x2d
 80037d0:	d019      	beq.n	8003806 <process_value+0x56>
		val += current_value - '0';
 80037d2:	4420      	add	r0, r4
 80037d4:	3830      	subs	r0, #48	; 0x30
		val *= 10;
 80037d6:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80037da:	f04f 31ff 	mov.w	r1, #4294967295
 80037de:	4810      	ldr	r0, [pc, #64]	; (8003820 <process_value+0x70>)
 80037e0:	f7fd fe4e 	bl	8001480 <chIQGetTimeout>
 80037e4:	0064      	lsls	r4, r4, #1
		current_value = sdGet(&SD4);
 80037e6:	b2c0      	uxtb	r0, r0
	int16_t val = 0;

	current_value = sdGet(&SD4);
	while(current_value != '+' && current_value != '-') {
		val += current_value - '0';
		val *= 10;
 80037e8:	b2a4      	uxth	r4, r4

int16_t process_value(void) {
	int16_t val = 0;

	current_value = sdGet(&SD4);
	while(current_value != '+' && current_value != '-') {
 80037ea:	282b      	cmp	r0, #43	; 0x2b
		val += current_value - '0';
		val *= 10;
 80037ec:	b2a4      	uxth	r4, r4
		current_value = sdGet(&SD4);
 80037ee:	7028      	strb	r0, [r5, #0]

int16_t process_value(void) {
	int16_t val = 0;

	current_value = sdGet(&SD4);
	while(current_value != '+' && current_value != '-') {
 80037f0:	d1ed      	bne.n	80037ce <process_value+0x1e>
 80037f2:	480d      	ldr	r0, [pc, #52]	; (8003828 <process_value+0x78>)
 80037f4:	b224      	sxth	r4, r4
 80037f6:	fb80 3004 	smull	r3, r0, r0, r4
 80037fa:	17e4      	asrs	r4, r4, #31
 80037fc:	ebc4 00a0 	rsb	r0, r4, r0, asr #2
 8003800:	b280      	uxth	r0, r0
 8003802:	b200      	sxth	r0, r0
		current_value = sdGet(&SD4);
	}
	val /= 10;
	if(current_value == '-') return -val;
	return val;
}
 8003804:	bd38      	pop	{r3, r4, r5, pc}
 8003806:	4808      	ldr	r0, [pc, #32]	; (8003828 <process_value+0x78>)
 8003808:	b224      	sxth	r4, r4
 800380a:	fb80 3004 	smull	r3, r0, r0, r4
 800380e:	17e4      	asrs	r4, r4, #31
 8003810:	eba4 00a0 	sub.w	r0, r4, r0, asr #2
 8003814:	b280      	uxth	r0, r0
 8003816:	b200      	sxth	r0, r0
 8003818:	bd38      	pop	{r3, r4, r5, pc}

int16_t process_value(void) {
	int16_t val = 0;

	current_value = sdGet(&SD4);
	while(current_value != '+' && current_value != '-') {
 800381a:	2000      	movs	r0, #0
 800381c:	e7f1      	b.n	8003802 <process_value+0x52>
 800381e:	bf00      	nop
 8003820:	20000c48 	.word	0x20000c48
 8003824:	20001608 	.word	0x20001608
 8003828:	66666667 	.word	0x66666667
 800382c:	f3af 8000 	nop.w

08003830 <CameraReadThread>:
int16_t camera_values[NUMBER_OF_VALUES];

char current_value;

THD_WORKING_AREA(waCameraReadThread, 128);
THD_FUNCTION(CameraReadThread, arg) {
 8003830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t i;
	int16_t goal_degree = 420;
	int16_t goal_distance = 420;
	int16_t ball_degree = 420;
	int16_t ball_distance = 420;
	camera_read_values[4] = 0;
 8003834:	4f2a      	ldr	r7, [pc, #168]	; (80038e0 <CameraReadThread+0xb0>)
	
	int8_t i;
	int16_t goal_degree = 420;
	int16_t goal_distance = 420;
	int16_t ball_degree = 420;
	int16_t ball_distance = 420;
 8003836:	f44f 75d2 	mov.w	r5, #420	; 0x1a4
	camera_read_values[4] = 0;
 800383a:	2300      	movs	r3, #0
	(void)arg;
	
	int8_t i;
	int16_t goal_degree = 420;
	int16_t goal_distance = 420;
	int16_t ball_degree = 420;
 800383c:	462c      	mov	r4, r5
THD_FUNCTION(CameraReadThread, arg) {
	(void)arg;
	
	int8_t i;
	int16_t goal_degree = 420;
	int16_t goal_distance = 420;
 800383e:	46aa      	mov	sl, r5
THD_WORKING_AREA(waCameraReadThread, 128);
THD_FUNCTION(CameraReadThread, arg) {
	(void)arg;
	
	int8_t i;
	int16_t goal_degree = 420;
 8003840:	46a9      	mov	r9, r5
 8003842:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80038e8 <CameraReadThread+0xb8>
 8003846:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80038ec <CameraReadThread+0xbc>
	int16_t goal_distance = 420;
	int16_t ball_degree = 420;
	int16_t ball_distance = 420;
	camera_read_values[4] = 0;
 800384a:	813b      	strh	r3, [r7, #8]
 800384c:	e00a      	b.n	8003864 <CameraReadThread+0x34>
        camera_read_values[0] = goal_degree;
        camera_read_values[1] = goal_distance;
        camera_read_values[2] = ball_degree;
        camera_read_values[3] = ball_distance;

        chMsgSend(camera_process_thread, (msg_t)READ);
 800384e:	4631      	mov	r1, r6
 8003850:	f8db 0000 	ldr.w	r0, [fp]
		}
        
        camera_read_values[0] = goal_degree;
        camera_read_values[1] = goal_distance;
        camera_read_values[2] = ball_degree;
        camera_read_values[3] = ball_distance;
 8003854:	80fd      	strh	r5, [r7, #6]
			}
		}
        
        camera_read_values[0] = goal_degree;
        camera_read_values[1] = goal_distance;
        camera_read_values[2] = ball_degree;
 8003856:	80bc      	strh	r4, [r7, #4]
			} else if (current_value == 'b') {
				camera_read_values[5] = 0;
			}
		}
        
        camera_read_values[0] = goal_degree;
 8003858:	f8a7 9000 	strh.w	r9, [r7]
        camera_read_values[1] = goal_distance;
 800385c:	f8a7 a002 	strh.w	sl, [r7, #2]
        camera_read_values[2] = ball_degree;
        camera_read_values[3] = ball_distance;

        chMsgSend(camera_process_thread, (msg_t)READ);
 8003860:	f7fd fd8e 	bl	8001380 <chMsgSend>
 8003864:	2602      	movs	r6, #2
 8003866:	481f      	ldr	r0, [pc, #124]	; (80038e4 <CameraReadThread+0xb4>)
 8003868:	f04f 31ff 	mov.w	r1, #4294967295
 800386c:	f7fd fe08 	bl	8001480 <chIQGetTimeout>
	int16_t ball_distance = 420;
	camera_read_values[4] = 0;
	
	while (1) {
		for(i = 0; i < 2; i++){
			current_value = sdGet(CAMERA_SERIAL);
 8003870:	b2c0      	uxtb	r0, r0
			if(current_value == 'x') {
 8003872:	2878      	cmp	r0, #120	; 0x78
	int16_t ball_distance = 420;
	camera_read_values[4] = 0;
	
	while (1) {
		for(i = 0; i < 2; i++){
			current_value = sdGet(CAMERA_SERIAL);
 8003874:	f888 0000 	strb.w	r0, [r8]
			if(current_value == 'x') {
 8003878:	d018      	beq.n	80038ac <CameraReadThread+0x7c>
				goal_degree = process_value();
			} else if (current_value == 'y') {
 800387a:	2879      	cmp	r0, #121	; 0x79
 800387c:	d01a      	beq.n	80038b4 <CameraReadThread+0x84>
				goal_distance = process_value();
			} else if (current_value == 'z') {
 800387e:	287a      	cmp	r0, #122	; 0x7a
 8003880:	d020      	beq.n	80038c4 <CameraReadThread+0x94>
                ball_degree = process_value();
            } else if (current_value == 'i') {
 8003882:	2869      	cmp	r0, #105	; 0x69
 8003884:	d022      	beq.n	80038cc <CameraReadThread+0x9c>
                ball_distance = process_value();
            } else if (current_value == 'p') {
 8003886:	2870      	cmp	r0, #112	; 0x70
 8003888:	d00d      	beq.n	80038a6 <CameraReadThread+0x76>
				camera_read_values[4] = 1;
			} else if (current_value == 's') {
 800388a:	2873      	cmp	r0, #115	; 0x73
 800388c:	d016      	beq.n	80038bc <CameraReadThread+0x8c>
				camera_read_values[4] = 0;
			} else if (current_value == 'k') {
 800388e:	286b      	cmp	r0, #107	; 0x6b
 8003890:	d023      	beq.n	80038da <CameraReadThread+0xaa>
				kick();
			} else if (current_value == 'a') {
 8003892:	2861      	cmp	r0, #97	; 0x61
 8003894:	d01e      	beq.n	80038d4 <CameraReadThread+0xa4>
				camera_read_values[5] = 1;
			} else if (current_value == 'b') {
 8003896:	2862      	cmp	r0, #98	; 0x62
				camera_read_values[5] = 0;
 8003898:	bf04      	itt	eq
 800389a:	2300      	moveq	r3, #0
 800389c:	817b      	strheq	r3, [r7, #10]
	int16_t ball_degree = 420;
	int16_t ball_distance = 420;
	camera_read_values[4] = 0;
	
	while (1) {
		for(i = 0; i < 2; i++){
 800389e:	2e01      	cmp	r6, #1
 80038a0:	d0d5      	beq.n	800384e <CameraReadThread+0x1e>
 80038a2:	2601      	movs	r6, #1
 80038a4:	e7df      	b.n	8003866 <CameraReadThread+0x36>
			} else if (current_value == 'z') {
                ball_degree = process_value();
            } else if (current_value == 'i') {
                ball_distance = process_value();
            } else if (current_value == 'p') {
				camera_read_values[4] = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	813b      	strh	r3, [r7, #8]
 80038aa:	e7f8      	b.n	800389e <CameraReadThread+0x6e>
	
	while (1) {
		for(i = 0; i < 2; i++){
			current_value = sdGet(CAMERA_SERIAL);
			if(current_value == 'x') {
				goal_degree = process_value();
 80038ac:	f7ff ff80 	bl	80037b0 <process_value>
 80038b0:	4681      	mov	r9, r0
 80038b2:	e7f4      	b.n	800389e <CameraReadThread+0x6e>
			} else if (current_value == 'y') {
				goal_distance = process_value();
 80038b4:	f7ff ff7c 	bl	80037b0 <process_value>
 80038b8:	4682      	mov	sl, r0
 80038ba:	e7f0      	b.n	800389e <CameraReadThread+0x6e>
            } else if (current_value == 'i') {
                ball_distance = process_value();
            } else if (current_value == 'p') {
				camera_read_values[4] = 1;
			} else if (current_value == 's') {
				camera_read_values[4] = 0;
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	813b      	strh	r3, [r7, #8]
 80038c2:	e7ec      	b.n	800389e <CameraReadThread+0x6e>
			if(current_value == 'x') {
				goal_degree = process_value();
			} else if (current_value == 'y') {
				goal_distance = process_value();
			} else if (current_value == 'z') {
                ball_degree = process_value();
 80038c4:	f7ff ff74 	bl	80037b0 <process_value>
 80038c8:	4604      	mov	r4, r0
 80038ca:	e7e8      	b.n	800389e <CameraReadThread+0x6e>
            } else if (current_value == 'i') {
                ball_distance = process_value();
 80038cc:	f7ff ff70 	bl	80037b0 <process_value>
 80038d0:	4605      	mov	r5, r0
 80038d2:	e7e4      	b.n	800389e <CameraReadThread+0x6e>
			} else if (current_value == 's') {
				camera_read_values[4] = 0;
			} else if (current_value == 'k') {
				kick();
			} else if (current_value == 'a') {
				camera_read_values[5] = 1;
 80038d4:	2301      	movs	r3, #1
 80038d6:	817b      	strh	r3, [r7, #10]
 80038d8:	e7e1      	b.n	800389e <CameraReadThread+0x6e>
            } else if (current_value == 'p') {
				camera_read_values[4] = 1;
			} else if (current_value == 's') {
				camera_read_values[4] = 0;
			} else if (current_value == 'k') {
				kick();
 80038da:	f000 f841 	bl	8003960 <kick>
 80038de:	e7de      	b.n	800389e <CameraReadThread+0x6e>
 80038e0:	200018bc 	.word	0x200018bc
 80038e4:	20000c48 	.word	0x20000c48
 80038e8:	20001608 	.word	0x20001608
 80038ec:	20001760 	.word	0x20001760

080038f0 <camera_init>:
	val /= 10;
	if(current_value == '-') return -val;
	return val;
}

void camera_init(void) {
 80038f0:	b510      	push	{r4, lr}
	camera_read_thread = chThdCreateStatic(waCameraReadThread, sizeof(waCameraReadThread), NORMALPRIO, CameraReadThread, NULL);
 80038f2:	2400      	movs	r4, #0
	val /= 10;
	if(current_value == '-') return -val;
	return val;
}

void camera_init(void) {
 80038f4:	b082      	sub	sp, #8
	camera_read_thread = chThdCreateStatic(waCameraReadThread, sizeof(waCameraReadThread), NORMALPRIO, CameraReadThread, NULL);
 80038f6:	9400      	str	r4, [sp, #0]
 80038f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <camera_init+0x34>)
 8003900:	4809      	ldr	r0, [pc, #36]	; (8003928 <camera_init+0x38>)
 8003902:	f7fd fbfd 	bl	8001100 <chThdCreateStatic>
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <camera_init+0x3c>)
    camera_process_thread = chThdCreateStatic(waCameraProcessThread, sizeof(waCameraProcessThread), NORMALPRIO, CameraProcessThread, NULL);
 8003908:	9400      	str	r4, [sp, #0]
 800390a:	f44f 71a4 	mov.w	r1, #328	; 0x148
	if(current_value == '-') return -val;
	return val;
}

void camera_init(void) {
	camera_read_thread = chThdCreateStatic(waCameraReadThread, sizeof(waCameraReadThread), NORMALPRIO, CameraReadThread, NULL);
 800390e:	6018      	str	r0, [r3, #0]
    camera_process_thread = chThdCreateStatic(waCameraProcessThread, sizeof(waCameraProcessThread), NORMALPRIO, CameraProcessThread, NULL);
 8003910:	2240      	movs	r2, #64	; 0x40
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <camera_init+0x40>)
 8003914:	4807      	ldr	r0, [pc, #28]	; (8003934 <camera_init+0x44>)
 8003916:	f7fd fbf3 	bl	8001100 <chThdCreateStatic>
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <camera_init+0x48>)
 800391c:	6018      	str	r0, [r3, #0]
}
 800391e:	b002      	add	sp, #8
 8003920:	bd10      	pop	{r4, pc}
 8003922:	bf00      	nop
 8003924:	08003831 	.word	0x08003831
 8003928:	20001768 	.word	0x20001768
 800392c:	20001764 	.word	0x20001764
 8003930:	080036e1 	.word	0x080036e1
 8003934:	20001618 	.word	0x20001618
 8003938:	20001760 	.word	0x20001760
 800393c:	f3af 8000 	nop.w

08003940 <kicker_is_ready>:
#include "hal.h"
#include "kicker.h"
#include "chprintf.h"

int8_t kicker_is_ready(void){
	return palReadPad(READY_GPIO, READY_PIN);
 8003940:	4b02      	ldr	r3, [pc, #8]	; (800394c <kicker_is_ready+0xc>)
 8003942:	6918      	ldr	r0, [r3, #16]
}
 8003944:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40020c00 	.word	0x40020c00

08003950 <i_have_ball>:

int8_t i_have_ball(void){
	return palReadPad(BALL_DETECT_GPIO, BALL_DETECT_PIN);
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <i_have_ball+0xc>)
 8003952:	6918      	ldr	r0, [r3, #16]
}
 8003954:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40020c00 	.word	0x40020c00

08003960 <kick>:

void kick(void){
 8003960:	b538      	push	{r3, r4, r5, lr}
	//if(kicker_is_ready()){
		palSetPad(KICK_GPIO, KICK_PIN);
 8003962:	4c04      	ldr	r4, [pc, #16]	; (8003974 <kick+0x14>)
 8003964:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8003968:	8325      	strh	r5, [r4, #24]
		chThdSleepMilliseconds(KICK_DURATION);
 800396a:	2064      	movs	r0, #100	; 0x64
 800396c:	f7fd fc10 	bl	8001190 <chThdSleep>
		palClearPad(KICK_GPIO, KICK_PIN);
 8003970:	8365      	strh	r5, [r4, #26]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	40020800 	.word	0x40020800
 8003978:	f3af 8000 	nop.w
 800397c:	f3af 8000 	nop.w

08003980 <robot_power>:


int16_t robot_power(void){
	//return 50;
	//return ((-ball_distance+650)/4 < 100)? 100 : (-ball_distance+650)/4;
	int16_t a = MAX_ROBOT_POWER - (ball_distance - FAR_POINT)*(MAX_ROBOT_POWER - MIN_ROBOT_POWER)/(NEER_POINT-FAR_POINT); // rychlost_rastu = 4, celkova_rychlost = 650
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <robot_power+0x48>)
 8003982:	4812      	ldr	r0, [pc, #72]	; (80039cc <robot_power+0x4c>)
 8003984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003988:	fb80 2003 	smull	r2, r0, r0, r3
 800398c:	17db      	asrs	r3, r3, #31
 800398e:	eba3 00e0 	sub.w	r0, r3, r0, asr #3
 8003992:	303c      	adds	r0, #60	; 0x3c
 8003994:	b280      	uxth	r0, r0
	if(a > MAX_ROBOT_POWER) a = MAX_ROBOT_POWER;
 8003996:	b203      	sxth	r3, r0
 8003998:	2b3c      	cmp	r3, #60	; 0x3c
 800399a:	dc12      	bgt.n	80039c2 <robot_power+0x42>
	if(a < 0) a = 0;
 800399c:	2b00      	cmp	r3, #0
 800399e:	bfb8      	it	lt
 80039a0:	2000      	movlt	r0, #0
	if(dribler_timer > 0  && dribler_timer < 6) a = 100;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <robot_power+0x50>)
	if(ball_degree == OBJECT_NOT_FOUND) a = MAX_ROBOT_POWER;
 80039a4:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <robot_power+0x54>)
	//return 50;
	//return ((-ball_distance+650)/4 < 100)? 100 : (-ball_distance+650)/4;
	int16_t a = MAX_ROBOT_POWER - (ball_distance - FAR_POINT)*(MAX_ROBOT_POWER - MIN_ROBOT_POWER)/(NEER_POINT-FAR_POINT); // rychlost_rastu = 4, celkova_rychlost = 650
	if(a > MAX_ROBOT_POWER) a = MAX_ROBOT_POWER;
	if(a < 0) a = 0;
	if(dribler_timer > 0  && dribler_timer < 6) a = 100;
 80039a6:	881b      	ldrh	r3, [r3, #0]
	if(ball_degree == OBJECT_NOT_FOUND) a = MAX_ROBOT_POWER;
 80039a8:	f9b2 2000 	ldrsh.w	r2, [r2]
	//return 50;
	//return ((-ball_distance+650)/4 < 100)? 100 : (-ball_distance+650)/4;
	int16_t a = MAX_ROBOT_POWER - (ball_distance - FAR_POINT)*(MAX_ROBOT_POWER - MIN_ROBOT_POWER)/(NEER_POINT-FAR_POINT); // rychlost_rastu = 4, celkova_rychlost = 650
	if(a > MAX_ROBOT_POWER) a = MAX_ROBOT_POWER;
	if(a < 0) a = 0;
	if(dribler_timer > 0  && dribler_timer < 6) a = 100;
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	bf98      	it	ls
 80039b4:	2064      	movls	r0, #100	; 0x64
	if(ball_degree == OBJECT_NOT_FOUND) a = MAX_ROBOT_POWER;
 80039b6:	f5b2 7fd2 	cmp.w	r2, #420	; 0x1a4
 80039ba:	bf08      	it	eq
 80039bc:	203c      	moveq	r0, #60	; 0x3c
	return a;
}
 80039be:	b200      	sxth	r0, r0
 80039c0:	4770      	bx	lr

int16_t robot_power(void){
	//return 50;
	//return ((-ball_distance+650)/4 < 100)? 100 : (-ball_distance+650)/4;
	int16_t a = MAX_ROBOT_POWER - (ball_distance - FAR_POINT)*(MAX_ROBOT_POWER - MIN_ROBOT_POWER)/(NEER_POINT-FAR_POINT); // rychlost_rastu = 4, celkova_rychlost = 650
	if(a > MAX_ROBOT_POWER) a = MAX_ROBOT_POWER;
 80039c2:	203c      	movs	r0, #60	; 0x3c
 80039c4:	e7ed      	b.n	80039a2 <robot_power+0x22>
 80039c6:	bf00      	nop
 80039c8:	20000812 	.word	0x20000812
 80039cc:	66666667 	.word	0x66666667
 80039d0:	200018dc 	.word	0x200018dc
 80039d4:	20000818 	.word	0x20000818
 80039d8:	f3af 8000 	nop.w
 80039dc:	f3af 8000 	nop.w

080039e0 <set_align_speed>:
int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
}

int16_t set_align_speed(int16_t relative_speed){
	if(ball_degree == OBJECT_NOT_FOUND) return relative_speed * set_motor_speed(140-robot_power()) / 180 / 100;
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <set_align_speed+0x54>)

int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
}

int16_t set_align_speed(int16_t relative_speed){
 80039e2:	b510      	push	{r4, lr}
	if(ball_degree == OBJECT_NOT_FOUND) return relative_speed * set_motor_speed(140-robot_power()) / 180 / 100;
 80039e4:	f9b3 3000 	ldrsh.w	r3, [r3]

int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
}

int16_t set_align_speed(int16_t relative_speed){
 80039e8:	4604      	mov	r4, r0
	if(ball_degree == OBJECT_NOT_FOUND) return relative_speed * set_motor_speed(140-robot_power()) / 180 / 100;
 80039ea:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80039ee:	d01a      	beq.n	8003a26 <set_align_speed+0x46>
	return relative_speed * set_motor_speed(100-robot_power()) / 180 / 100;
 80039f0:	f7ff ffc6 	bl	8003980 <robot_power>
	driblers_speeds[0] = 0;
	driblers_speeds[1] = 0;
}

int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
 80039f4:	f240 339b 	movw	r3, #923	; 0x39b
}

int16_t set_align_speed(int16_t relative_speed){
	if(ball_degree == OBJECT_NOT_FOUND) return relative_speed * set_motor_speed(140-robot_power()) / 180 / 100;
	return relative_speed * set_motor_speed(100-robot_power()) / 180 / 100;
 80039f8:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
	driblers_speeds[0] = 0;
	driblers_speeds[1] = 0;
}

int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
 80039fc:	b200      	sxth	r0, r0
 80039fe:	fb03 f000 	mul.w	r0, r3, r0
 8003a02:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <set_align_speed+0x58>)
 8003a04:	17c3      	asrs	r3, r0, #31
 8003a06:	fb82 2000 	smull	r2, r0, r2, r0
 8003a0a:	ebc3 1060 	rsb	r0, r3, r0, asr #5
}

int16_t set_align_speed(int16_t relative_speed){
	if(ball_degree == OBJECT_NOT_FOUND) return relative_speed * set_motor_speed(140-robot_power()) / 180 / 100;
	return relative_speed * set_motor_speed(100-robot_power()) / 180 / 100;
 8003a0e:	b200      	sxth	r0, r0
 8003a10:	fb00 f004 	mul.w	r0, r0, r4
 8003a14:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <set_align_speed+0x5c>)
 8003a16:	17c3      	asrs	r3, r0, #31
 8003a18:	fb82 2000 	smull	r2, r0, r2, r0
 8003a1c:	ebc3 3060 	rsb	r0, r3, r0, asr #13
 8003a20:	b280      	uxth	r0, r0
}
 8003a22:	b200      	sxth	r0, r0
 8003a24:	bd10      	pop	{r4, pc}
int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
}

int16_t set_align_speed(int16_t relative_speed){
	if(ball_degree == OBJECT_NOT_FOUND) return relative_speed * set_motor_speed(140-robot_power()) / 180 / 100;
 8003a26:	f7ff ffab 	bl	8003980 <robot_power>
	driblers_speeds[0] = 0;
	driblers_speeds[1] = 0;
}

int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
 8003a2a:	f240 339b 	movw	r3, #923	; 0x39b
}

int16_t set_align_speed(int16_t relative_speed){
	if(ball_degree == OBJECT_NOT_FOUND) return relative_speed * set_motor_speed(140-robot_power()) / 180 / 100;
 8003a2e:	f1c0 008c 	rsb	r0, r0, #140	; 0x8c
 8003a32:	e7e3      	b.n	80039fc <set_align_speed+0x1c>
 8003a34:	20000818 	.word	0x20000818
 8003a38:	51eb851f 	.word	0x51eb851f
 8003a3c:	7482296b 	.word	0x7482296b

08003a40 <set_movement>:
	return relative_speed * set_motor_speed(100-robot_power()) / 180 / 100;
}

void set_movement(int16_t degree) {
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t p;
	if (degree == 100 || degree == 80) {
 8003a44:	2864      	cmp	r0, #100	; 0x64
int16_t set_align_speed(int16_t relative_speed){
	if(ball_degree == OBJECT_NOT_FOUND) return relative_speed * set_motor_speed(140-robot_power()) / 180 / 100;
	return relative_speed * set_motor_speed(100-robot_power()) / 180 / 100;
}

void set_movement(int16_t degree) {
 8003a46:	b089      	sub	sp, #36	; 0x24
	int8_t p;
	if (degree == 100 || degree == 80) {
 8003a48:	d06f      	beq.n	8003b2a <set_movement+0xea>
 8003a4a:	2850      	cmp	r0, #80	; 0x50
 8003a4c:	d06d      	beq.n	8003b2a <set_movement+0xea>
 8003a4e:	4606      	mov	r6, r0
 8003a50:	381e      	subs	r0, #30
 8003a52:	f7fc fda7 	bl	80005a4 <__aeabi_i2d>
 8003a56:	a338      	add	r3, pc, #224	; (adr r3, 8003b38 <set_movement+0xf8>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f7fc fe08 	bl	8000670 <__aeabi_dmul>
 8003a60:	2200      	movs	r2, #0
 8003a62:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <set_movement+0x100>)
 8003a64:	f7fc ff2e 	bl	80008c4 <__aeabi_ddiv>
 8003a68:	f000 fa52 	bl	8003f10 <sin>
 8003a6c:	ad02      	add	r5, sp, #8
		degree = 90;
	}
	double  maximum_motor_value = 0;
 8003a6e:	f04f 0800 	mov.w	r8, #0
 8003a72:	4604      	mov	r4, r0
 8003a74:	468a      	mov	sl, r1
 8003a76:	46a9      	mov	r9, r5
 8003a78:	46c3      	mov	fp, r8
 8003a7a:	f1a6 0396 	sub.w	r3, r6, #150	; 0x96
 8003a7e:	9301      	str	r3, [sp, #4]
	double  motors_values [NUMBER_OF_MOTORS];
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_values[p] = sin((degree - (90 * (NUMBER_OF_MOTORS - 2 + (4 * p)))
 8003a80:	4626      	mov	r6, r4
 8003a82:	4657      	mov	r7, sl
	if(ball_degree == OBJECT_NOT_FOUND) a = MAX_ROBOT_POWER;
	return a;
}

double abs_value_double(double a) {
	if (a < 0) a *= -1;
 8003a84:	4620      	mov	r0, r4
 8003a86:	4651      	mov	r1, sl
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2300      	movs	r3, #0
		degree = 90;
	}
	double  maximum_motor_value = 0;
	double  motors_values [NUMBER_OF_MOTORS];
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_values[p] = sin((degree - (90 * (NUMBER_OF_MOTORS - 2 + (4 * p)))
 8003a8c:	e8e9 6702 	strd	r6, r7, [r9], #8
	if(ball_degree == OBJECT_NOT_FOUND) a = MAX_ROBOT_POWER;
	return a;
}

double abs_value_double(double a) {
	if (a < 0) a *= -1;
 8003a90:	f7fd f866 	bl	8000b60 <__aeabi_dcmplt>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d13d      	bne.n	8003b14 <set_movement+0xd4>
	double  maximum_motor_value = 0;
	double  motors_values [NUMBER_OF_MOTORS];
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_values[p] = sin((degree - (90 * (NUMBER_OF_MOTORS - 2 + (4 * p)))
							  / NUMBER_OF_MOTORS) * PI / 180);
		if (maximum_motor_value < abs_value_double(motors_values[p])) {
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4653      	mov	r3, sl
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	f7fd f85e 	bl	8000b60 <__aeabi_dcmplt>
 8003aa4:	b148      	cbz	r0, 8003aba <set_movement+0x7a>
	if(ball_degree == OBJECT_NOT_FOUND) a = MAX_ROBOT_POWER;
	return a;
}

double abs_value_double(double a) {
	if (a < 0) a *= -1;
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4620      	mov	r0, r4
 8003aac:	4651      	mov	r1, sl
 8003aae:	f7fd f857 	bl	8000b60 <__aeabi_dcmplt>
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d13d      	bne.n	8003b32 <set_movement+0xf2>
 8003ab6:	46a0      	mov	r8, r4
 8003ab8:	46d3      	mov	fp, sl
	if (degree == 100 || degree == 80) {
		degree = 90;
	}
	double  maximum_motor_value = 0;
	double  motors_values [NUMBER_OF_MOTORS];
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
 8003aba:	ab08      	add	r3, sp, #32
 8003abc:	4599      	cmp	r9, r3
 8003abe:	d014      	beq.n	8003aea <set_movement+0xaa>
 8003ac0:	9c01      	ldr	r4, [sp, #4]
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7fc fd6e 	bl	80005a4 <__aeabi_i2d>
 8003ac8:	a31b      	add	r3, pc, #108	; (adr r3, 8003b38 <set_movement+0xf8>)
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f7fc fdcf 	bl	8000670 <__aeabi_dmul>
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <set_movement+0x100>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f7fc fef5 	bl	80008c4 <__aeabi_ddiv>
 8003ada:	f000 fa19 	bl	8003f10 <sin>
 8003ade:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	468a      	mov	sl, r1
 8003ae8:	e7ca      	b.n	8003a80 <set_movement+0x40>
 8003aea:	4c16      	ldr	r4, [pc, #88]	; (8003b44 <set_movement+0x104>)
			maximum_motor_value = abs_value_double(motors_values[p]);
		}
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] = (int)(motors_values[p] * 1000 / maximum_motor_value);
 8003aec:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003af0:	2200      	movs	r2, #0
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <set_movement+0x108>)
 8003af4:	f7fc fdbc 	bl	8000670 <__aeabi_dmul>
 8003af8:	465b      	mov	r3, fp
 8003afa:	4642      	mov	r2, r8
 8003afc:	f7fc fee2 	bl	80008c4 <__aeabi_ddiv>
 8003b00:	f7fd f856 	bl	8000bb0 <__aeabi_d2iz>
		if (maximum_motor_value < abs_value_double(motors_values[p])) {
			maximum_motor_value = abs_value_double(motors_values[p]);
		}
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
 8003b04:	ab08      	add	r3, sp, #32
 8003b06:	429d      	cmp	r5, r3
		motors_speeds[p] = (int)(motors_values[p] * 1000 / maximum_motor_value);
 8003b08:	f844 0b04 	str.w	r0, [r4], #4
		if (maximum_motor_value < abs_value_double(motors_values[p])) {
			maximum_motor_value = abs_value_double(motors_values[p]);
		}
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
 8003b0c:	d1ee      	bne.n	8003aec <set_movement+0xac>
		motors_speeds[p] = (int)(motors_values[p] * 1000 / maximum_motor_value);
	}
}
 8003b0e:	b009      	add	sp, #36	; 0x24
 8003b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(ball_degree == OBJECT_NOT_FOUND) a = MAX_ROBOT_POWER;
	return a;
}

double abs_value_double(double a) {
	if (a < 0) a *= -1;
 8003b14:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
	double  maximum_motor_value = 0;
	double  motors_values [NUMBER_OF_MOTORS];
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_values[p] = sin((degree - (90 * (NUMBER_OF_MOTORS - 2 + (4 * p)))
							  / NUMBER_OF_MOTORS) * PI / 180);
		if (maximum_motor_value < abs_value_double(motors_values[p])) {
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4642      	mov	r2, r8
 8003b1c:	465b      	mov	r3, fp
 8003b1e:	4651      	mov	r1, sl
 8003b20:	f7fd f83c 	bl	8000b9c <__aeabi_dcmpgt>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d1c6      	bne.n	8003ab6 <set_movement+0x76>
 8003b28:	e7c7      	b.n	8003aba <set_movement+0x7a>
 8003b2a:	4808      	ldr	r0, [pc, #32]	; (8003b4c <set_movement+0x10c>)
 8003b2c:	4908      	ldr	r1, [pc, #32]	; (8003b50 <set_movement+0x110>)
 8003b2e:	265a      	movs	r6, #90	; 0x5a
 8003b30:	e79c      	b.n	8003a6c <set_movement+0x2c>
 8003b32:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
 8003b36:	e7be      	b.n	8003ab6 <set_movement+0x76>
 8003b38:	f01b866e 	.word	0xf01b866e
 8003b3c:	400921f9 	.word	0x400921f9
 8003b40:	40668000 	.word	0x40668000
 8003b44:	200018cc 	.word	0x200018cc
 8003b48:	408f4000 	.word	0x408f4000
 8003b4c:	fae7d1a2 	.word	0xfae7d1a2
 8003b50:	3febb679 	.word	0x3febb679
 8003b54:	f3af 8000 	nop.w
 8003b58:	f3af 8000 	nop.w
 8003b5c:	f3af 8000 	nop.w

08003b60 <correct_motors_speeds>:
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] = (int)(motors_values[p] * 1000 / maximum_motor_value);
	}
}

void correct_motors_speeds(int8_t align_type) {
 8003b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t p;
	int32_t max = 0;
	int16_t actual_azimuth = 0;
	//actual_azimuth = -ball_degree;
	/*if(have_ball > 0)*/ actual_azimuth = -goal_degree;
 8003b64:	4b51      	ldr	r3, [pc, #324]	; (8003cac <correct_motors_speeds+0x14c>)
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] = (int)(motors_values[p] * 1000 / maximum_motor_value);
	}
}

void correct_motors_speeds(int8_t align_type) {
 8003b66:	4606      	mov	r6, r0
	int8_t p;
	int32_t max = 0;
	int16_t actual_azimuth = 0;
	//actual_azimuth = -ball_degree;
	/*if(have_ball > 0)*/ actual_azimuth = -goal_degree;
 8003b68:	881c      	ldrh	r4, [r3, #0]
 8003b6a:	4264      	negs	r4, r4
 8003b6c:	b2a4      	uxth	r4, r4
 8003b6e:	b2a3      	uxth	r3, r4

	if(actual_azimuth == -OBJECT_NOT_FOUND) {
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	f512 7fd2 	cmn.w	r2, #420	; 0x1a4
 8003b76:	d072      	beq.n	8003c5e <correct_motors_speeds+0xfe>
			//if(align_type == CLASSIC_ALIGN) actual_azimuth /= 3;
		} else {
			actual_azimuth = SEARCH_SPEED;
		}
	} else {
		old_azimuth = actual_azimuth;
 8003b78:	494d      	ldr	r1, [pc, #308]	; (8003cb0 <correct_motors_speeds+0x150>)
	}
	//if(old_azimuth > 0 && align_type == CLASSIC_ALIGN) actual_azimuth /= 2;
	if(align_type == BASIC_ALIGN) {
 8003b7a:	2801      	cmp	r0, #1
			//if(align_type == CLASSIC_ALIGN) actual_azimuth /= 3;
		} else {
			actual_azimuth = SEARCH_SPEED;
		}
	} else {
		old_azimuth = actual_azimuth;
 8003b7c:	800b      	strh	r3, [r1, #0]
	}
	//if(old_azimuth > 0 && align_type == CLASSIC_ALIGN) actual_azimuth /= 2;
	if(align_type == BASIC_ALIGN) {
 8003b7e:	d069      	beq.n	8003c54 <correct_motors_speeds+0xf4>
		if(actual_azimuth > 5) actual_azimuth = SEARCH_SPEED;
		else if(actual_azimuth < -5) actual_azimuth = -SEARCH_SPEED;
	} else if(align_type == NOT_ALIGN){
 8003b80:	2e03      	cmp	r6, #3
 8003b82:	d065      	beq.n	8003c50 <correct_motors_speeds+0xf0>
 8003b84:	b29c      	uxth	r4, r3
		actual_azimuth = 0;
	}
	
    actual_azimuth *= set_align_speed(ALIGN_POWER);
 8003b86:	2064      	movs	r0, #100	; 0x64
 8003b88:	f7ff ff2a 	bl	80039e0 <set_align_speed>
 8003b8c:	4d49      	ldr	r5, [pc, #292]	; (8003cb4 <correct_motors_speeds+0x154>)
 8003b8e:	fb00 f004 	mul.w	r0, r0, r4
 8003b92:	46ab      	mov	fp, r5
 8003b94:	4629      	mov	r1, r5
 8003b96:	b284      	uxth	r4, r0
 8003b98:	f105 070c 	add.w	r7, r5, #12
	}
}

void correct_motors_speeds(int8_t align_type) {
	int8_t p;
	int32_t max = 0;
 8003b9c:	f04f 0a00 	mov.w	sl, #0
	}
	
    actual_azimuth *= set_align_speed(ALIGN_POWER);
	
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		if (abs_value_int(motors_speeds[p]) > max) {
 8003ba0:	f851 3b04 	ldr.w	r3, [r1], #4
	if (a < 0) a *= -1;
	return a;
}

int16_t abs_value_int(int16_t a) {
	if (a < 0) a *= -1;
 8003ba4:	b218      	sxth	r0, r3
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	db4c      	blt.n	8003c44 <correct_motors_speeds+0xe4>
	}
	
    actual_azimuth *= set_align_speed(ALIGN_POWER);
	
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		if (abs_value_int(motors_speeds[p]) > max) {
 8003baa:	4582      	cmp	sl, r0
 8003bac:	bfb8      	it	lt
 8003bae:	4682      	movlt	sl, r0
		actual_azimuth = 0;
	}
	
    actual_azimuth *= set_align_speed(ALIGN_POWER);
	
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
 8003bb0:	42b9      	cmp	r1, r7
 8003bb2:	d1f5      	bne.n	8003ba0 <correct_motors_speeds+0x40>
	driblers_speeds[0] = 0;
	driblers_speeds[1] = 0;
}

int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
 8003bb4:	f240 389b 	movw	r8, #923	; 0x39b
		actual_azimuth = 0;
	}
	
    actual_azimuth *= set_align_speed(ALIGN_POWER);
	
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
 8003bb8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003cb4 <correct_motors_speeds+0x154>
 8003bbc:	b224      	sxth	r4, r4
			max = abs_value_int(motors_speeds[p]);
		}
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] = motors_speeds[p] * (set_motor_speed(robot_power()) - actual_azimuth) / max;
 8003bbe:	f7ff fedf 	bl	8003980 <robot_power>
	driblers_speeds[0] = 0;
	driblers_speeds[1] = 0;
}

int16_t set_motor_speed(int16_t relative_speed) {
	return relative_speed * MAX_SPEED / 100;
 8003bc2:	fb08 f000 	mul.w	r0, r8, r0
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <correct_motors_speeds+0x158>)
 8003bc8:	fb83 2300 	smull	r2, r3, r3, r0
 8003bcc:	17c0      	asrs	r0, r0, #31
 8003bce:	ebc0 1063 	rsb	r0, r0, r3, asr #5
			max = abs_value_int(motors_speeds[p]);
		}
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] = motors_speeds[p] * (set_motor_speed(robot_power()) - actual_azimuth) / max;
 8003bd2:	b200      	sxth	r0, r0
 8003bd4:	f8d9 3000 	ldr.w	r3, [r9]
 8003bd8:	1b00      	subs	r0, r0, r4
 8003bda:	fb03 f000 	mul.w	r0, r3, r0
 8003bde:	fb90 f0fa 	sdiv	r0, r0, sl
 8003be2:	f849 0b04 	str.w	r0, [r9], #4
		if (abs_value_int(motors_speeds[p]) > max) {
			max = abs_value_int(motors_speeds[p]);
		}
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
 8003be6:	45b9      	cmp	r9, r7
 8003be8:	d1e9      	bne.n	8003bbe <correct_motors_speeds+0x5e>
		motors_speeds[p] = motors_speeds[p] * (set_motor_speed(robot_power()) - actual_azimuth) / max;
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] += actual_azimuth;
 8003bea:	f8db 3000 	ldr.w	r3, [fp]
 8003bee:	f8db 2004 	ldr.w	r2, [fp, #4]
 8003bf2:	f8db 1008 	ldr.w	r1, [fp, #8]
 8003bf6:	4422      	add	r2, r4
 8003bf8:	4423      	add	r3, r4
 8003bfa:	440c      	add	r4, r1
 8003bfc:	f8cb 2004 	str.w	r2, [fp, #4]
 8003c00:	f8cb 3000 	str.w	r3, [fp]
 8003c04:	f8cb 4008 	str.w	r4, [fp, #8]
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <correct_motors_speeds+0x154>)
	}
	
	if(align_type == AROUND_BALL_ALIGN) {
 8003c0a:	b92e      	cbnz	r6, 8003c18 <correct_motors_speeds+0xb8>
		motors_speeds[0] = 0;
		motors_speeds[1] = 0;
		motors_speeds[2] *= 3;
 8003c0c:	4633      	mov	r3, r6
 8003c0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003c12:	6094      	str	r4, [r2, #8]
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] += actual_azimuth;
	}
	
	if(align_type == AROUND_BALL_ALIGN) {
		motors_speeds[0] = 0;
 8003c14:	6016      	str	r6, [r2, #0]
		motors_speeds[1] = 0;
 8003c16:	6056      	str	r6, [r2, #4]
		motors_speeds[2] *= 3;
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p ++) {
		if (motors_speeds[p] > 0) {
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	4928      	ldr	r1, [pc, #160]	; (8003cbc <correct_motors_speeds+0x15c>)
			motors_speeds[p] += 1125;
 8003c1c:	f203 4265 	addw	r2, r3, #1125	; 0x465
		motors_speeds[1] = 0;
		motors_speeds[2] *= 3;
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p ++) {
		if (motors_speeds[p] > 0) {
 8003c20:	dd08      	ble.n	8003c34 <correct_motors_speeds+0xd4>
		motors_speeds[0] = 0;
		motors_speeds[1] = 0;
		motors_speeds[2] *= 3;
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p ++) {
 8003c22:	428d      	cmp	r5, r1
		if (motors_speeds[p] > 0) {
			motors_speeds[p] += 1125;
 8003c24:	602a      	str	r2, [r5, #0]
		motors_speeds[0] = 0;
		motors_speeds[1] = 0;
		motors_speeds[2] *= 3;
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p ++) {
 8003c26:	d00b      	beq.n	8003c40 <correct_motors_speeds+0xe0>
 8003c28:	f855 3f04 	ldr.w	r3, [r5, #4]!
		if (motors_speeds[p] > 0) {
 8003c2c:	2b00      	cmp	r3, #0
			motors_speeds[p] += 1125;
 8003c2e:	f203 4265 	addw	r2, r3, #1125	; 0x465
		motors_speeds[1] = 0;
		motors_speeds[2] *= 3;
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p ++) {
		if (motors_speeds[p] > 0) {
 8003c32:	dcf6      	bgt.n	8003c22 <correct_motors_speeds+0xc2>
			motors_speeds[p] += 1125;
		} else if (motors_speeds[p] < 0) {
			motors_speeds[p] -= 1125;
 8003c34:	bf1c      	itt	ne
 8003c36:	f2a3 4365 	subwne	r3, r3, #1125	; 0x465
 8003c3a:	602b      	strne	r3, [r5, #0]
		motors_speeds[0] = 0;
		motors_speeds[1] = 0;
		motors_speeds[2] *= 3;
	}

	for (p = 0; p < NUMBER_OF_MOTORS; p ++) {
 8003c3c:	428d      	cmp	r5, r1
 8003c3e:	d1f3      	bne.n	8003c28 <correct_motors_speeds+0xc8>
 8003c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (a < 0) a *= -1;
	return a;
}

int16_t abs_value_int(int16_t a) {
	if (a < 0) a *= -1;
 8003c44:	425b      	negs	r3, r3
	}
	
    actual_azimuth *= set_align_speed(ALIGN_POWER);
	
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		if (abs_value_int(motors_speeds[p]) > max) {
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	459a      	cmp	sl, r3
 8003c4a:	bfb8      	it	lt
 8003c4c:	469a      	movlt	sl, r3
 8003c4e:	e7af      	b.n	8003bb0 <correct_motors_speeds+0x50>
 8003c50:	2400      	movs	r4, #0
 8003c52:	e798      	b.n	8003b86 <correct_motors_speeds+0x26>
	} else {
		old_azimuth = actual_azimuth;
	}
	//if(old_azimuth > 0 && align_type == CLASSIC_ALIGN) actual_azimuth /= 2;
	if(align_type == BASIC_ALIGN) {
		if(actual_azimuth > 5) actual_azimuth = SEARCH_SPEED;
 8003c54:	2a05      	cmp	r2, #5
 8003c56:	dd15      	ble.n	8003c84 <correct_motors_speeds+0x124>
 8003c58:	243c      	movs	r4, #60	; 0x3c
 8003c5a:	2601      	movs	r6, #1
 8003c5c:	e793      	b.n	8003b86 <correct_motors_speeds+0x26>
	//actual_azimuth = -ball_degree;
	/*if(have_ball > 0)*/ actual_azimuth = -goal_degree;

	if(actual_azimuth == -OBJECT_NOT_FOUND) {
		//motors_off();
		if(have_ball > 0) align_type = AROUND_BALL_ALIGN;
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <correct_motors_speeds+0x160>)
 8003c60:	f993 3000 	ldrsb.w	r3, [r3]
 8003c64:	2b00      	cmp	r3, #0
		if(old_azimuth < 0) {
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <correct_motors_speeds+0x150>)
 8003c68:	f9b3 3000 	ldrsh.w	r3, [r3]
	//actual_azimuth = -ball_degree;
	/*if(have_ball > 0)*/ actual_azimuth = -goal_degree;

	if(actual_azimuth == -OBJECT_NOT_FOUND) {
		//motors_off();
		if(have_ball > 0) align_type = AROUND_BALL_ALIGN;
 8003c6c:	dd04      	ble.n	8003c78 <correct_motors_speeds+0x118>
		if(old_azimuth < 0) {
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	db0f      	blt.n	8003c92 <correct_motors_speeds+0x132>
 8003c72:	233c      	movs	r3, #60	; 0x3c
	//actual_azimuth = -ball_degree;
	/*if(have_ball > 0)*/ actual_azimuth = -goal_degree;

	if(actual_azimuth == -OBJECT_NOT_FOUND) {
		//motors_off();
		if(have_ball > 0) align_type = AROUND_BALL_ALIGN;
 8003c74:	2600      	movs	r6, #0
 8003c76:	e785      	b.n	8003b84 <correct_motors_speeds+0x24>
		if(old_azimuth < 0) {
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db0e      	blt.n	8003c9a <correct_motors_speeds+0x13a>
		}
	} else {
		old_azimuth = actual_azimuth;
	}
	//if(old_azimuth > 0 && align_type == CLASSIC_ALIGN) actual_azimuth /= 2;
	if(align_type == BASIC_ALIGN) {
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d0eb      	beq.n	8003c58 <correct_motors_speeds+0xf8>
 8003c80:	233c      	movs	r3, #60	; 0x3c
 8003c82:	e77d      	b.n	8003b80 <correct_motors_speeds+0x20>
 8003c84:	f64f 73c4 	movw	r3, #65476	; 0xffc4
 8003c88:	f112 0f05 	cmn.w	r2, #5
 8003c8c:	bfb8      	it	lt
 8003c8e:	461c      	movlt	r4, r3
 8003c90:	e779      	b.n	8003b86 <correct_motors_speeds+0x26>
	/*if(have_ball > 0)*/ actual_azimuth = -goal_degree;

	if(actual_azimuth == -OBJECT_NOT_FOUND) {
		//motors_off();
		if(have_ball > 0) align_type = AROUND_BALL_ALIGN;
		if(old_azimuth < 0) {
 8003c92:	f64f 74c4 	movw	r4, #65476	; 0xffc4
	//actual_azimuth = -ball_degree;
	/*if(have_ball > 0)*/ actual_azimuth = -goal_degree;

	if(actual_azimuth == -OBJECT_NOT_FOUND) {
		//motors_off();
		if(have_ball > 0) align_type = AROUND_BALL_ALIGN;
 8003c96:	2600      	movs	r6, #0
 8003c98:	e775      	b.n	8003b86 <correct_motors_speeds+0x26>
		}
	} else {
		old_azimuth = actual_azimuth;
	}
	//if(old_azimuth > 0 && align_type == CLASSIC_ALIGN) actual_azimuth /= 2;
	if(align_type == BASIC_ALIGN) {
 8003c9a:	2801      	cmp	r0, #1
 8003c9c:	d002      	beq.n	8003ca4 <correct_motors_speeds+0x144>

	if(actual_azimuth == -OBJECT_NOT_FOUND) {
		//motors_off();
		if(have_ball > 0) align_type = AROUND_BALL_ALIGN;
		if(old_azimuth < 0) {
			actual_azimuth = -SEARCH_SPEED;
 8003c9e:	f64f 73c4 	movw	r3, #65476	; 0xffc4
 8003ca2:	e76d      	b.n	8003b80 <correct_motors_speeds+0x20>
		}
	} else {
		old_azimuth = actual_azimuth;
	}
	//if(old_azimuth > 0 && align_type == CLASSIC_ALIGN) actual_azimuth /= 2;
	if(align_type == BASIC_ALIGN) {
 8003ca4:	f64f 74c4 	movw	r4, #65476	; 0xffc4
 8003ca8:	e76d      	b.n	8003b86 <correct_motors_speeds+0x26>
 8003caa:	bf00      	nop
 8003cac:	20000816 	.word	0x20000816
 8003cb0:	200018d8 	.word	0x200018d8
 8003cb4:	200018cc 	.word	0x200018cc
 8003cb8:	51eb851f 	.word	0x51eb851f
 8003cbc:	200018d4 	.word	0x200018d4
 8003cc0:	200018de 	.word	0x200018de
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	f3af 8000 	nop.w
 8003ccc:	f3af 8000 	nop.w

08003cd0 <line>:
		return (2*ball_degree-90+360) % 360;
	}
	return ball_degree;
}

int16_t line(void) {
 8003cd0:	b508      	push	{r3, lr}
	int16_t degree = check_line();
 8003cd2:	f7ff fcad 	bl	8003630 <check_line>
	if (degree == -1){
 8003cd6:	1c43      	adds	r3, r0, #1
		if (line_timer > 0) {
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <line+0x34>)
	return ball_degree;
}

int16_t line(void) {
	int16_t degree = check_line();
	if (degree == -1){
 8003cda:	d005      	beq.n	8003ce8 <line+0x18>
		} else {
			return degree;
		}
	} else {
		line_timer = LINE_REACTION_TIME;
		old_line = degree;
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <line+0x38>)
			return old_line;
		} else {
			return degree;
		}
	} else {
		line_timer = LINE_REACTION_TIME;
 8003cde:	210a      	movs	r1, #10
 8003ce0:	8011      	strh	r1, [r2, #0]
		old_line = degree;
 8003ce2:	8018      	strh	r0, [r3, #0]
		return degree;
	}
}
 8003ce4:	b200      	sxth	r0, r0
 8003ce6:	bd08      	pop	{r3, pc}
}

int16_t line(void) {
	int16_t degree = check_line();
	if (degree == -1){
		if (line_timer > 0) {
 8003ce8:	8813      	ldrh	r3, [r2, #0]
 8003cea:	b219      	sxth	r1, r3
 8003cec:	2900      	cmp	r1, #0
 8003cee:	dd05      	ble.n	8003cfc <line+0x2c>
			line_timer --;
			return old_line;
 8003cf0:	4905      	ldr	r1, [pc, #20]	; (8003d08 <line+0x38>)

int16_t line(void) {
	int16_t degree = check_line();
	if (degree == -1){
		if (line_timer > 0) {
			line_timer --;
 8003cf2:	3b01      	subs	r3, #1
			return old_line;
 8003cf4:	8808      	ldrh	r0, [r1, #0]

int16_t line(void) {
	int16_t degree = check_line();
	if (degree == -1){
		if (line_timer > 0) {
			line_timer --;
 8003cf6:	8013      	strh	r3, [r2, #0]
	} else {
		line_timer = LINE_REACTION_TIME;
		old_line = degree;
		return degree;
	}
}
 8003cf8:	b200      	sxth	r0, r0
 8003cfa:	bd08      	pop	{r3, pc}
 8003cfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003d00:	e7f0      	b.n	8003ce4 <line+0x14>
 8003d02:	bf00      	nop
 8003d04:	200018c8 	.word	0x200018c8
 8003d08:	200018da 	.word	0x200018da
 8003d0c:	f3af 8000 	nop.w

08003d10 <main>:

int main(void) {
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	b083      	sub	sp, #12
	halInit();
 8003d16:	f7fd fd3b 	bl	8001790 <halInit>
 8003d1a:	4e6f      	ldr	r6, [pc, #444]	; (8003ed8 <main+0x1c8>)
	chSysInit();
 8003d1c:	f7fc ffc0 	bl	8000ca0 <chSysInit>
 8003d20:	4f6e      	ldr	r7, [pc, #440]	; (8003edc <main+0x1cc>)

	board_init();
 8003d22:	f7ff f9cd 	bl	80030c0 <board_init>
 8003d26:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8003efc <main+0x1ec>

	motors_init();
 8003d2a:	f7ff fa89 	bl	8003240 <motors_init>
 8003d2e:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8003f00 <main+0x1f0>
	lines_init();
 8003d32:	f7ff fc8d 	bl	8003650 <lines_init>
 8003d36:	4c6a      	ldr	r4, [pc, #424]	; (8003ee0 <main+0x1d0>)
	compass_init();
 8003d38:	f7ff fafa 	bl	8003330 <compass_init>
 8003d3c:	4d69      	ldr	r5, [pc, #420]	; (8003ee4 <main+0x1d4>)
	camera_init();
 8003d3e:	f7ff fdd7 	bl	80038f0 <camera_init>
 8003d42:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8003ef0 <main+0x1e0>
 8003d46:	e06f      	b.n	8003e28 <main+0x118>
		
		using_align = CLASSIC_ALIGN;
		
		if(get_start()){

			if(lines_state == NO_LINE_DETECTED) {
 8003d48:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003d4c:	f040 80ac 	bne.w	8003ea8 <main+0x198>
				if (ball_degree == OBJECT_NOT_FOUND) {
 8003d50:	8830      	ldrh	r0, [r6, #0]
 8003d52:	f5b0 7fd2 	cmp.w	r0, #420	; 0x1a4
 8003d56:	f000 80ba 	beq.w	8003ece <main+0x1be>
		}
	}
}

int16_t ball_bypass(int16_t ball_degree, int16_t ball_distance){
	if (ball_distance > 50) {
 8003d5a:	f9bb 3000 	ldrsh.w	r3, [fp]

			if(lines_state == NO_LINE_DETECTED) {
				if (ball_degree == OBJECT_NOT_FOUND) {
					set_movement(270);
				} else {
					set_movement(ball_bypass(90 - ball_degree, ball_distance));
 8003d5e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
		}
	}
}

int16_t ball_bypass(int16_t ball_degree, int16_t ball_distance){
	if (ball_distance > 50) {
 8003d62:	2b32      	cmp	r3, #50	; 0x32

			if(lines_state == NO_LINE_DETECTED) {
				if (ball_degree == OBJECT_NOT_FOUND) {
					set_movement(270);
				} else {
					set_movement(ball_bypass(90 - ball_degree, ball_distance));
 8003d64:	b280      	uxth	r0, r0
		}
	}
}

int16_t ball_bypass(int16_t ball_degree, int16_t ball_distance){
	if (ball_distance > 50) {
 8003d66:	dd0e      	ble.n	8003d86 <main+0x76>
		return (2*ball_degree-90+360) % 360;
 8003d68:	b203      	sxth	r3, r0
 8003d6a:	4a5f      	ldr	r2, [pc, #380]	; (8003ee8 <main+0x1d8>)
 8003d6c:	3387      	adds	r3, #135	; 0x87
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fb83 0102 	smull	r0, r1, r3, r2
 8003d74:	17da      	asrs	r2, r3, #31
 8003d76:	1858      	adds	r0, r3, r1
 8003d78:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8003d7c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8003d80:	fb00 3012 	mls	r0, r0, r2, r3
 8003d84:	b280      	uxth	r0, r0

			if(lines_state == NO_LINE_DETECTED) {
				if (ball_degree == OBJECT_NOT_FOUND) {
					set_movement(270);
				} else {
					set_movement(ball_bypass(90 - ball_degree, ball_distance));
 8003d86:	b200      	sxth	r0, r0
 8003d88:	f7ff fe5a 	bl	8003a40 <set_movement>
}

void dribler_on(void){
	palClearPad(GPIOD, 9);
	driblers_speeds[0] = DRIBLER_SPEED;
	driblers_speeds[1] = -DRIBLER_SPEED;
 8003d8c:	f64f 12c0 	movw	r2, #63936	; 0xf9c0
		motors_speeds[p] = 0;
	}
}

void dribler_on(void){
	palClearPad(GPIOD, 9);
 8003d90:	4b56      	ldr	r3, [pc, #344]	; (8003eec <main+0x1dc>)
 8003d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d96:	8359      	strh	r1, [r3, #26]
				set_movement(lines_state);
			}

			//align();
			dribler_on();
			correct_motors_speeds(using_align);
 8003d98:	f99a 0000 	ldrsb.w	r0, [sl]
	}
}

void dribler_on(void){
	palClearPad(GPIOD, 9);
	driblers_speeds[0] = DRIBLER_SPEED;
 8003d9c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
	driblers_speeds[1] = -DRIBLER_SPEED;
 8003da0:	8062      	strh	r2, [r4, #2]
	}
}

void dribler_on(void){
	palClearPad(GPIOD, 9);
	driblers_speeds[0] = DRIBLER_SPEED;
 8003da2:	8023      	strh	r3, [r4, #0]
				set_movement(lines_state);
			}

			//align();
			dribler_on();
			correct_motors_speeds(using_align);
 8003da4:	f7ff fedc 	bl	8003b60 <correct_motors_speeds>
			dribler_off();
			motors_off();
		}
		//correct_motors_speeds();

		if((have_ball > 0 && kicker_is_ready() && /*abs_value_int(goal_degree) < SHOOTING_RANGE &&*/ get_shooting_event()) || dribler_timer > 0) {
 8003da8:	f997 3000 	ldrsb.w	r3, [r7]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	dd04      	ble.n	8003dba <main+0xaa>
 8003db0:	f7ff fdc6 	bl	8003940 <kicker_is_ready>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	f040 8081 	bne.w	8003ebc <main+0x1ac>
 8003dba:	f9b9 3000 	ldrsh.w	r3, [r9]
 8003dbe:	4a4c      	ldr	r2, [pc, #304]	; (8003ef0 <main+0x1e0>)
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	dd75      	ble.n	8003eb0 <main+0x1a0>
	driblers_speeds[0] = DRIBLER_SPEED;
	driblers_speeds[1] = -DRIBLER_SPEED;
}

void dribler_off(void) {
	palSetPad(GPIOD, 9);
 8003dc4:	4b49      	ldr	r3, [pc, #292]	; (8003eec <main+0x1dc>)
 8003dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dca:	831a      	strh	r2, [r3, #24]
		}
		//correct_motors_speeds();

		if((have_ball > 0 && kicker_is_ready() && /*abs_value_int(goal_degree) < SHOOTING_RANGE &&*/ get_shooting_event()) || dribler_timer > 0) {
			dribler_off();
			set_movement(90);
 8003dcc:	205a      	movs	r0, #90	; 0x5a
	driblers_speeds[1] = -DRIBLER_SPEED;
}

void dribler_off(void) {
	palSetPad(GPIOD, 9);
	driblers_speeds[0] = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	8023      	strh	r3, [r4, #0]
	driblers_speeds[1] = 0;
 8003dd2:	8063      	strh	r3, [r4, #2]
		}
		//correct_motors_speeds();

		if((have_ball > 0 && kicker_is_ready() && /*abs_value_int(goal_degree) < SHOOTING_RANGE &&*/ get_shooting_event()) || dribler_timer > 0) {
			dribler_off();
			set_movement(90);
 8003dd4:	f7ff fe34 	bl	8003a40 <set_movement>
			correct_motors_speeds(CLASSIC_ALIGN);
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f7ff fec1 	bl	8003b60 <correct_motors_speeds>
			if(dribler_timer > 0 ){
 8003dde:	f8b9 3000 	ldrh.w	r3, [r9]
 8003de2:	4943      	ldr	r1, [pc, #268]	; (8003ef0 <main+0x1e0>)
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	2a00      	cmp	r2, #0
 8003de8:	dd65      	ble.n	8003eb6 <main+0x1a6>
				dribler_timer--;
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29b      	uxth	r3, r3
			} else {
				dribler_timer = DRIBLER_REACTION_TIME;
			}
			//change_motors_speeds(0, 0, 0, 0, 0, MASTER_THREAD_ID);
			if(dribler_timer == 1) {
 8003dee:	2b01      	cmp	r3, #1
		if((have_ball > 0 && kicker_is_ready() && /*abs_value_int(goal_degree) < SHOOTING_RANGE &&*/ get_shooting_event()) || dribler_timer > 0) {
			dribler_off();
			set_movement(90);
			correct_motors_speeds(CLASSIC_ALIGN);
			if(dribler_timer > 0 ){
				dribler_timer--;
 8003df0:	800b      	strh	r3, [r1, #0]
			} else {
				dribler_timer = DRIBLER_REACTION_TIME;
			}
			//change_motors_speeds(0, 0, 0, 0, 0, MASTER_THREAD_ID);
			if(dribler_timer == 1) {
 8003df2:	d069      	beq.n	8003ec8 <main+0x1b8>
				kick();
			}
		} else {
			dribler_timer = 0;
		}
		change_motors_speeds(motors_speeds[0], motors_speeds[1], motors_speeds[2],
 8003df4:	f9b4 c002 	ldrsh.w	ip, [r4, #2]
 8003df8:	f04f 0e01 	mov.w	lr, #1
 8003dfc:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8003e00:	f9b4 3000 	ldrsh.w	r3, [r4]
 8003e04:	f9b5 0000 	ldrsh.w	r0, [r5]
 8003e08:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8003e0c:	e88d 5000 	stmia.w	sp, {ip, lr}
 8003e10:	f7ff f9fe 	bl	8003210 <change_motors_speeds>
								 driblers_speeds[0], driblers_speeds[1], MASTER_THREAD_ID);
		//change_motors_speeds(2048, -2048, 0, 0, 0, MASTER_THREAD_ID); //ultimate speed
		if(have_ball > 0) have_ball--;
 8003e14:	783b      	ldrb	r3, [r7, #0]
 8003e16:	b25a      	sxtb	r2, r3
 8003e18:	2a00      	cmp	r2, #0
 8003e1a:	dd02      	ble.n	8003e22 <main+0x112>
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <main+0x1cc>)
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	7013      	strb	r3, [r2, #0]
		chThdSleepMilliseconds(10);//musim si odichnut
 8003e22:	2064      	movs	r0, #100	; 0x64
 8003e24:	f7fd f9b4 	bl	8001190 <chThdSleep>
	compass_init();
	camera_init();

	int16_t lines_state;
	while (1) {
		get_camera_values();
 8003e28:	f7ff fc8a 	bl	8003740 <get_camera_values>
		lines_state = line();
 8003e2c:	f7ff ff50 	bl	8003cd0 <line>
 8003e30:	4680      	mov	r8, r0
		
		ball_degree = get_ball_degree();
 8003e32:	f7ff fc9d 	bl	8003770 <get_ball_degree>
 8003e36:	8030      	strh	r0, [r6, #0]
		ball_distance = get_ball_distance();
 8003e38:	f7ff fca2 	bl	8003780 <get_ball_distance>
 8003e3c:	f8ab 0000 	strh.w	r0, [fp]
		goal_degree = get_goal_degree();
 8003e40:	f7ff fc86 	bl	8003750 <get_goal_degree>
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <main+0x1e4>)
 8003e46:	8018      	strh	r0, [r3, #0]
		goal_distance = get_goal_distance();
 8003e48:	f7ff fc8a 	bl	8003760 <get_goal_distance>
		
		//move to center
		if(ball_degree != OBJECT_NOT_FOUND) ball_degree -= CAMERA_CENTER;
 8003e4c:	8833      	ldrh	r3, [r6, #0]
		lines_state = line();
		
		ball_degree = get_ball_degree();
		ball_distance = get_ball_distance();
		goal_degree = get_goal_degree();
		goal_distance = get_goal_distance();
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <main+0x1e8>)
		
		//move to center
		if(ball_degree != OBJECT_NOT_FOUND) ball_degree -= CAMERA_CENTER;
 8003e50:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
		lines_state = line();
		
		ball_degree = get_ball_degree();
		ball_distance = get_ball_distance();
		goal_degree = get_goal_degree();
		goal_distance = get_goal_distance();
 8003e54:	8010      	strh	r0, [r2, #0]
		
		//move to center
		if(ball_degree != OBJECT_NOT_FOUND) ball_degree -= CAMERA_CENTER;
 8003e56:	d002      	beq.n	8003e5e <main+0x14e>
 8003e58:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <main+0x1c8>)
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	8013      	strh	r3, [r2, #0]
		//if(goal_degree != OBJECT_NOT_FOUND) goal_degree -= CAMERA_CENTER;

		if(i_have_ball() && abs_value_int(ball_degree) < HAVING_BALL_RANGE){
 8003e5e:	f7ff fd77 	bl	8003950 <i_have_ball>
 8003e62:	b178      	cbz	r0, 8003e84 <main+0x174>
 8003e64:	8832      	ldrh	r2, [r6, #0]
	if (a < 0) a *= -1;
	return a;
}

int16_t abs_value_int(int16_t a) {
	if (a < 0) a *= -1;
 8003e66:	b213      	sxth	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bfbc      	itt	lt
 8003e6c:	4253      	neglt	r3, r2
 8003e6e:	b21b      	sxthlt	r3, r3
		
		//move to center
		if(ball_degree != OBJECT_NOT_FOUND) ball_degree -= CAMERA_CENTER;
		//if(goal_degree != OBJECT_NOT_FOUND) goal_degree -= CAMERA_CENTER;

		if(i_have_ball() && abs_value_int(ball_degree) < HAVING_BALL_RANGE){
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	dc07      	bgt.n	8003e84 <main+0x174>
			if(have_ball > 3) have_ball = 13;
 8003e74:	f997 3000 	ldrsb.w	r3, [r7]
			else have_ball = 8;
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <main+0x1cc>)
		//move to center
		if(ball_degree != OBJECT_NOT_FOUND) ball_degree -= CAMERA_CENTER;
		//if(goal_degree != OBJECT_NOT_FOUND) goal_degree -= CAMERA_CENTER;

		if(i_have_ball() && abs_value_int(ball_degree) < HAVING_BALL_RANGE){
			if(have_ball > 3) have_ball = 13;
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	bfcc      	ite	gt
 8003e7e:	230d      	movgt	r3, #13
			else have_ball = 8;
 8003e80:	2308      	movle	r3, #8
 8003e82:	7013      	strb	r3, [r2, #0]
		}
		
		using_align = CLASSIC_ALIGN;
 8003e84:	2302      	movs	r3, #2
 8003e86:	f88a 3000 	strb.w	r3, [sl]
		
		if(get_start()){
 8003e8a:	f7ff fc81 	bl	8003790 <get_start>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	f47f af5a 	bne.w	8003d48 <main+0x38>
	driblers_speeds[0] = DRIBLER_SPEED;
	driblers_speeds[1] = -DRIBLER_SPEED;
}

void dribler_off(void) {
	palSetPad(GPIOD, 9);
 8003e94:	4b15      	ldr	r3, [pc, #84]	; (8003eec <main+0x1dc>)
 8003e96:	f44f 7200 	mov.w	r2, #512	; 0x200
	driblers_speeds[0] = 0;
	driblers_speeds[1] = 0;
 8003e9a:	8060      	strh	r0, [r4, #2]
}

void motors_off(void) {
	int8_t p;
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] = 0;
 8003e9c:	6068      	str	r0, [r5, #4]
 8003e9e:	60a8      	str	r0, [r5, #8]
	driblers_speeds[0] = DRIBLER_SPEED;
	driblers_speeds[1] = -DRIBLER_SPEED;
}

void dribler_off(void) {
	palSetPad(GPIOD, 9);
 8003ea0:	831a      	strh	r2, [r3, #24]
	driblers_speeds[0] = 0;
 8003ea2:	8020      	strh	r0, [r4, #0]
}

void motors_off(void) {
	int8_t p;
	for (p = 0; p < NUMBER_OF_MOTORS; p++) {
		motors_speeds[p] = 0;
 8003ea4:	6028      	str	r0, [r5, #0]
 8003ea6:	e77f      	b.n	8003da8 <main+0x98>
					}
				}*/
				//using_align = NOT_ALIGN;
				//motors_off();
			} else {
				set_movement(lines_state);
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	f7ff fdc9 	bl	8003a40 <set_movement>
 8003eae:	e76d      	b.n	8003d8c <main+0x7c>
			if(dribler_timer == 1) {
				//chThdSleepMilliseconds(200);
				kick();
			}
		} else {
			dribler_timer = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	8013      	strh	r3, [r2, #0]
 8003eb4:	e79e      	b.n	8003df4 <main+0xe4>
			set_movement(90);
			correct_motors_speeds(CLASSIC_ALIGN);
			if(dribler_timer > 0 ){
				dribler_timer--;
			} else {
				dribler_timer = DRIBLER_REACTION_TIME;
 8003eb6:	2306      	movs	r3, #6
 8003eb8:	800b      	strh	r3, [r1, #0]
 8003eba:	e79b      	b.n	8003df4 <main+0xe4>
			dribler_off();
			motors_off();
		}
		//correct_motors_speeds();

		if((have_ball > 0 && kicker_is_ready() && /*abs_value_int(goal_degree) < SHOOTING_RANGE &&*/ get_shooting_event()) || dribler_timer > 0) {
 8003ebc:	f7ff fc70 	bl	80037a0 <get_shooting_event>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	f43f af7a 	beq.w	8003dba <main+0xaa>
 8003ec6:	e77d      	b.n	8003dc4 <main+0xb4>
				dribler_timer = DRIBLER_REACTION_TIME;
			}
			//change_motors_speeds(0, 0, 0, 0, 0, MASTER_THREAD_ID);
			if(dribler_timer == 1) {
				//chThdSleepMilliseconds(200);
				kick();
 8003ec8:	f7ff fd4a 	bl	8003960 <kick>
 8003ecc:	e792      	b.n	8003df4 <main+0xe4>
		
		if(get_start()){

			if(lines_state == NO_LINE_DETECTED) {
				if (ball_degree == OBJECT_NOT_FOUND) {
					set_movement(270);
 8003ece:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003ed2:	f7ff fdb5 	bl	8003a40 <set_movement>
 8003ed6:	e759      	b.n	8003d8c <main+0x7c>
 8003ed8:	20000818 	.word	0x20000818
 8003edc:	200018de 	.word	0x200018de
 8003ee0:	200018e0 	.word	0x200018e0
 8003ee4:	200018cc 	.word	0x200018cc
 8003ee8:	b60b60b7 	.word	0xb60b60b7
 8003eec:	40020c00 	.word	0x40020c00
 8003ef0:	200018dc 	.word	0x200018dc
 8003ef4:	20000816 	.word	0x20000816
 8003ef8:	20000810 	.word	0x20000810
 8003efc:	20000812 	.word	0x20000812
 8003f00:	20000814 	.word	0x20000814
 8003f04:	f3af 8000 	nop.w
 8003f08:	f3af 8000 	nop.w
 8003f0c:	f3af 8000 	nop.w

08003f10 <sin>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	4e22      	ldr	r6, [pc, #136]	; (8003f9c <sin+0x8c>)
 8003f14:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003f18:	42b4      	cmp	r4, r6
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	dd1a      	ble.n	8003f58 <sin+0x48>
 8003f22:	4d1f      	ldr	r5, [pc, #124]	; (8003fa0 <sin+0x90>)
 8003f24:	42ac      	cmp	r4, r5
 8003f26:	dd03      	ble.n	8003f30 <sin+0x20>
 8003f28:	f7fc f9ee 	bl	8000308 <__aeabi_dsub>
 8003f2c:	b006      	add	sp, #24
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	aa02      	add	r2, sp, #8
 8003f32:	f000 f93d 	bl	80041b0 <__ieee754_rem_pio2>
 8003f36:	f000 0003 	and.w	r0, r0, #3
 8003f3a:	2801      	cmp	r0, #1
 8003f3c:	d01d      	beq.n	8003f7a <sin+0x6a>
 8003f3e:	2802      	cmp	r0, #2
 8003f40:	d012      	beq.n	8003f68 <sin+0x58>
 8003f42:	b308      	cbz	r0, 8003f88 <sin+0x78>
 8003f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f4c:	f000 fb50 	bl	80045f0 <__kernel_cos>
 8003f50:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003f54:	b006      	add	sp, #24
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	2300      	movs	r3, #0
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f001 f84e 	bl	8005000 <__kernel_sin>
 8003f64:	b006      	add	sp, #24
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	2301      	movs	r3, #1
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f74:	f001 f844 	bl	8005000 <__kernel_sin>
 8003f78:	e7ea      	b.n	8003f50 <sin+0x40>
 8003f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f82:	f000 fb35 	bl	80045f0 <__kernel_cos>
 8003f86:	e7d1      	b.n	8003f2c <sin+0x1c>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f94:	f001 f834 	bl	8005000 <__kernel_sin>
 8003f98:	e7c8      	b.n	8003f2c <sin+0x1c>
 8003f9a:	bf00      	nop
 8003f9c:	3fe921fb 	.word	0x3fe921fb
 8003fa0:	7fefffff 	.word	0x7fefffff
	...

08003fb0 <atan2>:
 8003fb0:	f000 b806 	b.w	8003fc0 <__ieee754_atan2>
	...

08003fc0 <__ieee754_atan2>:
 8003fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc4:	f1c2 0900 	rsb	r9, r2, #0
 8003fc8:	ea49 0902 	orr.w	r9, r9, r2
 8003fcc:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8003fd0:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80041a8 <__ieee754_atan2+0x1e8>
 8003fd4:	ea48 79d9 	orr.w	r9, r8, r9, lsr #31
 8003fd8:	b082      	sub	sp, #8
 8003fda:	45e1      	cmp	r9, ip
 8003fdc:	4614      	mov	r4, r2
 8003fde:	461d      	mov	r5, r3
 8003fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8003fe4:	460f      	mov	r7, r1
 8003fe6:	d847      	bhi.n	8004078 <__ieee754_atan2+0xb8>
 8003fe8:	f1c0 0a00 	rsb	sl, r0, #0
 8003fec:	ea4a 0a00 	orr.w	sl, sl, r0
 8003ff0:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8003ff4:	ea49 7ada 	orr.w	sl, r9, sl, lsr #31
 8003ff8:	45e2      	cmp	sl, ip
 8003ffa:	d83d      	bhi.n	8004078 <__ieee754_atan2+0xb8>
 8003ffc:	f103 4c40 	add.w	ip, r3, #3221225472	; 0xc0000000
 8004000:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
 8004004:	ea5c 0c02 	orrs.w	ip, ip, r2
 8004008:	d04c      	beq.n	80040a4 <__ieee754_atan2+0xe4>
 800400a:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800400e:	f00a 0a02 	and.w	sl, sl, #2
 8004012:	ea4a 7ad1 	orr.w	sl, sl, r1, lsr #31
 8004016:	ea59 0100 	orrs.w	r1, r9, r0
 800401a:	d036      	beq.n	800408a <__ieee754_atan2+0xca>
 800401c:	ea58 0104 	orrs.w	r1, r8, r4
 8004020:	d03a      	beq.n	8004098 <__ieee754_atan2+0xd8>
 8004022:	4961      	ldr	r1, [pc, #388]	; (80041a8 <__ieee754_atan2+0x1e8>)
 8004024:	4588      	cmp	r8, r1
 8004026:	d051      	beq.n	80040cc <__ieee754_atan2+0x10c>
 8004028:	495f      	ldr	r1, [pc, #380]	; (80041a8 <__ieee754_atan2+0x1e8>)
 800402a:	4589      	cmp	r9, r1
 800402c:	d034      	beq.n	8004098 <__ieee754_atan2+0xd8>
 800402e:	ebc8 0809 	rsb	r8, r8, r9
 8004032:	ea4f 5828 	mov.w	r8, r8, asr #20
 8004036:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
 800403a:	dc43      	bgt.n	80040c4 <__ieee754_atan2+0x104>
 800403c:	2d00      	cmp	r5, #0
 800403e:	db70      	blt.n	8004122 <__ieee754_atan2+0x162>
 8004040:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004044:	f7fc fc3e 	bl	80008c4 <__aeabi_ddiv>
 8004048:	f001 fa3a 	bl	80054c0 <fabs>
 800404c:	f001 f890 	bl	8005170 <atan>
 8004050:	f1ba 0f01 	cmp.w	sl, #1
 8004054:	d062      	beq.n	800411c <__ieee754_atan2+0x15c>
 8004056:	f1ba 0f02 	cmp.w	sl, #2
 800405a:	d052      	beq.n	8004102 <__ieee754_atan2+0x142>
 800405c:	f1ba 0f00 	cmp.w	sl, #0
 8004060:	d010      	beq.n	8004084 <__ieee754_atan2+0xc4>
 8004062:	a33f      	add	r3, pc, #252	; (adr r3, 8004160 <__ieee754_atan2+0x1a0>)
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f7fc f94e 	bl	8000308 <__aeabi_dsub>
 800406c:	a33e      	add	r3, pc, #248	; (adr r3, 8004168 <__ieee754_atan2+0x1a8>)
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f7fc f949 	bl	8000308 <__aeabi_dsub>
 8004076:	e005      	b.n	8004084 <__ieee754_atan2+0xc4>
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004080:	f7fc f944 	bl	800030c <__adddf3>
 8004084:	b002      	add	sp, #8
 8004086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408a:	f1ba 0f03 	cmp.w	sl, #3
 800408e:	d8c5      	bhi.n	800401c <__ieee754_atan2+0x5c>
 8004090:	e8df f00a 	tbb	[pc, sl]
 8004094:	10140d0d 	.word	0x10140d0d
 8004098:	2f00      	cmp	r7, #0
 800409a:	db2e      	blt.n	80040fa <__ieee754_atan2+0x13a>
 800409c:	a134      	add	r1, pc, #208	; (adr r1, 8004170 <__ieee754_atan2+0x1b0>)
 800409e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040a2:	e7ef      	b.n	8004084 <__ieee754_atan2+0xc4>
 80040a4:	b002      	add	sp, #8
 80040a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040aa:	f001 b861 	b.w	8005170 <atan>
 80040ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040b2:	e7e7      	b.n	8004084 <__ieee754_atan2+0xc4>
 80040b4:	a130      	add	r1, pc, #192	; (adr r1, 8004178 <__ieee754_atan2+0x1b8>)
 80040b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040ba:	e7e3      	b.n	8004084 <__ieee754_atan2+0xc4>
 80040bc:	a12a      	add	r1, pc, #168	; (adr r1, 8004168 <__ieee754_atan2+0x1a8>)
 80040be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040c2:	e7df      	b.n	8004084 <__ieee754_atan2+0xc4>
 80040c4:	a12a      	add	r1, pc, #168	; (adr r1, 8004170 <__ieee754_atan2+0x1b0>)
 80040c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040ca:	e7c1      	b.n	8004050 <__ieee754_atan2+0x90>
 80040cc:	45c1      	cmp	r9, r8
 80040ce:	d02e      	beq.n	800412e <__ieee754_atan2+0x16e>
 80040d0:	f1ba 0f03 	cmp.w	sl, #3
 80040d4:	d8a8      	bhi.n	8004028 <__ieee754_atan2+0x68>
 80040d6:	a101      	add	r1, pc, #4	; (adr r1, 80040dc <__ieee754_atan2+0x11c>)
 80040d8:	f851 f02a 	ldr.w	pc, [r1, sl, lsl #2]
 80040dc:	080040f5 	.word	0x080040f5
 80040e0:	080040ed 	.word	0x080040ed
 80040e4:	080040bd 	.word	0x080040bd
 80040e8:	080040b5 	.word	0x080040b5
 80040ec:	2000      	movs	r0, #0
 80040ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80040f2:	e7c7      	b.n	8004084 <__ieee754_atan2+0xc4>
 80040f4:	2000      	movs	r0, #0
 80040f6:	2100      	movs	r1, #0
 80040f8:	e7c4      	b.n	8004084 <__ieee754_atan2+0xc4>
 80040fa:	a121      	add	r1, pc, #132	; (adr r1, 8004180 <__ieee754_atan2+0x1c0>)
 80040fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004100:	e7c0      	b.n	8004084 <__ieee754_atan2+0xc4>
 8004102:	a317      	add	r3, pc, #92	; (adr r3, 8004160 <__ieee754_atan2+0x1a0>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f7fc f8fe 	bl	8000308 <__aeabi_dsub>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	a115      	add	r1, pc, #84	; (adr r1, 8004168 <__ieee754_atan2+0x1a8>)
 8004112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004116:	f7fc f8f7 	bl	8000308 <__aeabi_dsub>
 800411a:	e7b3      	b.n	8004084 <__ieee754_atan2+0xc4>
 800411c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004120:	e7b0      	b.n	8004084 <__ieee754_atan2+0xc4>
 8004122:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
 8004126:	da8b      	bge.n	8004040 <__ieee754_atan2+0x80>
 8004128:	2000      	movs	r0, #0
 800412a:	2100      	movs	r1, #0
 800412c:	e790      	b.n	8004050 <__ieee754_atan2+0x90>
 800412e:	f1ba 0f03 	cmp.w	sl, #3
 8004132:	d8b1      	bhi.n	8004098 <__ieee754_atan2+0xd8>
 8004134:	e8df f00a 	tbb	[pc, sl]
 8004138:	0a0e0206 	.word	0x0a0e0206
 800413c:	a112      	add	r1, pc, #72	; (adr r1, 8004188 <__ieee754_atan2+0x1c8>)
 800413e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004142:	e79f      	b.n	8004084 <__ieee754_atan2+0xc4>
 8004144:	a112      	add	r1, pc, #72	; (adr r1, 8004190 <__ieee754_atan2+0x1d0>)
 8004146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800414a:	e79b      	b.n	8004084 <__ieee754_atan2+0xc4>
 800414c:	a112      	add	r1, pc, #72	; (adr r1, 8004198 <__ieee754_atan2+0x1d8>)
 800414e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004152:	e797      	b.n	8004084 <__ieee754_atan2+0xc4>
 8004154:	a112      	add	r1, pc, #72	; (adr r1, 80041a0 <__ieee754_atan2+0x1e0>)
 8004156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800415a:	e793      	b.n	8004084 <__ieee754_atan2+0xc4>
 800415c:	f3af 8000 	nop.w
 8004160:	33145c07 	.word	0x33145c07
 8004164:	3ca1a626 	.word	0x3ca1a626
 8004168:	54442d18 	.word	0x54442d18
 800416c:	400921fb 	.word	0x400921fb
 8004170:	54442d18 	.word	0x54442d18
 8004174:	3ff921fb 	.word	0x3ff921fb
 8004178:	54442d18 	.word	0x54442d18
 800417c:	c00921fb 	.word	0xc00921fb
 8004180:	54442d18 	.word	0x54442d18
 8004184:	bff921fb 	.word	0xbff921fb
 8004188:	54442d18 	.word	0x54442d18
 800418c:	bfe921fb 	.word	0xbfe921fb
 8004190:	54442d18 	.word	0x54442d18
 8004194:	3fe921fb 	.word	0x3fe921fb
 8004198:	7f3321d2 	.word	0x7f3321d2
 800419c:	c002d97c 	.word	0xc002d97c
 80041a0:	7f3321d2 	.word	0x7f3321d2
 80041a4:	4002d97c 	.word	0x4002d97c
 80041a8:	7ff00000 	.word	0x7ff00000
 80041ac:	f3af 8000 	nop.w

080041b0 <__ieee754_rem_pio2>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	4b96      	ldr	r3, [pc, #600]	; (8004410 <__ieee754_rem_pio2+0x260>)
 80041b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80041ba:	429e      	cmp	r6, r3
 80041bc:	b091      	sub	sp, #68	; 0x44
 80041be:	4604      	mov	r4, r0
 80041c0:	460d      	mov	r5, r1
 80041c2:	468b      	mov	fp, r1
 80041c4:	4690      	mov	r8, r2
 80041c6:	f340 8081 	ble.w	80042cc <__ieee754_rem_pio2+0x11c>
 80041ca:	4b92      	ldr	r3, [pc, #584]	; (8004414 <__ieee754_rem_pio2+0x264>)
 80041cc:	429e      	cmp	r6, r3
 80041ce:	dc26      	bgt.n	800421e <__ieee754_rem_pio2+0x6e>
 80041d0:	a385      	add	r3, pc, #532	; (adr r3, 80043e8 <__ieee754_rem_pio2+0x238>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	2900      	cmp	r1, #0
 80041d8:	f340 81a0 	ble.w	800451c <__ieee754_rem_pio2+0x36c>
 80041dc:	f7fc f894 	bl	8000308 <__aeabi_dsub>
 80041e0:	4b8d      	ldr	r3, [pc, #564]	; (8004418 <__ieee754_rem_pio2+0x268>)
 80041e2:	4604      	mov	r4, r0
 80041e4:	429e      	cmp	r6, r3
 80041e6:	460d      	mov	r5, r1
 80041e8:	f000 8085 	beq.w	80042f6 <__ieee754_rem_pio2+0x146>
 80041ec:	a380      	add	r3, pc, #512	; (adr r3, 80043f0 <__ieee754_rem_pio2+0x240>)
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f7fc f889 	bl	8000308 <__aeabi_dsub>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	e9c8 2300 	strd	r2, r3, [r8]
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fc f881 	bl	8000308 <__aeabi_dsub>
 8004206:	a37a      	add	r3, pc, #488	; (adr r3, 80043f0 <__ieee754_rem_pio2+0x240>)
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f7fc f87c 	bl	8000308 <__aeabi_dsub>
 8004210:	2701      	movs	r7, #1
 8004212:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8004216:	4638      	mov	r0, r7
 8004218:	b011      	add	sp, #68	; 0x44
 800421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421e:	4b7f      	ldr	r3, [pc, #508]	; (800441c <__ieee754_rem_pio2+0x26c>)
 8004220:	429e      	cmp	r6, r3
 8004222:	f340 8085 	ble.w	8004330 <__ieee754_rem_pio2+0x180>
 8004226:	4b7e      	ldr	r3, [pc, #504]	; (8004420 <__ieee754_rem_pio2+0x270>)
 8004228:	429e      	cmp	r6, r3
 800422a:	dc5a      	bgt.n	80042e2 <__ieee754_rem_pio2+0x132>
 800422c:	ea4f 5926 	mov.w	r9, r6, asr #20
 8004230:	f2a9 4916 	subw	r9, r9, #1046	; 0x416
 8004234:	eba6 5509 	sub.w	r5, r6, r9, lsl #20
 8004238:	4629      	mov	r1, r5
 800423a:	4604      	mov	r4, r0
 800423c:	f7fc fcb8 	bl	8000bb0 <__aeabi_d2iz>
 8004240:	f7fc f9b0 	bl	80005a4 <__aeabi_i2d>
 8004244:	4606      	mov	r6, r0
 8004246:	460f      	mov	r7, r1
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4620      	mov	r0, r4
 800424e:	4629      	mov	r1, r5
 8004250:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8004254:	f7fc f858 	bl	8000308 <__aeabi_dsub>
 8004258:	2200      	movs	r2, #0
 800425a:	4b72      	ldr	r3, [pc, #456]	; (8004424 <__ieee754_rem_pio2+0x274>)
 800425c:	f7fc fa08 	bl	8000670 <__aeabi_dmul>
 8004260:	460f      	mov	r7, r1
 8004262:	4606      	mov	r6, r0
 8004264:	f7fc fca4 	bl	8000bb0 <__aeabi_d2iz>
 8004268:	f7fc f99c 	bl	80005a4 <__aeabi_i2d>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4604      	mov	r4, r0
 8004272:	460d      	mov	r5, r1
 8004274:	4630      	mov	r0, r6
 8004276:	4639      	mov	r1, r7
 8004278:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800427c:	f7fc f844 	bl	8000308 <__aeabi_dsub>
 8004280:	2200      	movs	r2, #0
 8004282:	4b68      	ldr	r3, [pc, #416]	; (8004424 <__ieee754_rem_pio2+0x274>)
 8004284:	f7fc f9f4 	bl	8000670 <__aeabi_dmul>
 8004288:	2200      	movs	r2, #0
 800428a:	2300      	movs	r3, #0
 800428c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004290:	f7fc fc5c 	bl	8000b4c <__aeabi_dcmpeq>
 8004294:	2800      	cmp	r0, #0
 8004296:	f000 816d 	beq.w	8004574 <__ieee754_rem_pio2+0x3c4>
 800429a:	2300      	movs	r3, #0
 800429c:	4620      	mov	r0, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	2200      	movs	r2, #0
 80042a2:	f7fc fc53 	bl	8000b4c <__aeabi_dcmpeq>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2302      	moveq	r3, #2
 80042ae:	485e      	ldr	r0, [pc, #376]	; (8004428 <__ieee754_rem_pio2+0x278>)
 80042b0:	2102      	movs	r1, #2
 80042b2:	9001      	str	r0, [sp, #4]
 80042b4:	9100      	str	r1, [sp, #0]
 80042b6:	464a      	mov	r2, r9
 80042b8:	a80a      	add	r0, sp, #40	; 0x28
 80042ba:	4641      	mov	r1, r8
 80042bc:	f000 fac0 	bl	8004840 <__kernel_rem_pio2>
 80042c0:	f1bb 0f00 	cmp.w	fp, #0
 80042c4:	f2c0 8148 	blt.w	8004558 <__ieee754_rem_pio2+0x3a8>
 80042c8:	4607      	mov	r7, r0
 80042ca:	e006      	b.n	80042da <__ieee754_rem_pio2+0x12a>
 80042cc:	2200      	movs	r2, #0
 80042ce:	2300      	movs	r3, #0
 80042d0:	e9c8 4500 	strd	r4, r5, [r8]
 80042d4:	e9c8 2302 	strd	r2, r3, [r8, #8]
 80042d8:	2700      	movs	r7, #0
 80042da:	4638      	mov	r0, r7
 80042dc:	b011      	add	sp, #68	; 0x44
 80042de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	f7fc f80f 	bl	8000308 <__aeabi_dsub>
 80042ea:	2700      	movs	r7, #0
 80042ec:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80042f0:	e9c8 0100 	strd	r0, r1, [r8]
 80042f4:	e7f1      	b.n	80042da <__ieee754_rem_pio2+0x12a>
 80042f6:	a340      	add	r3, pc, #256	; (adr r3, 80043f8 <__ieee754_rem_pio2+0x248>)
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f7fc f804 	bl	8000308 <__aeabi_dsub>
 8004300:	a33f      	add	r3, pc, #252	; (adr r3, 8004400 <__ieee754_rem_pio2+0x250>)
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	4604      	mov	r4, r0
 8004308:	460d      	mov	r5, r1
 800430a:	f7fb fffd 	bl	8000308 <__aeabi_dsub>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	e9c8 2300 	strd	r2, r3, [r8]
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fb fff5 	bl	8000308 <__aeabi_dsub>
 800431e:	a338      	add	r3, pc, #224	; (adr r3, 8004400 <__ieee754_rem_pio2+0x250>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fb fff0 	bl	8000308 <__aeabi_dsub>
 8004328:	2701      	movs	r7, #1
 800432a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800432e:	e7d4      	b.n	80042da <__ieee754_rem_pio2+0x12a>
 8004330:	f001 f8c6 	bl	80054c0 <fabs>
 8004334:	a334      	add	r3, pc, #208	; (adr r3, 8004408 <__ieee754_rem_pio2+0x258>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	4604      	mov	r4, r0
 800433c:	460d      	mov	r5, r1
 800433e:	f7fc f997 	bl	8000670 <__aeabi_dmul>
 8004342:	2200      	movs	r2, #0
 8004344:	4b39      	ldr	r3, [pc, #228]	; (800442c <__ieee754_rem_pio2+0x27c>)
 8004346:	f7fb ffe1 	bl	800030c <__adddf3>
 800434a:	f7fc fc31 	bl	8000bb0 <__aeabi_d2iz>
 800434e:	4607      	mov	r7, r0
 8004350:	f7fc f928 	bl	80005a4 <__aeabi_i2d>
 8004354:	a324      	add	r3, pc, #144	; (adr r3, 80043e8 <__ieee754_rem_pio2+0x238>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800435e:	f7fc f987 	bl	8000670 <__aeabi_dmul>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4620      	mov	r0, r4
 8004368:	4629      	mov	r1, r5
 800436a:	f7fb ffcd 	bl	8000308 <__aeabi_dsub>
 800436e:	a320      	add	r3, pc, #128	; (adr r3, 80043f0 <__ieee754_rem_pio2+0x240>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800437c:	f7fc f978 	bl	8000670 <__aeabi_dmul>
 8004380:	2f1f      	cmp	r7, #31
 8004382:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800438a:	dc53      	bgt.n	8004434 <__ieee754_rem_pio2+0x284>
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <__ieee754_rem_pio2+0x280>)
 800438e:	1e7a      	subs	r2, r7, #1
 8004390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004394:	42b3      	cmp	r3, r6
 8004396:	d04d      	beq.n	8004434 <__ieee754_rem_pio2+0x284>
 8004398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800439c:	f7fb ffb4 	bl	8000308 <__aeabi_dsub>
 80043a0:	4604      	mov	r4, r0
 80043a2:	460d      	mov	r5, r1
 80043a4:	e9c8 4500 	strd	r4, r5, [r8]
 80043a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043ac:	4622      	mov	r2, r4
 80043ae:	462b      	mov	r3, r5
 80043b0:	f7fb ffaa 	bl	8000308 <__aeabi_dsub>
 80043b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043b8:	f7fb ffa6 	bl	8000308 <__aeabi_dsub>
 80043bc:	f1bb 0f00 	cmp.w	fp, #0
 80043c0:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80043c4:	da89      	bge.n	80042da <__ieee754_rem_pio2+0x12a>
 80043c6:	4626      	mov	r6, r4
 80043c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043cc:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
 80043d0:	427f      	negs	r7, r7
 80043d2:	f8c8 6000 	str.w	r6, [r8]
 80043d6:	f8c8 4004 	str.w	r4, [r8, #4]
 80043da:	f8c8 0008 	str.w	r0, [r8, #8]
 80043de:	f8c8 300c 	str.w	r3, [r8, #12]
 80043e2:	e77a      	b.n	80042da <__ieee754_rem_pio2+0x12a>
 80043e4:	f3af 8000 	nop.w
 80043e8:	54400000 	.word	0x54400000
 80043ec:	3ff921fb 	.word	0x3ff921fb
 80043f0:	1a626331 	.word	0x1a626331
 80043f4:	3dd0b461 	.word	0x3dd0b461
 80043f8:	1a600000 	.word	0x1a600000
 80043fc:	3dd0b461 	.word	0x3dd0b461
 8004400:	2e037073 	.word	0x2e037073
 8004404:	3ba3198a 	.word	0x3ba3198a
 8004408:	6dc9c883 	.word	0x6dc9c883
 800440c:	3fe45f30 	.word	0x3fe45f30
 8004410:	3fe921fb 	.word	0x3fe921fb
 8004414:	4002d97b 	.word	0x4002d97b
 8004418:	3ff921fb 	.word	0x3ff921fb
 800441c:	413921fb 	.word	0x413921fb
 8004420:	7fefffff 	.word	0x7fefffff
 8004424:	41700000 	.word	0x41700000
 8004428:	08005af0 	.word	0x08005af0
 800442c:	3fe00000 	.word	0x3fe00000
 8004430:	08005a70 	.word	0x08005a70
 8004434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004438:	f7fb ff66 	bl	8000308 <__aeabi_dsub>
 800443c:	1536      	asrs	r6, r6, #20
 800443e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004442:	1af3      	subs	r3, r6, r3
 8004444:	4604      	mov	r4, r0
 8004446:	460d      	mov	r5, r1
 8004448:	2b10      	cmp	r3, #16
 800444a:	e9c8 4500 	strd	r4, r5, [r8]
 800444e:	ddab      	ble.n	80043a8 <__ieee754_rem_pio2+0x1f8>
 8004450:	a35b      	add	r3, pc, #364	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x410>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800445a:	f7fc f909 	bl	8000670 <__aeabi_dmul>
 800445e:	4604      	mov	r4, r0
 8004460:	460d      	mov	r5, r1
 8004462:	4622      	mov	r2, r4
 8004464:	462b      	mov	r3, r5
 8004466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800446a:	f7fb ff4d 	bl	8000308 <__aeabi_dsub>
 800446e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004472:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800447a:	f7fb ff45 	bl	8000308 <__aeabi_dsub>
 800447e:	4622      	mov	r2, r4
 8004480:	462b      	mov	r3, r5
 8004482:	f7fb ff41 	bl	8000308 <__aeabi_dsub>
 8004486:	a350      	add	r3, pc, #320	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x418>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	4604      	mov	r4, r0
 800448e:	460d      	mov	r5, r1
 8004490:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004494:	f7fc f8ec 	bl	8000670 <__aeabi_dmul>
 8004498:	4622      	mov	r2, r4
 800449a:	462b      	mov	r3, r5
 800449c:	f7fb ff34 	bl	8000308 <__aeabi_dsub>
 80044a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80044ac:	f7fb ff2c 	bl	8000308 <__aeabi_dsub>
 80044b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044b4:	1af6      	subs	r6, r6, r3
 80044b6:	4604      	mov	r4, r0
 80044b8:	460d      	mov	r5, r1
 80044ba:	2e31      	cmp	r6, #49	; 0x31
 80044bc:	e9c8 4500 	strd	r4, r5, [r8]
 80044c0:	dd78      	ble.n	80045b4 <__ieee754_rem_pio2+0x404>
 80044c2:	a343      	add	r3, pc, #268	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x420>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044cc:	f7fc f8d0 	bl	8000670 <__aeabi_dmul>
 80044d0:	4604      	mov	r4, r0
 80044d2:	460d      	mov	r5, r1
 80044d4:	4622      	mov	r2, r4
 80044d6:	462b      	mov	r3, r5
 80044d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80044dc:	f7fb ff14 	bl	8000308 <__aeabi_dsub>
 80044e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80044ec:	f7fb ff0c 	bl	8000308 <__aeabi_dsub>
 80044f0:	4622      	mov	r2, r4
 80044f2:	462b      	mov	r3, r5
 80044f4:	f7fb ff08 	bl	8000308 <__aeabi_dsub>
 80044f8:	a337      	add	r3, pc, #220	; (adr r3, 80045d8 <__ieee754_rem_pio2+0x428>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	4604      	mov	r4, r0
 8004500:	460d      	mov	r5, r1
 8004502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004506:	f7fc f8b3 	bl	8000670 <__aeabi_dmul>
 800450a:	4622      	mov	r2, r4
 800450c:	462b      	mov	r3, r5
 800450e:	f7fb fefb 	bl	8000308 <__aeabi_dsub>
 8004512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800451a:	e73d      	b.n	8004398 <__ieee754_rem_pio2+0x1e8>
 800451c:	f7fb fef6 	bl	800030c <__adddf3>
 8004520:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <__ieee754_rem_pio2+0x438>)
 8004522:	4604      	mov	r4, r0
 8004524:	429e      	cmp	r6, r3
 8004526:	460d      	mov	r5, r1
 8004528:	d026      	beq.n	8004578 <__ieee754_rem_pio2+0x3c8>
 800452a:	a32d      	add	r3, pc, #180	; (adr r3, 80045e0 <__ieee754_rem_pio2+0x430>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fb feec 	bl	800030c <__adddf3>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	e9c8 2300 	strd	r2, r3, [r8]
 800453c:	4620      	mov	r0, r4
 800453e:	4629      	mov	r1, r5
 8004540:	f7fb fee2 	bl	8000308 <__aeabi_dsub>
 8004544:	a326      	add	r3, pc, #152	; (adr r3, 80045e0 <__ieee754_rem_pio2+0x430>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fb fedf 	bl	800030c <__adddf3>
 800454e:	f04f 37ff 	mov.w	r7, #4294967295
 8004552:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8004556:	e6c0      	b.n	80042da <__ieee754_rem_pio2+0x12a>
 8004558:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800455c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004560:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8004564:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004568:	4247      	negs	r7, r0
 800456a:	f8c8 2004 	str.w	r2, [r8, #4]
 800456e:	f8c8 300c 	str.w	r3, [r8, #12]
 8004572:	e6b2      	b.n	80042da <__ieee754_rem_pio2+0x12a>
 8004574:	2303      	movs	r3, #3
 8004576:	e69a      	b.n	80042ae <__ieee754_rem_pio2+0xfe>
 8004578:	a311      	add	r3, pc, #68	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x410>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fb fec5 	bl	800030c <__adddf3>
 8004582:	a311      	add	r3, pc, #68	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x418>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	4604      	mov	r4, r0
 800458a:	460d      	mov	r5, r1
 800458c:	f7fb febe 	bl	800030c <__adddf3>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	e9c8 2300 	strd	r2, r3, [r8]
 8004598:	4620      	mov	r0, r4
 800459a:	4629      	mov	r1, r5
 800459c:	f7fb feb4 	bl	8000308 <__aeabi_dsub>
 80045a0:	a309      	add	r3, pc, #36	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x418>)
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	f7fb feb1 	bl	800030c <__adddf3>
 80045aa:	f04f 37ff 	mov.w	r7, #4294967295
 80045ae:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80045b2:	e692      	b.n	80042da <__ieee754_rem_pio2+0x12a>
 80045b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045bc:	e6f4      	b.n	80043a8 <__ieee754_rem_pio2+0x1f8>
 80045be:	bf00      	nop
 80045c0:	1a600000 	.word	0x1a600000
 80045c4:	3dd0b461 	.word	0x3dd0b461
 80045c8:	2e037073 	.word	0x2e037073
 80045cc:	3ba3198a 	.word	0x3ba3198a
 80045d0:	2e000000 	.word	0x2e000000
 80045d4:	3ba3198a 	.word	0x3ba3198a
 80045d8:	252049c1 	.word	0x252049c1
 80045dc:	397b839a 	.word	0x397b839a
 80045e0:	1a626331 	.word	0x1a626331
 80045e4:	3dd0b461 	.word	0x3dd0b461
 80045e8:	3ff921fb 	.word	0x3ff921fb
 80045ec:	f3af 8000 	nop.w

080045f0 <__kernel_cos>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 80045f8:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 80045fc:	b085      	sub	sp, #20
 80045fe:	4606      	mov	r6, r0
 8004600:	460f      	mov	r7, r1
 8004602:	4692      	mov	sl, r2
 8004604:	469b      	mov	fp, r3
 8004606:	da6b      	bge.n	80046e0 <__kernel_cos+0xf0>
 8004608:	f7fc fad2 	bl	8000bb0 <__aeabi_d2iz>
 800460c:	2800      	cmp	r0, #0
 800460e:	f000 80ea 	beq.w	80047e6 <__kernel_cos+0x1f6>
 8004612:	4632      	mov	r2, r6
 8004614:	463b      	mov	r3, r7
 8004616:	4630      	mov	r0, r6
 8004618:	4639      	mov	r1, r7
 800461a:	f7fc f829 	bl	8000670 <__aeabi_dmul>
 800461e:	a374      	add	r3, pc, #464	; (adr r3, 80047f0 <__kernel_cos+0x200>)
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	4604      	mov	r4, r0
 8004626:	460d      	mov	r5, r1
 8004628:	f7fc f822 	bl	8000670 <__aeabi_dmul>
 800462c:	a372      	add	r3, pc, #456	; (adr r3, 80047f8 <__kernel_cos+0x208>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fb fe6b 	bl	800030c <__adddf3>
 8004636:	4622      	mov	r2, r4
 8004638:	462b      	mov	r3, r5
 800463a:	f7fc f819 	bl	8000670 <__aeabi_dmul>
 800463e:	a370      	add	r3, pc, #448	; (adr r3, 8004800 <__kernel_cos+0x210>)
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f7fb fe60 	bl	8000308 <__aeabi_dsub>
 8004648:	4622      	mov	r2, r4
 800464a:	462b      	mov	r3, r5
 800464c:	f7fc f810 	bl	8000670 <__aeabi_dmul>
 8004650:	a36d      	add	r3, pc, #436	; (adr r3, 8004808 <__kernel_cos+0x218>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb fe59 	bl	800030c <__adddf3>
 800465a:	4622      	mov	r2, r4
 800465c:	462b      	mov	r3, r5
 800465e:	f7fc f807 	bl	8000670 <__aeabi_dmul>
 8004662:	a36b      	add	r3, pc, #428	; (adr r3, 8004810 <__kernel_cos+0x220>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fb fe4e 	bl	8000308 <__aeabi_dsub>
 800466c:	4622      	mov	r2, r4
 800466e:	462b      	mov	r3, r5
 8004670:	f7fb fffe 	bl	8000670 <__aeabi_dmul>
 8004674:	a368      	add	r3, pc, #416	; (adr r3, 8004818 <__kernel_cos+0x228>)
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f7fb fe47 	bl	800030c <__adddf3>
 800467e:	4622      	mov	r2, r4
 8004680:	462b      	mov	r3, r5
 8004682:	f7fb fff5 	bl	8000670 <__aeabi_dmul>
 8004686:	e9cd 0100 	strd	r0, r1, [sp]
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	2200      	movs	r2, #0
 8004690:	4b63      	ldr	r3, [pc, #396]	; (8004820 <__kernel_cos+0x230>)
 8004692:	f7fb ffed 	bl	8000670 <__aeabi_dmul>
 8004696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800469a:	4680      	mov	r8, r0
 800469c:	4689      	mov	r9, r1
 800469e:	4620      	mov	r0, r4
 80046a0:	4629      	mov	r1, r5
 80046a2:	f7fb ffe5 	bl	8000670 <__aeabi_dmul>
 80046a6:	4652      	mov	r2, sl
 80046a8:	4604      	mov	r4, r0
 80046aa:	460d      	mov	r5, r1
 80046ac:	465b      	mov	r3, fp
 80046ae:	4630      	mov	r0, r6
 80046b0:	4639      	mov	r1, r7
 80046b2:	f7fb ffdd 	bl	8000670 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4620      	mov	r0, r4
 80046bc:	4629      	mov	r1, r5
 80046be:	f7fb fe23 	bl	8000308 <__aeabi_dsub>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4640      	mov	r0, r8
 80046c8:	4649      	mov	r1, r9
 80046ca:	f7fb fe1d 	bl	8000308 <__aeabi_dsub>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	2000      	movs	r0, #0
 80046d4:	4953      	ldr	r1, [pc, #332]	; (8004824 <__kernel_cos+0x234>)
 80046d6:	f7fb fe17 	bl	8000308 <__aeabi_dsub>
 80046da:	b005      	add	sp, #20
 80046dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	f7fb ffc4 	bl	8000670 <__aeabi_dmul>
 80046e8:	a341      	add	r3, pc, #260	; (adr r3, 80047f0 <__kernel_cos+0x200>)
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	4604      	mov	r4, r0
 80046f0:	460d      	mov	r5, r1
 80046f2:	f7fb ffbd 	bl	8000670 <__aeabi_dmul>
 80046f6:	a340      	add	r3, pc, #256	; (adr r3, 80047f8 <__kernel_cos+0x208>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f7fb fe06 	bl	800030c <__adddf3>
 8004700:	4622      	mov	r2, r4
 8004702:	462b      	mov	r3, r5
 8004704:	f7fb ffb4 	bl	8000670 <__aeabi_dmul>
 8004708:	a33d      	add	r3, pc, #244	; (adr r3, 8004800 <__kernel_cos+0x210>)
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	f7fb fdfb 	bl	8000308 <__aeabi_dsub>
 8004712:	4622      	mov	r2, r4
 8004714:	462b      	mov	r3, r5
 8004716:	f7fb ffab 	bl	8000670 <__aeabi_dmul>
 800471a:	a33b      	add	r3, pc, #236	; (adr r3, 8004808 <__kernel_cos+0x218>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb fdf4 	bl	800030c <__adddf3>
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
 8004728:	f7fb ffa2 	bl	8000670 <__aeabi_dmul>
 800472c:	a338      	add	r3, pc, #224	; (adr r3, 8004810 <__kernel_cos+0x220>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb fde9 	bl	8000308 <__aeabi_dsub>
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	f7fb ff99 	bl	8000670 <__aeabi_dmul>
 800473e:	a336      	add	r3, pc, #216	; (adr r3, 8004818 <__kernel_cos+0x228>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fb fde2 	bl	800030c <__adddf3>
 8004748:	462b      	mov	r3, r5
 800474a:	4622      	mov	r2, r4
 800474c:	f7fb ff90 	bl	8000670 <__aeabi_dmul>
 8004750:	4b35      	ldr	r3, [pc, #212]	; (8004828 <__kernel_cos+0x238>)
 8004752:	e9cd 0100 	strd	r0, r1, [sp]
 8004756:	4599      	cmp	r9, r3
 8004758:	dd97      	ble.n	800468a <__kernel_cos+0x9a>
 800475a:	4b34      	ldr	r3, [pc, #208]	; (800482c <__kernel_cos+0x23c>)
 800475c:	2200      	movs	r2, #0
 800475e:	4599      	cmp	r9, r3
 8004760:	dc39      	bgt.n	80047d6 <__kernel_cos+0x1e6>
 8004762:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 8004766:	2200      	movs	r2, #0
 8004768:	2000      	movs	r0, #0
 800476a:	492e      	ldr	r1, [pc, #184]	; (8004824 <__kernel_cos+0x234>)
 800476c:	4690      	mov	r8, r2
 800476e:	4699      	mov	r9, r3
 8004770:	f7fb fdca 	bl	8000308 <__aeabi_dsub>
 8004774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004778:	4620      	mov	r0, r4
 800477a:	4629      	mov	r1, r5
 800477c:	2200      	movs	r2, #0
 800477e:	4b28      	ldr	r3, [pc, #160]	; (8004820 <__kernel_cos+0x230>)
 8004780:	f7fb ff76 	bl	8000670 <__aeabi_dmul>
 8004784:	4642      	mov	r2, r8
 8004786:	464b      	mov	r3, r9
 8004788:	f7fb fdbe 	bl	8000308 <__aeabi_dsub>
 800478c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004790:	4680      	mov	r8, r0
 8004792:	4689      	mov	r9, r1
 8004794:	4620      	mov	r0, r4
 8004796:	4629      	mov	r1, r5
 8004798:	f7fb ff6a 	bl	8000670 <__aeabi_dmul>
 800479c:	4652      	mov	r2, sl
 800479e:	4604      	mov	r4, r0
 80047a0:	460d      	mov	r5, r1
 80047a2:	465b      	mov	r3, fp
 80047a4:	4630      	mov	r0, r6
 80047a6:	4639      	mov	r1, r7
 80047a8:	f7fb ff62 	bl	8000670 <__aeabi_dmul>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4620      	mov	r0, r4
 80047b2:	4629      	mov	r1, r5
 80047b4:	f7fb fda8 	bl	8000308 <__aeabi_dsub>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4640      	mov	r0, r8
 80047be:	4649      	mov	r1, r9
 80047c0:	f7fb fda2 	bl	8000308 <__aeabi_dsub>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047cc:	f7fb fd9c 	bl	8000308 <__aeabi_dsub>
 80047d0:	b005      	add	sp, #20
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	4b16      	ldr	r3, [pc, #88]	; (8004830 <__kernel_cos+0x240>)
 80047d8:	f04f 0800 	mov.w	r8, #0
 80047dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047e0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8004834 <__kernel_cos+0x244>
 80047e4:	e7c8      	b.n	8004778 <__kernel_cos+0x188>
 80047e6:	490f      	ldr	r1, [pc, #60]	; (8004824 <__kernel_cos+0x234>)
 80047e8:	2000      	movs	r0, #0
 80047ea:	b005      	add	sp, #20
 80047ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f0:	be8838d4 	.word	0xbe8838d4
 80047f4:	bda8fae9 	.word	0xbda8fae9
 80047f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80047fc:	3e21ee9e 	.word	0x3e21ee9e
 8004800:	809c52ad 	.word	0x809c52ad
 8004804:	3e927e4f 	.word	0x3e927e4f
 8004808:	19cb1590 	.word	0x19cb1590
 800480c:	3efa01a0 	.word	0x3efa01a0
 8004810:	16c15177 	.word	0x16c15177
 8004814:	3f56c16c 	.word	0x3f56c16c
 8004818:	5555554c 	.word	0x5555554c
 800481c:	3fa55555 	.word	0x3fa55555
 8004820:	3fe00000 	.word	0x3fe00000
 8004824:	3ff00000 	.word	0x3ff00000
 8004828:	3fd33332 	.word	0x3fd33332
 800482c:	3fe90000 	.word	0x3fe90000
 8004830:	3fe70000 	.word	0x3fe70000
 8004834:	3fd20000 	.word	0x3fd20000
	...

08004840 <__kernel_rem_pio2>:
 8004840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004844:	4d7b      	ldr	r5, [pc, #492]	; (8004a34 <__kernel_rem_pio2+0x1f4>)
 8004846:	1ed4      	subs	r4, r2, #3
 8004848:	fb85 6504 	smull	r6, r5, r5, r4
 800484c:	17e4      	asrs	r4, r4, #31
 800484e:	ebc4 05a5 	rsb	r5, r4, r5, asr #2
 8004852:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8004856:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800485a:	950e      	str	r5, [sp, #56]	; 0x38
 800485c:	4699      	mov	r9, r3
 800485e:	4c76      	ldr	r4, [pc, #472]	; (8004a38 <__kernel_rem_pio2+0x1f8>)
 8004860:	43eb      	mvns	r3, r5
 8004862:	9da6      	ldr	r5, [sp, #664]	; 0x298
 8004864:	f109 36ff 	add.w	r6, r9, #4294967295
 8004868:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800486c:	9604      	str	r6, [sp, #16]
 800486e:	940c      	str	r4, [sp, #48]	; 0x30
 8004870:	9007      	str	r0, [sp, #28]
 8004872:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004874:	9d04      	ldr	r5, [sp, #16]
 8004876:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800487c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004880:	1ba6      	subs	r6, r4, r6
 8004882:	182c      	adds	r4, r5, r0
 8004884:	910b      	str	r1, [sp, #44]	; 0x2c
 8004886:	930a      	str	r3, [sp, #40]	; 0x28
 8004888:	d417      	bmi.n	80048ba <__kernel_rem_pio2+0x7a>
 800488a:	98a7      	ldr	r0, [sp, #668]	; 0x29c
 800488c:	4434      	add	r4, r6
 800488e:	3401      	adds	r4, #1
 8004890:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004894:	eb00 0586 	add.w	r5, r0, r6, lsl #2
 8004898:	2700      	movs	r7, #0
 800489a:	e009      	b.n	80048b0 <__kernel_rem_pio2+0x70>
 800489c:	59e8      	ldr	r0, [r5, r7]
 800489e:	f7fb fe81 	bl	80005a4 <__aeabi_i2d>
 80048a2:	3601      	adds	r6, #1
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	e9e8 0102 	strd	r0, r1, [r8, #8]!
 80048aa:	f107 0704 	add.w	r7, r7, #4
 80048ae:	d004      	beq.n	80048ba <__kernel_rem_pio2+0x7a>
 80048b0:	2e00      	cmp	r6, #0
 80048b2:	daf3      	bge.n	800489c <__kernel_rem_pio2+0x5c>
 80048b4:	2000      	movs	r0, #0
 80048b6:	2100      	movs	r1, #0
 80048b8:	e7f3      	b.n	80048a2 <__kernel_rem_pio2+0x62>
 80048ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80048bc:	2c00      	cmp	r4, #0
 80048be:	db2d      	blt.n	800491c <__kernel_rem_pio2+0xdc>
 80048c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048c2:	ae74      	add	r6, sp, #464	; 0x1d0
 80048c4:	eb06 0bc5 	add.w	fp, r6, r5, lsl #3
 80048c8:	a824      	add	r0, sp, #144	; 0x90
 80048ca:	eb00 0ac9 	add.w	sl, r0, r9, lsl #3
 80048ce:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
 80048d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80048d6:	9c04      	ldr	r4, [sp, #16]
 80048d8:	2c00      	cmp	r4, #0
 80048da:	f2c0 8195 	blt.w	8004c08 <__kernel_rem_pio2+0x3c8>
 80048de:	9d07      	ldr	r5, [sp, #28]
 80048e0:	4657      	mov	r7, sl
 80048e2:	f1a5 0b08 	sub.w	fp, r5, #8
 80048e6:	2400      	movs	r4, #0
 80048e8:	2500      	movs	r5, #0
 80048ea:	2600      	movs	r6, #0
 80048ec:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80048f0:	e9fb 0102 	ldrd	r0, r1, [fp, #8]!
 80048f4:	f7fb febc 	bl	8000670 <__aeabi_dmul>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4620      	mov	r0, r4
 80048fe:	4629      	mov	r1, r5
 8004900:	f7fb fd04 	bl	800030c <__adddf3>
 8004904:	3601      	adds	r6, #1
 8004906:	454e      	cmp	r6, r9
 8004908:	4604      	mov	r4, r0
 800490a:	460d      	mov	r5, r1
 800490c:	d1ee      	bne.n	80048ec <__kernel_rem_pio2+0xac>
 800490e:	e9e8 4502 	strd	r4, r5, [r8, #8]!
 8004912:	9c03      	ldr	r4, [sp, #12]
 8004914:	f10a 0a08 	add.w	sl, sl, #8
 8004918:	45a0      	cmp	r8, r4
 800491a:	d1dc      	bne.n	80048d6 <__kernel_rem_pio2+0x96>
 800491c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800491e:	ac10      	add	r4, sp, #64	; 0x40
 8004920:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8004924:	9402      	str	r4, [sp, #8]
 8004926:	960f      	str	r6, [sp, #60]	; 0x3c
 8004928:	9503      	str	r5, [sp, #12]
 800492a:	9e03      	ldr	r6, [sp, #12]
 800492c:	ab9c      	add	r3, sp, #624	; 0x270
 800492e:	00f6      	lsls	r6, r6, #3
 8004930:	4433      	add	r3, r6
 8004932:	9606      	str	r6, [sp, #24]
 8004934:	9e03      	ldr	r6, [sp, #12]
 8004936:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800493a:	2e00      	cmp	r6, #0
 800493c:	dd2e      	ble.n	800499c <__kernel_rem_pio2+0x15c>
 800493e:	9e06      	ldr	r6, [sp, #24]
 8004940:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
 8004944:	44b2      	add	sl, r6
 8004946:	9e03      	ldr	r6, [sp, #12]
 8004948:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 800494c:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8004950:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 8004954:	2200      	movs	r2, #0
 8004956:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <__kernel_rem_pio2+0x1fc>)
 8004958:	4620      	mov	r0, r4
 800495a:	4629      	mov	r1, r5
 800495c:	f7fb fe88 	bl	8000670 <__aeabi_dmul>
 8004960:	f7fc f926 	bl	8000bb0 <__aeabi_d2iz>
 8004964:	f7fb fe1e 	bl	80005a4 <__aeabi_i2d>
 8004968:	2200      	movs	r2, #0
 800496a:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <__kernel_rem_pio2+0x200>)
 800496c:	4606      	mov	r6, r0
 800496e:	460f      	mov	r7, r1
 8004970:	f7fb fe7e 	bl	8000670 <__aeabi_dmul>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4620      	mov	r0, r4
 800497a:	4629      	mov	r1, r5
 800497c:	f7fb fcc4 	bl	8000308 <__aeabi_dsub>
 8004980:	f7fc f916 	bl	8000bb0 <__aeabi_d2iz>
 8004984:	4632      	mov	r2, r6
 8004986:	f848 0f04 	str.w	r0, [r8, #4]!
 800498a:	463b      	mov	r3, r7
 800498c:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
 8004990:	f7fb fcbc 	bl	800030c <__adddf3>
 8004994:	45d8      	cmp	r8, fp
 8004996:	4604      	mov	r4, r0
 8004998:	460d      	mov	r5, r1
 800499a:	d1db      	bne.n	8004954 <__kernel_rem_pio2+0x114>
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049a2:	f000 fe25 	bl	80055f0 <scalbn>
 80049a6:	2200      	movs	r2, #0
 80049a8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80049ac:	4604      	mov	r4, r0
 80049ae:	460d      	mov	r5, r1
 80049b0:	f7fb fe5e 	bl	8000670 <__aeabi_dmul>
 80049b4:	f000 fd8c 	bl	80054d0 <floor>
 80049b8:	2200      	movs	r2, #0
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <__kernel_rem_pio2+0x204>)
 80049bc:	f7fb fe58 	bl	8000670 <__aeabi_dmul>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4620      	mov	r0, r4
 80049c6:	4629      	mov	r1, r5
 80049c8:	f7fb fc9e 	bl	8000308 <__aeabi_dsub>
 80049cc:	4604      	mov	r4, r0
 80049ce:	460d      	mov	r5, r1
 80049d0:	f7fc f8ee 	bl	8000bb0 <__aeabi_d2iz>
 80049d4:	4682      	mov	sl, r0
 80049d6:	f7fb fde5 	bl	80005a4 <__aeabi_i2d>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4620      	mov	r0, r4
 80049e0:	4629      	mov	r1, r5
 80049e2:	f7fb fc91 	bl	8000308 <__aeabi_dsub>
 80049e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80049e8:	4606      	mov	r6, r0
 80049ea:	2c00      	cmp	r4, #0
 80049ec:	460f      	mov	r7, r1
 80049ee:	f340 80f2 	ble.w	8004bd6 <__kernel_rem_pio2+0x396>
 80049f2:	9d03      	ldr	r5, [sp, #12]
 80049f4:	a810      	add	r0, sp, #64	; 0x40
 80049f6:	1e69      	subs	r1, r5, #1
 80049f8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80049fc:	f1c4 0018 	rsb	r0, r4, #24
 8004a00:	fa43 f200 	asr.w	r2, r3, r0
 8004a04:	fa02 f000 	lsl.w	r0, r2, r0
 8004a08:	f1c4 0517 	rsb	r5, r4, #23
 8004a0c:	1a1b      	subs	r3, r3, r0
 8004a0e:	fa43 f505 	asr.w	r5, r3, r5
 8004a12:	ac10      	add	r4, sp, #64	; 0x40
 8004a14:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 8004a18:	4492      	add	sl, r2
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	dd3e      	ble.n	8004a9c <__kernel_rem_pio2+0x25c>
 8004a1e:	9c03      	ldr	r4, [sp, #12]
 8004a20:	f10a 0a01 	add.w	sl, sl, #1
 8004a24:	2c00      	cmp	r4, #0
 8004a26:	f340 80f9 	ble.w	8004c1c <__kernel_rem_pio2+0x3dc>
 8004a2a:	ab10      	add	r3, sp, #64	; 0x40
 8004a2c:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8004a30:	2400      	movs	r4, #0
 8004a32:	e011      	b.n	8004a58 <__kernel_rem_pio2+0x218>
 8004a34:	2aaaaaab 	.word	0x2aaaaaab
 8004a38:	08005c00 	.word	0x08005c00
 8004a3c:	3e700000 	.word	0x3e700000
 8004a40:	41700000 	.word	0x41700000
 8004a44:	40200000 	.word	0x40200000
 8004a48:	f1c2 7080 	rsb	r0, r2, #16777216	; 0x1000000
 8004a4c:	b112      	cbz	r2, 8004a54 <__kernel_rem_pio2+0x214>
 8004a4e:	f843 0c04 	str.w	r0, [r3, #-4]
 8004a52:	2401      	movs	r4, #1
 8004a54:	428b      	cmp	r3, r1
 8004a56:	d00d      	beq.n	8004a74 <__kernel_rem_pio2+0x234>
 8004a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a5c:	2c00      	cmp	r4, #0
 8004a5e:	d0f3      	beq.n	8004a48 <__kernel_rem_pio2+0x208>
 8004a60:	f1c2 12ff 	rsb	r2, r2, #16711935	; 0xff00ff
 8004a64:	f502 427f 	add.w	r2, r2, #65280	; 0xff00
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	f843 2c04 	str.w	r2, [r3, #-4]
 8004a6e:	f04f 0401 	mov.w	r4, #1
 8004a72:	d1f1      	bne.n	8004a58 <__kernel_rem_pio2+0x218>
 8004a74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a76:	2800      	cmp	r0, #0
 8004a78:	dd0d      	ble.n	8004a96 <__kernel_rem_pio2+0x256>
 8004a7a:	2801      	cmp	r0, #1
 8004a7c:	f000 80b3 	beq.w	8004be6 <__kernel_rem_pio2+0x3a6>
 8004a80:	2802      	cmp	r0, #2
 8004a82:	d108      	bne.n	8004a96 <__kernel_rem_pio2+0x256>
 8004a84:	9903      	ldr	r1, [sp, #12]
 8004a86:	a810      	add	r0, sp, #64	; 0x40
 8004a88:	1e4b      	subs	r3, r1, #1
 8004a8a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004a8e:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8004a92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8004a96:	2d02      	cmp	r5, #2
 8004a98:	f000 8084 	beq.w	8004ba4 <__kernel_rem_pio2+0x364>
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f7fc f852 	bl	8000b4c <__aeabi_dcmpeq>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	f000 80b9 	beq.w	8004c20 <__kernel_rem_pio2+0x3e0>
 8004aae:	9c03      	ldr	r4, [sp, #12]
 8004ab0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004ab2:	f104 38ff 	add.w	r8, r4, #4294967295
 8004ab6:	4546      	cmp	r6, r8
 8004ab8:	dc0d      	bgt.n	8004ad6 <__kernel_rem_pio2+0x296>
 8004aba:	a810      	add	r0, sp, #64	; 0x40
 8004abc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8004ac0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ac8:	4283      	cmp	r3, r0
 8004aca:	ea42 0201 	orr.w	r2, r2, r1
 8004ace:	d1f9      	bne.n	8004ac4 <__kernel_rem_pio2+0x284>
 8004ad0:	2a00      	cmp	r2, #0
 8004ad2:	f040 8244 	bne.w	8004f5e <__kernel_rem_pio2+0x71e>
 8004ad6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004ad8:	ad10      	add	r5, sp, #64	; 0x40
 8004ada:	1e62      	subs	r2, r4, #1
 8004adc:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f040 8254 	bne.w	8004f8e <__kernel_rem_pio2+0x74e>
 8004ae6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8004aea:	2301      	movs	r3, #1
 8004aec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004af0:	3301      	adds	r3, #1
 8004af2:	2900      	cmp	r1, #0
 8004af4:	d0fa      	beq.n	8004aec <__kernel_rem_pio2+0x2ac>
 8004af6:	9e03      	ldr	r6, [sp, #12]
 8004af8:	9c03      	ldr	r4, [sp, #12]
 8004afa:	441e      	add	r6, r3
 8004afc:	1c63      	adds	r3, r4, #1
 8004afe:	42b3      	cmp	r3, r6
 8004b00:	960d      	str	r6, [sp, #52]	; 0x34
 8004b02:	dc49      	bgt.n	8004b98 <__kernel_rem_pio2+0x358>
 8004b04:	9d04      	ldr	r5, [sp, #16]
 8004b06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004b08:	442b      	add	r3, r5
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	4622      	mov	r2, r4
 8004b0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004b10:	4432      	add	r2, r6
 8004b12:	4449      	add	r1, r9
 8004b14:	ae24      	add	r6, sp, #144	; 0x90
 8004b16:	f103 3bff 	add.w	fp, r3, #4294967295
 8004b1a:	1b2b      	subs	r3, r5, r4
 8004b1c:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
 8004b20:	9409      	str	r4, [sp, #36]	; 0x24
 8004b22:	9da7      	ldr	r5, [sp, #668]	; 0x29c
 8004b24:	9c06      	ldr	r4, [sp, #24]
 8004b26:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8004b2a:	ae74      	add	r6, sp, #464	; 0x1d0
 8004b2c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4426      	add	r6, r4
 8004b34:	9203      	str	r2, [sp, #12]
 8004b36:	9308      	str	r3, [sp, #32]
 8004b38:	9606      	str	r6, [sp, #24]
 8004b3a:	f04f 0800 	mov.w	r8, #0
 8004b3e:	9d03      	ldr	r5, [sp, #12]
 8004b40:	f108 0808 	add.w	r8, r8, #8
 8004b44:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8004b48:	9503      	str	r5, [sp, #12]
 8004b4a:	f7fb fd2b 	bl	80005a4 <__aeabi_i2d>
 8004b4e:	9e04      	ldr	r6, [sp, #16]
 8004b50:	e9eb 0102 	strd	r0, r1, [fp, #8]!
 8004b54:	2e00      	cmp	r6, #0
 8004b56:	db22      	blt.n	8004b9e <__kernel_rem_pio2+0x35e>
 8004b58:	9c07      	ldr	r4, [sp, #28]
 8004b5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b5c:	f1a4 0a08 	sub.w	sl, r4, #8
 8004b60:	4447      	add	r7, r8
 8004b62:	2400      	movs	r4, #0
 8004b64:	2500      	movs	r5, #0
 8004b66:	2600      	movs	r6, #0
 8004b68:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8004b6c:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
 8004b70:	f7fb fd7e 	bl	8000670 <__aeabi_dmul>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4620      	mov	r0, r4
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	f7fb fbc6 	bl	800030c <__adddf3>
 8004b80:	3601      	adds	r6, #1
 8004b82:	454e      	cmp	r6, r9
 8004b84:	4604      	mov	r4, r0
 8004b86:	460d      	mov	r5, r1
 8004b88:	d1ee      	bne.n	8004b68 <__kernel_rem_pio2+0x328>
 8004b8a:	9e06      	ldr	r6, [sp, #24]
 8004b8c:	e9e6 4502 	strd	r4, r5, [r6, #8]!
 8004b90:	9c08      	ldr	r4, [sp, #32]
 8004b92:	9606      	str	r6, [sp, #24]
 8004b94:	45a0      	cmp	r8, r4
 8004b96:	d1d2      	bne.n	8004b3e <__kernel_rem_pio2+0x2fe>
 8004b98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004b9a:	9503      	str	r5, [sp, #12]
 8004b9c:	e6c5      	b.n	800492a <__kernel_rem_pio2+0xea>
 8004b9e:	2400      	movs	r4, #0
 8004ba0:	2500      	movs	r5, #0
 8004ba2:	e7f2      	b.n	8004b8a <__kernel_rem_pio2+0x34a>
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	2000      	movs	r0, #0
 8004baa:	4992      	ldr	r1, [pc, #584]	; (8004df4 <__kernel_rem_pio2+0x5b4>)
 8004bac:	f7fb fbac 	bl	8000308 <__aeabi_dsub>
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	460f      	mov	r7, r1
 8004bb4:	2c00      	cmp	r4, #0
 8004bb6:	f43f af71 	beq.w	8004a9c <__kernel_rem_pio2+0x25c>
 8004bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	498d      	ldr	r1, [pc, #564]	; (8004df4 <__kernel_rem_pio2+0x5b4>)
 8004bc0:	f000 fd16 	bl	80055f0 <scalbn>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f7fb fb9c 	bl	8000308 <__aeabi_dsub>
 8004bd0:	4606      	mov	r6, r0
 8004bd2:	460f      	mov	r7, r1
 8004bd4:	e762      	b.n	8004a9c <__kernel_rem_pio2+0x25c>
 8004bd6:	d110      	bne.n	8004bfa <__kernel_rem_pio2+0x3ba>
 8004bd8:	9d03      	ldr	r5, [sp, #12]
 8004bda:	a810      	add	r0, sp, #64	; 0x40
 8004bdc:	1e6b      	subs	r3, r5, #1
 8004bde:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8004be2:	15ed      	asrs	r5, r5, #23
 8004be4:	e719      	b.n	8004a1a <__kernel_rem_pio2+0x1da>
 8004be6:	9903      	ldr	r1, [sp, #12]
 8004be8:	a810      	add	r0, sp, #64	; 0x40
 8004bea:	1e4b      	subs	r3, r1, #1
 8004bec:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004bf0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004bf4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8004bf8:	e74d      	b.n	8004a96 <__kernel_rem_pio2+0x256>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	4b7e      	ldr	r3, [pc, #504]	; (8004df8 <__kernel_rem_pio2+0x5b8>)
 8004bfe:	f7fb ffc3 	bl	8000b88 <__aeabi_dcmpge>
 8004c02:	b920      	cbnz	r0, 8004c0e <__kernel_rem_pio2+0x3ce>
 8004c04:	4605      	mov	r5, r0
 8004c06:	e749      	b.n	8004a9c <__kernel_rem_pio2+0x25c>
 8004c08:	2400      	movs	r4, #0
 8004c0a:	2500      	movs	r5, #0
 8004c0c:	e67f      	b.n	800490e <__kernel_rem_pio2+0xce>
 8004c0e:	9c03      	ldr	r4, [sp, #12]
 8004c10:	2502      	movs	r5, #2
 8004c12:	2c00      	cmp	r4, #0
 8004c14:	f10a 0a01 	add.w	sl, sl, #1
 8004c18:	f73f af07 	bgt.w	8004a2a <__kernel_rem_pio2+0x1ea>
 8004c1c:	2400      	movs	r4, #0
 8004c1e:	e729      	b.n	8004a74 <__kernel_rem_pio2+0x234>
 8004c20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c22:	4630      	mov	r0, r6
 8004c24:	4262      	negs	r2, r4
 8004c26:	4639      	mov	r1, r7
 8004c28:	9506      	str	r5, [sp, #24]
 8004c2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8004c2e:	f000 fcdf 	bl	80055f0 <scalbn>
 8004c32:	2200      	movs	r2, #0
 8004c34:	4b71      	ldr	r3, [pc, #452]	; (8004dfc <__kernel_rem_pio2+0x5bc>)
 8004c36:	4604      	mov	r4, r0
 8004c38:	460d      	mov	r5, r1
 8004c3a:	f7fb ffa5 	bl	8000b88 <__aeabi_dcmpge>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	f000 81bb 	beq.w	8004fba <__kernel_rem_pio2+0x77a>
 8004c44:	2200      	movs	r2, #0
 8004c46:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <__kernel_rem_pio2+0x5c0>)
 8004c48:	4620      	mov	r0, r4
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	f7fb fd10 	bl	8000670 <__aeabi_dmul>
 8004c50:	f7fb ffae 	bl	8000bb0 <__aeabi_d2iz>
 8004c54:	4606      	mov	r6, r0
 8004c56:	f7fb fca5 	bl	80005a4 <__aeabi_i2d>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	4b67      	ldr	r3, [pc, #412]	; (8004dfc <__kernel_rem_pio2+0x5bc>)
 8004c5e:	f7fb fd07 	bl	8000670 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4620      	mov	r0, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	f7fb fb4d 	bl	8000308 <__aeabi_dsub>
 8004c6e:	f7fb ff9f 	bl	8000bb0 <__aeabi_d2iz>
 8004c72:	9c03      	ldr	r4, [sp, #12]
 8004c74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004c76:	a910      	add	r1, sp, #64	; 0x40
 8004c78:	f104 0801 	add.w	r8, r4, #1
 8004c7c:	3518      	adds	r5, #24
 8004c7e:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
 8004c82:	950a      	str	r5, [sp, #40]	; 0x28
 8004c84:	f841 6028 	str.w	r6, [r1, r8, lsl #2]
 8004c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	4959      	ldr	r1, [pc, #356]	; (8004df4 <__kernel_rem_pio2+0x5b4>)
 8004c8e:	f000 fcaf 	bl	80055f0 <scalbn>
 8004c92:	f1b8 0f00 	cmp.w	r8, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	460d      	mov	r5, r1
 8004c9a:	db5a      	blt.n	8004d52 <__kernel_rem_pio2+0x512>
 8004c9c:	f108 0601 	add.w	r6, r8, #1
 8004ca0:	a810      	add	r0, sp, #64	; 0x40
 8004ca2:	a974      	add	r1, sp, #464	; 0x1d0
 8004ca4:	9603      	str	r6, [sp, #12]
 8004ca6:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8004caa:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8004cae:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 8004cb2:	f7fb fc77 	bl	80005a4 <__aeabi_i2d>
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	f7fb fcd9 	bl	8000670 <__aeabi_dmul>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004cc4:	4b4e      	ldr	r3, [pc, #312]	; (8004e00 <__kernel_rem_pio2+0x5c0>)
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fcd1 	bl	8000670 <__aeabi_dmul>
 8004cce:	9a02      	ldr	r2, [sp, #8]
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	4297      	cmp	r7, r2
 8004cd4:	460d      	mov	r5, r1
 8004cd6:	d1ea      	bne.n	8004cae <__kernel_rem_pio2+0x46e>
 8004cd8:	f108 5b00 	add.w	fp, r8, #536870912	; 0x20000000
 8004cdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ce0:	ab74      	add	r3, sp, #464	; 0x1d0
 8004ce2:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8004ce6:	f8cd 8020 	str.w	r8, [sp, #32]
 8004cea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004cee:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
 8004cf2:	f04f 0900 	mov.w	r9, #0
 8004cf6:	f8cd a010 	str.w	sl, [sp, #16]
 8004cfa:	f1b8 0f00 	cmp.w	r8, #0
 8004cfe:	f2c0 8128 	blt.w	8004f52 <__kernel_rem_pio2+0x712>
 8004d02:	f8df a100 	ldr.w	sl, [pc, #256]	; 8004e04 <__kernel_rem_pio2+0x5c4>
 8004d06:	465f      	mov	r7, fp
 8004d08:	2400      	movs	r4, #0
 8004d0a:	2500      	movs	r5, #0
 8004d0c:	2600      	movs	r6, #0
 8004d0e:	e001      	b.n	8004d14 <__kernel_rem_pio2+0x4d4>
 8004d10:	454e      	cmp	r6, r9
 8004d12:	dc10      	bgt.n	8004d36 <__kernel_rem_pio2+0x4f6>
 8004d14:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 8004d18:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
 8004d1c:	f7fb fca8 	bl	8000670 <__aeabi_dmul>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4620      	mov	r0, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7fb faf0 	bl	800030c <__adddf3>
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	45b0      	cmp	r8, r6
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	daec      	bge.n	8004d10 <__kernel_rem_pio2+0x4d0>
 8004d36:	9e04      	ldr	r6, [sp, #16]
 8004d38:	f1ab 0b08 	sub.w	fp, fp, #8
 8004d3c:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
 8004d40:	e9c3 4500 	strd	r4, r5, [r3]
 8004d44:	9c03      	ldr	r4, [sp, #12]
 8004d46:	f109 0901 	add.w	r9, r9, #1
 8004d4a:	45a1      	cmp	r9, r4
 8004d4c:	d1d5      	bne.n	8004cfa <__kernel_rem_pio2+0x4ba>
 8004d4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d52:	9da6      	ldr	r5, [sp, #664]	; 0x298
 8004d54:	2d03      	cmp	r5, #3
 8004d56:	f200 8097 	bhi.w	8004e88 <__kernel_rem_pio2+0x648>
 8004d5a:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004d5e:	00da      	.short	0x00da
 8004d60:	009c009c 	.word	0x009c009c
 8004d64:	0004      	.short	0x0004
 8004d66:	f1b8 0f00 	cmp.w	r8, #0
 8004d6a:	f340 8112 	ble.w	8004f92 <__kernel_rem_pio2+0x752>
 8004d6e:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8004d72:	f108 0301 	add.w	r3, r8, #1
 8004d76:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8004d7a:	ea4f 0bc8 	mov.w	fp, r8, lsl #3
 8004d7e:	9303      	str	r3, [sp, #12]
 8004d80:	4699      	mov	r9, r3
 8004d82:	eb0a 030b 	add.w	r3, sl, fp
 8004d86:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
 8004d8a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004d8e:	e001      	b.n	8004d94 <__kernel_rem_pio2+0x554>
 8004d90:	4626      	mov	r6, r4
 8004d92:	462f      	mov	r7, r5
 8004d94:	e959 4504 	ldrd	r4, r5, [r9, #-16]
 8004d98:	4632      	mov	r2, r6
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4629      	mov	r1, r5
 8004da0:	f8cd c004 	str.w	ip, [sp, #4]
 8004da4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004da8:	f7fb fab0 	bl	800030c <__adddf3>
 8004dac:	4604      	mov	r4, r0
 8004dae:	460d      	mov	r5, r1
 8004db0:	4622      	mov	r2, r4
 8004db2:	462b      	mov	r3, r5
 8004db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004db8:	f7fb faa6 	bl	8000308 <__aeabi_dsub>
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	f7fb faa4 	bl	800030c <__adddf3>
 8004dc4:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8004dc8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004dcc:	e949 4502 	strd	r4, r5, [r9, #-8]
 8004dd0:	45e1      	cmp	r9, ip
 8004dd2:	d1dd      	bne.n	8004d90 <__kernel_rem_pio2+0x550>
 8004dd4:	f1b8 0f01 	cmp.w	r8, #1
 8004dd8:	f340 810d 	ble.w	8004ff6 <__kernel_rem_pio2+0x7b6>
 8004ddc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004de0:	eb0a 030b 	add.w	r3, sl, fp
 8004de4:	f8cd a010 	str.w	sl, [sp, #16]
 8004de8:	f10a 0b10 	add.w	fp, sl, #16
 8004dec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004df0:	46e2      	mov	sl, ip
 8004df2:	e00b      	b.n	8004e0c <__kernel_rem_pio2+0x5cc>
 8004df4:	3ff00000 	.word	0x3ff00000
 8004df8:	3fe00000 	.word	0x3fe00000
 8004dfc:	41700000 	.word	0x41700000
 8004e00:	3e700000 	.word	0x3e700000
 8004e04:	08005c08 	.word	0x08005c08
 8004e08:	4634      	mov	r4, r6
 8004e0a:	463d      	mov	r5, r7
 8004e0c:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8004e10:	4622      	mov	r2, r4
 8004e12:	462b      	mov	r3, r5
 8004e14:	4640      	mov	r0, r8
 8004e16:	4649      	mov	r1, r9
 8004e18:	f7fb fa78 	bl	800030c <__adddf3>
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	460f      	mov	r7, r1
 8004e20:	4632      	mov	r2, r6
 8004e22:	463b      	mov	r3, r7
 8004e24:	4640      	mov	r0, r8
 8004e26:	4649      	mov	r1, r9
 8004e28:	f7fb fa6e 	bl	8000308 <__aeabi_dsub>
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	462b      	mov	r3, r5
 8004e30:	f7fb fa6c 	bl	800030c <__adddf3>
 8004e34:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004e38:	45da      	cmp	sl, fp
 8004e3a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8004e3e:	d1e3      	bne.n	8004e08 <__kernel_rem_pio2+0x5c8>
 8004e40:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004e44:	9c03      	ldr	r4, [sp, #12]
 8004e46:	2000      	movs	r0, #0
 8004e48:	2100      	movs	r1, #0
 8004e4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004e4e:	f7fb fa5d 	bl	800030c <__adddf3>
 8004e52:	45a3      	cmp	fp, r4
 8004e54:	d1f9      	bne.n	8004e4a <__kernel_rem_pio2+0x60a>
 8004e56:	9d06      	ldr	r5, [sp, #24]
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	f000 80a2 	beq.w	8004fa2 <__kernel_rem_pio2+0x762>
 8004e5e:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004e62:	f8da 400c 	ldr.w	r4, [sl, #12]
 8004e66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004e68:	f8da 2000 	ldr.w	r2, [sl]
 8004e6c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004e70:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004e74:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004e78:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004e7c:	6075      	str	r5, [r6, #4]
 8004e7e:	60f4      	str	r4, [r6, #12]
 8004e80:	6032      	str	r2, [r6, #0]
 8004e82:	60b3      	str	r3, [r6, #8]
 8004e84:	6130      	str	r0, [r6, #16]
 8004e86:	6171      	str	r1, [r6, #20]
 8004e88:	9c07      	ldr	r4, [sp, #28]
 8004e8a:	f004 0007 	and.w	r0, r4, #7
 8004e8e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8004e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e96:	f1b8 0f00 	cmp.w	r8, #0
 8004e9a:	f2c0 80a7 	blt.w	8004fec <__kernel_rem_pio2+0x7ac>
 8004e9e:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8004ea2:	f108 0401 	add.w	r4, r8, #1
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004eb6:	f7fb fa29 	bl	800030c <__adddf3>
 8004eba:	4554      	cmp	r4, sl
 8004ebc:	d1f9      	bne.n	8004eb2 <__kernel_rem_pio2+0x672>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	9e06      	ldr	r6, [sp, #24]
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	d047      	beq.n	8004f58 <__kernel_rem_pio2+0x718>
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004ece:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004ed0:	e9c4 0100 	strd	r0, r1, [r4]
 8004ed4:	e9da 0100 	ldrd	r0, r1, [sl]
 8004ed8:	f7fb fa16 	bl	8000308 <__aeabi_dsub>
 8004edc:	f1b8 0f00 	cmp.w	r8, #0
 8004ee0:	dd07      	ble.n	8004ef2 <__kernel_rem_pio2+0x6b2>
 8004ee2:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
 8004ee6:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 8004eea:	f7fb fa0f 	bl	800030c <__adddf3>
 8004eee:	45c2      	cmp	sl, r8
 8004ef0:	d1f9      	bne.n	8004ee6 <__kernel_rem_pio2+0x6a6>
 8004ef2:	9d06      	ldr	r5, [sp, #24]
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	d06a      	beq.n	8004fce <__kernel_rem_pio2+0x78e>
 8004ef8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004efa:	4602      	mov	r2, r0
 8004efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f00:	e9c6 2302 	strd	r2, r3, [r6, #8]
 8004f04:	9c07      	ldr	r4, [sp, #28]
 8004f06:	f004 0007 	and.w	r0, r4, #7
 8004f0a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8004f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f12:	f1b8 0f00 	cmp.w	r8, #0
 8004f16:	db66      	blt.n	8004fe6 <__kernel_rem_pio2+0x7a6>
 8004f18:	f108 0401 	add.w	r4, r8, #1
 8004f1c:	ad4c      	add	r5, sp, #304	; 0x130
 8004f1e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8004f22:	2000      	movs	r0, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f2a:	f7fb f9ef 	bl	800030c <__adddf3>
 8004f2e:	42ac      	cmp	r4, r5
 8004f30:	d1f9      	bne.n	8004f26 <__kernel_rem_pio2+0x6e6>
 8004f32:	9c06      	ldr	r4, [sp, #24]
 8004f34:	2c00      	cmp	r4, #0
 8004f36:	d050      	beq.n	8004fda <__kernel_rem_pio2+0x79a>
 8004f38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f40:	e9c5 2300 	strd	r2, r3, [r5]
 8004f44:	9c07      	ldr	r4, [sp, #28]
 8004f46:	f004 0007 	and.w	r0, r4, #7
 8004f4a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8004f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f52:	2400      	movs	r4, #0
 8004f54:	2500      	movs	r5, #0
 8004f56:	e6ee      	b.n	8004d36 <__kernel_rem_pio2+0x4f6>
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	e7b7      	b.n	8004ece <__kernel_rem_pio2+0x68e>
 8004f5e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004f60:	9506      	str	r5, [sp, #24]
 8004f62:	ad10      	add	r5, sp, #64	; 0x40
 8004f64:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 8004f68:	3e18      	subs	r6, #24
 8004f6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8004f6e:	960a      	str	r6, [sp, #40]	; 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f47f ae89 	bne.w	8004c88 <__kernel_rem_pio2+0x448>
 8004f76:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 8004f7a:	4632      	mov	r2, r6
 8004f7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f80:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f84:	3a18      	subs	r2, #24
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d0f8      	beq.n	8004f7c <__kernel_rem_pio2+0x73c>
 8004f8a:	920a      	str	r2, [sp, #40]	; 0x28
 8004f8c:	e67c      	b.n	8004c88 <__kernel_rem_pio2+0x448>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e5b1      	b.n	8004af6 <__kernel_rem_pio2+0x2b6>
 8004f92:	9d06      	ldr	r5, [sp, #24]
 8004f94:	2000      	movs	r0, #0
 8004f96:	2100      	movs	r1, #0
 8004f98:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	f47f af5e 	bne.w	8004e5e <__kernel_rem_pio2+0x61e>
 8004fa2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004fa4:	e9da 2300 	ldrd	r2, r3, [sl]
 8004fa8:	e9c6 0104 	strd	r0, r1, [r6, #16]
 8004fac:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8004fb0:	e9c6 2300 	strd	r2, r3, [r6]
 8004fb4:	e9c6 0102 	strd	r0, r1, [r6, #8]
 8004fb8:	e766      	b.n	8004e88 <__kernel_rem_pio2+0x648>
 8004fba:	4620      	mov	r0, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f7fb fdf7 	bl	8000bb0 <__aeabi_d2iz>
 8004fc2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004fc6:	aa10      	add	r2, sp, #64	; 0x40
 8004fc8:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8004fcc:	e65c      	b.n	8004c88 <__kernel_rem_pio2+0x448>
 8004fce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	e9c6 2302 	strd	r2, r3, [r6, #8]
 8004fd8:	e794      	b.n	8004f04 <__kernel_rem_pio2+0x6c4>
 8004fda:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	e9c5 2300 	strd	r2, r3, [r5]
 8004fe4:	e7ae      	b.n	8004f44 <__kernel_rem_pio2+0x704>
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	e7a2      	b.n	8004f32 <__kernel_rem_pio2+0x6f2>
 8004fec:	2200      	movs	r2, #0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8004ff4:	e765      	b.n	8004ec2 <__kernel_rem_pio2+0x682>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	e72c      	b.n	8004e56 <__kernel_rem_pio2+0x616>
 8004ffc:	0000      	movs	r0, r0
	...

08005000 <__kernel_sin>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005008:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800500c:	b085      	sub	sp, #20
 800500e:	4604      	mov	r4, r0
 8005010:	460d      	mov	r5, r1
 8005012:	4690      	mov	r8, r2
 8005014:	4699      	mov	r9, r3
 8005016:	da04      	bge.n	8005022 <__kernel_sin+0x22>
 8005018:	f7fb fdca 	bl	8000bb0 <__aeabi_d2iz>
 800501c:	2800      	cmp	r0, #0
 800501e:	f000 8084 	beq.w	800512a <__kernel_sin+0x12a>
 8005022:	4622      	mov	r2, r4
 8005024:	462b      	mov	r3, r5
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	f7fb fb21 	bl	8000670 <__aeabi_dmul>
 800502e:	4622      	mov	r2, r4
 8005030:	462b      	mov	r3, r5
 8005032:	4606      	mov	r6, r0
 8005034:	460f      	mov	r7, r1
 8005036:	f7fb fb1b 	bl	8000670 <__aeabi_dmul>
 800503a:	a33f      	add	r3, pc, #252	; (adr r3, 8005138 <__kernel_sin+0x138>)
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	4682      	mov	sl, r0
 8005042:	468b      	mov	fp, r1
 8005044:	4630      	mov	r0, r6
 8005046:	4639      	mov	r1, r7
 8005048:	f7fb fb12 	bl	8000670 <__aeabi_dmul>
 800504c:	a33c      	add	r3, pc, #240	; (adr r3, 8005140 <__kernel_sin+0x140>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f7fb f959 	bl	8000308 <__aeabi_dsub>
 8005056:	4632      	mov	r2, r6
 8005058:	463b      	mov	r3, r7
 800505a:	f7fb fb09 	bl	8000670 <__aeabi_dmul>
 800505e:	a33a      	add	r3, pc, #232	; (adr r3, 8005148 <__kernel_sin+0x148>)
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fb f952 	bl	800030c <__adddf3>
 8005068:	4632      	mov	r2, r6
 800506a:	463b      	mov	r3, r7
 800506c:	f7fb fb00 	bl	8000670 <__aeabi_dmul>
 8005070:	a337      	add	r3, pc, #220	; (adr r3, 8005150 <__kernel_sin+0x150>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb f947 	bl	8000308 <__aeabi_dsub>
 800507a:	4632      	mov	r2, r6
 800507c:	463b      	mov	r3, r7
 800507e:	f7fb faf7 	bl	8000670 <__aeabi_dmul>
 8005082:	a335      	add	r3, pc, #212	; (adr r3, 8005158 <__kernel_sin+0x158>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb f940 	bl	800030c <__adddf3>
 800508c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800508e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d033      	beq.n	80050fe <__kernel_sin+0xfe>
 8005096:	4640      	mov	r0, r8
 8005098:	4649      	mov	r1, r9
 800509a:	2200      	movs	r2, #0
 800509c:	4b32      	ldr	r3, [pc, #200]	; (8005168 <__kernel_sin+0x168>)
 800509e:	f7fb fae7 	bl	8000670 <__aeabi_dmul>
 80050a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050a6:	e9cd 0100 	strd	r0, r1, [sp]
 80050aa:	4650      	mov	r0, sl
 80050ac:	4659      	mov	r1, fp
 80050ae:	f7fb fadf 	bl	8000670 <__aeabi_dmul>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050ba:	f7fb f925 	bl	8000308 <__aeabi_dsub>
 80050be:	4632      	mov	r2, r6
 80050c0:	463b      	mov	r3, r7
 80050c2:	f7fb fad5 	bl	8000670 <__aeabi_dmul>
 80050c6:	4642      	mov	r2, r8
 80050c8:	464b      	mov	r3, r9
 80050ca:	f7fb f91d 	bl	8000308 <__aeabi_dsub>
 80050ce:	a324      	add	r3, pc, #144	; (adr r3, 8005160 <__kernel_sin+0x160>)
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	4606      	mov	r6, r0
 80050d6:	460f      	mov	r7, r1
 80050d8:	4650      	mov	r0, sl
 80050da:	4659      	mov	r1, fp
 80050dc:	f7fb fac8 	bl	8000670 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4630      	mov	r0, r6
 80050e6:	4639      	mov	r1, r7
 80050e8:	f7fb f910 	bl	800030c <__adddf3>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb f908 	bl	8000308 <__aeabi_dsub>
 80050f8:	b005      	add	sp, #20
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005102:	4630      	mov	r0, r6
 8005104:	4639      	mov	r1, r7
 8005106:	f7fb fab3 	bl	8000670 <__aeabi_dmul>
 800510a:	a315      	add	r3, pc, #84	; (adr r3, 8005160 <__kernel_sin+0x160>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb f8fa 	bl	8000308 <__aeabi_dsub>
 8005114:	4652      	mov	r2, sl
 8005116:	465b      	mov	r3, fp
 8005118:	f7fb faaa 	bl	8000670 <__aeabi_dmul>
 800511c:	4622      	mov	r2, r4
 800511e:	462b      	mov	r3, r5
 8005120:	f7fb f8f4 	bl	800030c <__adddf3>
 8005124:	b005      	add	sp, #20
 8005126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512a:	4620      	mov	r0, r4
 800512c:	4629      	mov	r1, r5
 800512e:	b005      	add	sp, #20
 8005130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005134:	f3af 8000 	nop.w
 8005138:	5acfd57c 	.word	0x5acfd57c
 800513c:	3de5d93a 	.word	0x3de5d93a
 8005140:	8a2b9ceb 	.word	0x8a2b9ceb
 8005144:	3e5ae5e6 	.word	0x3e5ae5e6
 8005148:	57b1fe7d 	.word	0x57b1fe7d
 800514c:	3ec71de3 	.word	0x3ec71de3
 8005150:	19c161d5 	.word	0x19c161d5
 8005154:	3f2a01a0 	.word	0x3f2a01a0
 8005158:	1110f8a6 	.word	0x1110f8a6
 800515c:	3f811111 	.word	0x3f811111
 8005160:	55555549 	.word	0x55555549
 8005164:	3fc55555 	.word	0x3fc55555
 8005168:	3fe00000 	.word	0x3fe00000
 800516c:	f3af 8000 	nop.w

08005170 <atan>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	4bb6      	ldr	r3, [pc, #728]	; (8005450 <atan+0x2e0>)
 8005176:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800517a:	429e      	cmp	r6, r3
 800517c:	b083      	sub	sp, #12
 800517e:	4604      	mov	r4, r0
 8005180:	460d      	mov	r5, r1
 8005182:	4689      	mov	r9, r1
 8005184:	dd0f      	ble.n	80051a6 <atan+0x36>
 8005186:	49b3      	ldr	r1, [pc, #716]	; (8005454 <atan+0x2e4>)
 8005188:	428e      	cmp	r6, r1
 800518a:	f300 80b3 	bgt.w	80052f4 <atan+0x184>
 800518e:	f000 80ae 	beq.w	80052ee <atan+0x17e>
 8005192:	f1b9 0f00 	cmp.w	r9, #0
 8005196:	f340 80ef 	ble.w	8005378 <atan+0x208>
 800519a:	a191      	add	r1, pc, #580	; (adr r1, 80053e0 <atan+0x270>)
 800519c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051a0:	b003      	add	sp, #12
 80051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	4bac      	ldr	r3, [pc, #688]	; (8005458 <atan+0x2e8>)
 80051a8:	429e      	cmp	r6, r3
 80051aa:	f300 80bd 	bgt.w	8005328 <atan+0x1b8>
 80051ae:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80051b2:	429e      	cmp	r6, r3
 80051b4:	f340 80a7 	ble.w	8005306 <atan+0x196>
 80051b8:	f04f 3cff 	mov.w	ip, #4294967295
 80051bc:	4622      	mov	r2, r4
 80051be:	462b      	mov	r3, r5
 80051c0:	4620      	mov	r0, r4
 80051c2:	4629      	mov	r1, r5
 80051c4:	f8cd c004 	str.w	ip, [sp, #4]
 80051c8:	f7fb fa52 	bl	8000670 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4682      	mov	sl, r0
 80051d2:	468b      	mov	fp, r1
 80051d4:	f7fb fa4c 	bl	8000670 <__aeabi_dmul>
 80051d8:	a383      	add	r3, pc, #524	; (adr r3, 80053e8 <atan+0x278>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	4606      	mov	r6, r0
 80051e0:	460f      	mov	r7, r1
 80051e2:	f7fb fa45 	bl	8000670 <__aeabi_dmul>
 80051e6:	a382      	add	r3, pc, #520	; (adr r3, 80053f0 <atan+0x280>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb f88e 	bl	800030c <__adddf3>
 80051f0:	4632      	mov	r2, r6
 80051f2:	463b      	mov	r3, r7
 80051f4:	f7fb fa3c 	bl	8000670 <__aeabi_dmul>
 80051f8:	a37f      	add	r3, pc, #508	; (adr r3, 80053f8 <atan+0x288>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fb f885 	bl	800030c <__adddf3>
 8005202:	4632      	mov	r2, r6
 8005204:	463b      	mov	r3, r7
 8005206:	f7fb fa33 	bl	8000670 <__aeabi_dmul>
 800520a:	a37d      	add	r3, pc, #500	; (adr r3, 8005400 <atan+0x290>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fb f87c 	bl	800030c <__adddf3>
 8005214:	4632      	mov	r2, r6
 8005216:	463b      	mov	r3, r7
 8005218:	f7fb fa2a 	bl	8000670 <__aeabi_dmul>
 800521c:	a37a      	add	r3, pc, #488	; (adr r3, 8005408 <atan+0x298>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fb f873 	bl	800030c <__adddf3>
 8005226:	4632      	mov	r2, r6
 8005228:	463b      	mov	r3, r7
 800522a:	f7fb fa21 	bl	8000670 <__aeabi_dmul>
 800522e:	a378      	add	r3, pc, #480	; (adr r3, 8005410 <atan+0x2a0>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f7fb f86a 	bl	800030c <__adddf3>
 8005238:	4652      	mov	r2, sl
 800523a:	465b      	mov	r3, fp
 800523c:	f7fb fa18 	bl	8000670 <__aeabi_dmul>
 8005240:	a375      	add	r3, pc, #468	; (adr r3, 8005418 <atan+0x2a8>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	4682      	mov	sl, r0
 8005248:	468b      	mov	fp, r1
 800524a:	4630      	mov	r0, r6
 800524c:	4639      	mov	r1, r7
 800524e:	f7fb fa0f 	bl	8000670 <__aeabi_dmul>
 8005252:	a373      	add	r3, pc, #460	; (adr r3, 8005420 <atan+0x2b0>)
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f7fb f856 	bl	8000308 <__aeabi_dsub>
 800525c:	4632      	mov	r2, r6
 800525e:	463b      	mov	r3, r7
 8005260:	f7fb fa06 	bl	8000670 <__aeabi_dmul>
 8005264:	a370      	add	r3, pc, #448	; (adr r3, 8005428 <atan+0x2b8>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb f84d 	bl	8000308 <__aeabi_dsub>
 800526e:	4632      	mov	r2, r6
 8005270:	463b      	mov	r3, r7
 8005272:	f7fb f9fd 	bl	8000670 <__aeabi_dmul>
 8005276:	a36e      	add	r3, pc, #440	; (adr r3, 8005430 <atan+0x2c0>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7fb f844 	bl	8000308 <__aeabi_dsub>
 8005280:	4632      	mov	r2, r6
 8005282:	463b      	mov	r3, r7
 8005284:	f7fb f9f4 	bl	8000670 <__aeabi_dmul>
 8005288:	a36b      	add	r3, pc, #428	; (adr r3, 8005438 <atan+0x2c8>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb f83b 	bl	8000308 <__aeabi_dsub>
 8005292:	4632      	mov	r2, r6
 8005294:	463b      	mov	r3, r7
 8005296:	f7fb f9eb 	bl	8000670 <__aeabi_dmul>
 800529a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800529e:	4602      	mov	r2, r0
 80052a0:	f1bc 3fff 	cmp.w	ip, #4294967295
 80052a4:	460b      	mov	r3, r1
 80052a6:	d06b      	beq.n	8005380 <atan+0x210>
 80052a8:	4650      	mov	r0, sl
 80052aa:	4659      	mov	r1, fp
 80052ac:	ea4f 06cc 	mov.w	r6, ip, lsl #3
 80052b0:	f7fb f82c 	bl	800030c <__adddf3>
 80052b4:	4622      	mov	r2, r4
 80052b6:	462b      	mov	r3, r5
 80052b8:	f7fb f9da 	bl	8000670 <__aeabi_dmul>
 80052bc:	4f67      	ldr	r7, [pc, #412]	; (800545c <atan+0x2ec>)
 80052be:	4b68      	ldr	r3, [pc, #416]	; (8005460 <atan+0x2f0>)
 80052c0:	4437      	add	r7, r6
 80052c2:	441e      	add	r6, r3
 80052c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052c8:	f7fb f81e 	bl	8000308 <__aeabi_dsub>
 80052cc:	4622      	mov	r2, r4
 80052ce:	462b      	mov	r3, r5
 80052d0:	f7fb f81a 	bl	8000308 <__aeabi_dsub>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052dc:	f7fb f814 	bl	8000308 <__aeabi_dsub>
 80052e0:	f1b9 0f00 	cmp.w	r9, #0
 80052e4:	da0c      	bge.n	8005300 <atan+0x190>
 80052e6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80052ea:	4629      	mov	r1, r5
 80052ec:	e008      	b.n	8005300 <atan+0x190>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f43f af4f 	beq.w	8005192 <atan+0x22>
 80052f4:	4620      	mov	r0, r4
 80052f6:	4629      	mov	r1, r5
 80052f8:	4622      	mov	r2, r4
 80052fa:	462b      	mov	r3, r5
 80052fc:	f7fb f806 	bl	800030c <__adddf3>
 8005300:	b003      	add	sp, #12
 8005302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005306:	a34e      	add	r3, pc, #312	; (adr r3, 8005440 <atan+0x2d0>)
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f7fa fffe 	bl	800030c <__adddf3>
 8005310:	2200      	movs	r2, #0
 8005312:	4b54      	ldr	r3, [pc, #336]	; (8005464 <atan+0x2f4>)
 8005314:	f7fb fc42 	bl	8000b9c <__aeabi_dcmpgt>
 8005318:	2800      	cmp	r0, #0
 800531a:	f43f af4d 	beq.w	80051b8 <atan+0x48>
 800531e:	4620      	mov	r0, r4
 8005320:	4629      	mov	r1, r5
 8005322:	b003      	add	sp, #12
 8005324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005328:	f000 f8ca 	bl	80054c0 <fabs>
 800532c:	4b4e      	ldr	r3, [pc, #312]	; (8005468 <atan+0x2f8>)
 800532e:	4604      	mov	r4, r0
 8005330:	429e      	cmp	r6, r3
 8005332:	460d      	mov	r5, r1
 8005334:	dc33      	bgt.n	800539e <atan+0x22e>
 8005336:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800533a:	429e      	cmp	r6, r3
 800533c:	f300 80a5 	bgt.w	800548a <atan+0x31a>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	f7fa ffe2 	bl	800030c <__adddf3>
 8005348:	2200      	movs	r2, #0
 800534a:	4b46      	ldr	r3, [pc, #280]	; (8005464 <atan+0x2f4>)
 800534c:	f7fa ffdc 	bl	8000308 <__aeabi_dsub>
 8005350:	2200      	movs	r2, #0
 8005352:	4606      	mov	r6, r0
 8005354:	460f      	mov	r7, r1
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800535e:	f7fa ffd5 	bl	800030c <__adddf3>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4630      	mov	r0, r6
 8005368:	4639      	mov	r1, r7
 800536a:	f7fb faab 	bl	80008c4 <__aeabi_ddiv>
 800536e:	f04f 0c00 	mov.w	ip, #0
 8005372:	4604      	mov	r4, r0
 8005374:	460d      	mov	r5, r1
 8005376:	e721      	b.n	80051bc <atan+0x4c>
 8005378:	a133      	add	r1, pc, #204	; (adr r1, 8005448 <atan+0x2d8>)
 800537a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800537e:	e7bf      	b.n	8005300 <atan+0x190>
 8005380:	4650      	mov	r0, sl
 8005382:	4659      	mov	r1, fp
 8005384:	f7fa ffc2 	bl	800030c <__adddf3>
 8005388:	4622      	mov	r2, r4
 800538a:	462b      	mov	r3, r5
 800538c:	f7fb f970 	bl	8000670 <__aeabi_dmul>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	f7fa ffb6 	bl	8000308 <__aeabi_dsub>
 800539c:	e7b0      	b.n	8005300 <atan+0x190>
 800539e:	4b33      	ldr	r3, [pc, #204]	; (800546c <atan+0x2fc>)
 80053a0:	429e      	cmp	r6, r3
 80053a2:	dc67      	bgt.n	8005474 <atan+0x304>
 80053a4:	2200      	movs	r2, #0
 80053a6:	4b32      	ldr	r3, [pc, #200]	; (8005470 <atan+0x300>)
 80053a8:	f7fa ffae 	bl	8000308 <__aeabi_dsub>
 80053ac:	2200      	movs	r2, #0
 80053ae:	4606      	mov	r6, r0
 80053b0:	460f      	mov	r7, r1
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <atan+0x300>)
 80053b8:	f7fb f95a 	bl	8000670 <__aeabi_dmul>
 80053bc:	2200      	movs	r2, #0
 80053be:	4b29      	ldr	r3, [pc, #164]	; (8005464 <atan+0x2f4>)
 80053c0:	f7fa ffa4 	bl	800030c <__adddf3>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fb fa7a 	bl	80008c4 <__aeabi_ddiv>
 80053d0:	f04f 0c02 	mov.w	ip, #2
 80053d4:	4604      	mov	r4, r0
 80053d6:	460d      	mov	r5, r1
 80053d8:	e6f0      	b.n	80051bc <atan+0x4c>
 80053da:	bf00      	nop
 80053dc:	f3af 8000 	nop.w
 80053e0:	54442d18 	.word	0x54442d18
 80053e4:	3ff921fb 	.word	0x3ff921fb
 80053e8:	e322da11 	.word	0xe322da11
 80053ec:	3f90ad3a 	.word	0x3f90ad3a
 80053f0:	24760deb 	.word	0x24760deb
 80053f4:	3fa97b4b 	.word	0x3fa97b4b
 80053f8:	a0d03d51 	.word	0xa0d03d51
 80053fc:	3fb10d66 	.word	0x3fb10d66
 8005400:	c54c206e 	.word	0xc54c206e
 8005404:	3fb745cd 	.word	0x3fb745cd
 8005408:	920083ff 	.word	0x920083ff
 800540c:	3fc24924 	.word	0x3fc24924
 8005410:	5555550d 	.word	0x5555550d
 8005414:	3fd55555 	.word	0x3fd55555
 8005418:	2c6a6c2f 	.word	0x2c6a6c2f
 800541c:	bfa2b444 	.word	0xbfa2b444
 8005420:	52defd9a 	.word	0x52defd9a
 8005424:	3fadde2d 	.word	0x3fadde2d
 8005428:	af749a6d 	.word	0xaf749a6d
 800542c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005430:	fe231671 	.word	0xfe231671
 8005434:	3fbc71c6 	.word	0x3fbc71c6
 8005438:	9998ebc4 	.word	0x9998ebc4
 800543c:	3fc99999 	.word	0x3fc99999
 8005440:	8800759c 	.word	0x8800759c
 8005444:	7e37e43c 	.word	0x7e37e43c
 8005448:	54442d18 	.word	0x54442d18
 800544c:	bff921fb 	.word	0xbff921fb
 8005450:	440fffff 	.word	0x440fffff
 8005454:	7ff00000 	.word	0x7ff00000
 8005458:	3fdbffff 	.word	0x3fdbffff
 800545c:	08005c70 	.word	0x08005c70
 8005460:	08005c50 	.word	0x08005c50
 8005464:	3ff00000 	.word	0x3ff00000
 8005468:	3ff2ffff 	.word	0x3ff2ffff
 800546c:	40037fff 	.word	0x40037fff
 8005470:	3ff80000 	.word	0x3ff80000
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	2000      	movs	r0, #0
 800547a:	490f      	ldr	r1, [pc, #60]	; (80054b8 <atan+0x348>)
 800547c:	f7fb fa22 	bl	80008c4 <__aeabi_ddiv>
 8005480:	f04f 0c03 	mov.w	ip, #3
 8005484:	4604      	mov	r4, r0
 8005486:	460d      	mov	r5, r1
 8005488:	e698      	b.n	80051bc <atan+0x4c>
 800548a:	2200      	movs	r2, #0
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <atan+0x34c>)
 800548e:	f7fa ff3b 	bl	8000308 <__aeabi_dsub>
 8005492:	2200      	movs	r2, #0
 8005494:	4606      	mov	r6, r0
 8005496:	460f      	mov	r7, r1
 8005498:	4620      	mov	r0, r4
 800549a:	4629      	mov	r1, r5
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <atan+0x34c>)
 800549e:	f7fa ff35 	bl	800030c <__adddf3>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4630      	mov	r0, r6
 80054a8:	4639      	mov	r1, r7
 80054aa:	f7fb fa0b 	bl	80008c4 <__aeabi_ddiv>
 80054ae:	f04f 0c01 	mov.w	ip, #1
 80054b2:	4604      	mov	r4, r0
 80054b4:	460d      	mov	r5, r1
 80054b6:	e681      	b.n	80051bc <atan+0x4c>
 80054b8:	bff00000 	.word	0xbff00000
 80054bc:	3ff00000 	.word	0x3ff00000

080054c0 <fabs>:
 80054c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
	...

080054d0 <floor>:
 80054d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80054d8:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80054dc:	2e13      	cmp	r6, #19
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4604      	mov	r4, r0
 80054e4:	460d      	mov	r5, r1
 80054e6:	4689      	mov	r9, r1
 80054e8:	468a      	mov	sl, r1
 80054ea:	4680      	mov	r8, r0
 80054ec:	dc1c      	bgt.n	8005528 <floor+0x58>
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	db40      	blt.n	8005574 <floor+0xa4>
 80054f2:	4f3d      	ldr	r7, [pc, #244]	; (80055e8 <floor+0x118>)
 80054f4:	4137      	asrs	r7, r6
 80054f6:	ea07 0c01 	and.w	ip, r7, r1
 80054fa:	ea5c 0c00 	orrs.w	ip, ip, r0
 80054fe:	d018      	beq.n	8005532 <floor+0x62>
 8005500:	a337      	add	r3, pc, #220	; (adr r3, 80055e0 <floor+0x110>)
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f7fa ff01 	bl	800030c <__adddf3>
 800550a:	2200      	movs	r2, #0
 800550c:	2300      	movs	r3, #0
 800550e:	f7fb fb45 	bl	8000b9c <__aeabi_dcmpgt>
 8005512:	b128      	cbz	r0, 8005520 <floor+0x50>
 8005514:	2d00      	cmp	r5, #0
 8005516:	db42      	blt.n	800559e <floor+0xce>
 8005518:	ea2a 0907 	bic.w	r9, sl, r7
 800551c:	f04f 0800 	mov.w	r8, #0
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005528:	2e33      	cmp	r6, #51	; 0x33
 800552a:	dd06      	ble.n	800553a <floor+0x6a>
 800552c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005530:	d031      	beq.n	8005596 <floor+0xc6>
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553a:	f2a7 4c13 	subw	ip, r7, #1043	; 0x413
 800553e:	f04f 3bff 	mov.w	fp, #4294967295
 8005542:	fa2b fb0c 	lsr.w	fp, fp, ip
 8005546:	ea1b 0f00 	tst.w	fp, r0
 800554a:	d0f2      	beq.n	8005532 <floor+0x62>
 800554c:	a324      	add	r3, pc, #144	; (adr r3, 80055e0 <floor+0x110>)
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	f7fa fedb 	bl	800030c <__adddf3>
 8005556:	2200      	movs	r2, #0
 8005558:	2300      	movs	r3, #0
 800555a:	f7fb fb1f 	bl	8000b9c <__aeabi_dcmpgt>
 800555e:	2800      	cmp	r0, #0
 8005560:	d0de      	beq.n	8005520 <floor+0x50>
 8005562:	2d00      	cmp	r5, #0
 8005564:	db22      	blt.n	80055ac <floor+0xdc>
 8005566:	ea28 080b 	bic.w	r8, r8, fp
 800556a:	46d1      	mov	r9, sl
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005574:	a31a      	add	r3, pc, #104	; (adr r3, 80055e0 <floor+0x110>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	f7fa fec7 	bl	800030c <__adddf3>
 800557e:	2200      	movs	r2, #0
 8005580:	2300      	movs	r3, #0
 8005582:	f7fb fb0b 	bl	8000b9c <__aeabi_dcmpgt>
 8005586:	2800      	cmp	r0, #0
 8005588:	d0ca      	beq.n	8005520 <floor+0x50>
 800558a:	2d00      	cmp	r5, #0
 800558c:	db1c      	blt.n	80055c8 <floor+0xf8>
 800558e:	f04f 0800 	mov.w	r8, #0
 8005592:	46c1      	mov	r9, r8
 8005594:	e7c4      	b.n	8005520 <floor+0x50>
 8005596:	f7fa feb9 	bl	800030c <__adddf3>
 800559a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80055a2:	fa4a f606 	asr.w	r6, sl, r6
 80055a6:	eb06 0a05 	add.w	sl, r6, r5
 80055aa:	e7b5      	b.n	8005518 <floor+0x48>
 80055ac:	2e14      	cmp	r6, #20
 80055ae:	d014      	beq.n	80055da <floor+0x10a>
 80055b0:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
 80055b4:	2301      	movs	r3, #1
 80055b6:	3703      	adds	r7, #3
 80055b8:	fa03 f707 	lsl.w	r7, r3, r7
 80055bc:	eb17 0804 	adds.w	r8, r7, r4
 80055c0:	bf28      	it	cs
 80055c2:	eb05 0a03 	addcs.w	sl, r5, r3
 80055c6:	e7ce      	b.n	8005566 <floor+0x96>
 80055c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <floor+0x11c>)
 80055ce:	4322      	orrs	r2, r4
 80055d0:	bf18      	it	ne
 80055d2:	4699      	movne	r9, r3
 80055d4:	f04f 0800 	mov.w	r8, #0
 80055d8:	e7a2      	b.n	8005520 <floor+0x50>
 80055da:	f105 0a01 	add.w	sl, r5, #1
 80055de:	e7c2      	b.n	8005566 <floor+0x96>
 80055e0:	8800759c 	.word	0x8800759c
 80055e4:	7e37e43c 	.word	0x7e37e43c
 80055e8:	000fffff 	.word	0x000fffff
 80055ec:	bff00000 	.word	0xbff00000

080055f0 <scalbn>:
 80055f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80055f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f8:	4690      	mov	r8, r2
 80055fa:	4606      	mov	r6, r0
 80055fc:	460f      	mov	r7, r1
 80055fe:	460a      	mov	r2, r1
 8005600:	bb1b      	cbnz	r3, 800564a <scalbn+0x5a>
 8005602:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005606:	4303      	orrs	r3, r0
 8005608:	d034      	beq.n	8005674 <scalbn+0x84>
 800560a:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <scalbn+0xf0>)
 800560c:	2200      	movs	r2, #0
 800560e:	f7fb f82f 	bl	8000670 <__aeabi_dmul>
 8005612:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <scalbn+0xf4>)
 8005614:	4606      	mov	r6, r0
 8005616:	4598      	cmp	r8, r3
 8005618:	460f      	mov	r7, r1
 800561a:	db3b      	blt.n	8005694 <scalbn+0xa4>
 800561c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005620:	3b36      	subs	r3, #54	; 0x36
 8005622:	460a      	mov	r2, r1
 8005624:	4443      	add	r3, r8
 8005626:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800562a:	428b      	cmp	r3, r1
 800562c:	dd16      	ble.n	800565c <scalbn+0x6c>
 800562e:	a128      	add	r1, pc, #160	; (adr r1, 80056d0 <scalbn+0xe0>)
 8005630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005634:	4632      	mov	r2, r6
 8005636:	463b      	mov	r3, r7
 8005638:	f000 f85a 	bl	80056f0 <copysign>
 800563c:	a324      	add	r3, pc, #144	; (adr r3, 80056d0 <scalbn+0xe0>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fb f815 	bl	8000670 <__aeabi_dmul>
 8005646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564a:	f240 74ff 	movw	r4, #2047	; 0x7ff
 800564e:	42a3      	cmp	r3, r4
 8005650:	d027      	beq.n	80056a2 <scalbn+0xb2>
 8005652:	4443      	add	r3, r8
 8005654:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005658:	428b      	cmp	r3, r1
 800565a:	dce8      	bgt.n	800562e <scalbn+0x3e>
 800565c:	2b00      	cmp	r3, #0
 800565e:	dd0b      	ble.n	8005678 <scalbn+0x88>
 8005660:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005664:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8005668:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
 800566c:	4630      	mov	r0, r6
 800566e:	4639      	mov	r1, r7
 8005670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005678:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800567c:	da17      	bge.n	80056ae <scalbn+0xbe>
 800567e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005682:	4598      	cmp	r8, r3
 8005684:	dcd3      	bgt.n	800562e <scalbn+0x3e>
 8005686:	a114      	add	r1, pc, #80	; (adr r1, 80056d8 <scalbn+0xe8>)
 8005688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800568c:	4632      	mov	r2, r6
 800568e:	463b      	mov	r3, r7
 8005690:	f000 f82e 	bl	80056f0 <copysign>
 8005694:	a310      	add	r3, pc, #64	; (adr r3, 80056d8 <scalbn+0xe8>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f7fa ffe9 	bl	8000670 <__aeabi_dmul>
 800569e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	f7fa fe31 	bl	800030c <__adddf3>
 80056aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ae:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80056b2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80056b6:	3336      	adds	r3, #54	; 0x36
 80056b8:	ea42 5703 	orr.w	r7, r2, r3, lsl #20
 80056bc:	4630      	mov	r0, r6
 80056be:	4639      	mov	r1, r7
 80056c0:	2200      	movs	r2, #0
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <scalbn+0xf8>)
 80056c4:	f7fa ffd4 	bl	8000670 <__aeabi_dmul>
 80056c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056cc:	f3af 8000 	nop.w
 80056d0:	8800759c 	.word	0x8800759c
 80056d4:	7e37e43c 	.word	0x7e37e43c
 80056d8:	c2f8f359 	.word	0xc2f8f359
 80056dc:	01a56e1f 	.word	0x01a56e1f
 80056e0:	43500000 	.word	0x43500000
 80056e4:	ffff3cb0 	.word	0xffff3cb0
 80056e8:	3c900000 	.word	0x3c900000
 80056ec:	f3af 8000 	nop.w

080056f0 <copysign>:
 80056f0:	b430      	push	{r4, r5}
 80056f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056f6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80056fa:	ea43 0102 	orr.w	r1, r3, r2
 80056fe:	bc30      	pop	{r4, r5}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
	...
 8005710:	0ac5800a 	.word	0x0ac5800a
 8005714:	31304141 	.word	0x31304141
 8005718:	31313131 	.word	0x31313131
 800571c:	00000a31 	.word	0x00000a31

08005720 <ram_areas>:
 8005720:	08005cac 200018e4 200018e4 200018e4     .\..... ... ... 
 8005730:	08005cac 20000000 20000000 20000000     .\..... ... ... 
 8005740:	08005cac 20010000 20010000 20010000     .\..... ... ... 
 8005750:	08005cac 00000000 00000000 00000000     .\..............
 8005760:	08005cac 10000000 10000000 10000000     .\..............
 8005770:	08005cac 40024000 40024000 40024000     .\...@.@.@.@.@.@
 8005780:	08005cac 00000000 00000000 00000000     .\..............
 8005790:	08005cac 00000000 00000000 00000000     .\..............
 80057a0:	656c6469 00000000 00000000 00000000     idle............

080057b0 <ch_debug>:
 80057b0:	6e69616d 18431600 08440404 1814100c     main..C...D.....
 80057c0:	1e1d1c00 0000001f 00000000 00000000     ................

080057d0 <vmt>:
 80057d0:	080018d1 080018b1 08001911 080018f1     ................
 80057e0:	08001901 080018e1 080018c1 080018a1     ................

080057f0 <_stm32_dma_streams>:
 80057f0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8005800:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8005810:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8005820:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8005830:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8005840:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8005850:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8005860:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8005870:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8005880:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8005890:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80058a0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.
 80058b0:	20414d44 6c696166 00657275 00000000     DMA failure.....

080058c0 <default_config>:
 80058c0:	0001c200 40000000 00000000 00000000     .......@........

080058d0 <pal_default_config>:
 80058d0:	28000000 00000000 55555555 55555555     ...(....UUUUUUUU
 80058e0:	fffff0ff 55500000 00000770 00a00000     ......PUp.......
 80058f0:	00000c00 55555555 00000000 ffff0fff     ....UUUU........
 8005900:	00666000 00004400 00000000 00000000     .`f..D..........
 8005910:	55555555 04000055 ffff08ff 88000000     UUUUU...........
	...
 800592c:	55555555 55555555 ffffff00 00000000     UUUUUUUU........
 800593c:	00220077 50000000 00000000 55555555     w."....P....UUUU
 800594c:	55555555 ffff0200 00000000 00000000     UUUU............
	...
 8005964:	ffffffff ffffffff ffffffff 00000000     ................
	...
 8005980:	ffffffff ffffffff ffffffff 00000000     ................
	...
 800599c:	ffffffff ffffffff ffffffff 00000000     ................
	...
 80059b8:	ffffffff ffffffff ffffffff 00000000     ................
	...

080059d0 <usart_4_cfg>:
 80059d0:	0000e100 00000000 00000000 00000000     ................

080059e0 <compass_i2c_cfg>:
 80059e0:	00000001 00002710 00000003 00000000     .....'..........

080059f0 <usart_6_cfg>:
 80059f0:	0001c200 00000000 00000000 00000000     ................

08005a00 <usart_1_cfg>:
 8005a00:	0001c200 00000000 00000000 00000000     ................

08005a10 <usart_2_cfg>:
 8005a10:	0001c200 00000000 00000000 00000000     ................

08005a20 <usart_3_cfg>:
 8005a20:	00002580 00000000 00000000 00000000     .%..............

08005a30 <dx>:
 8005a30:	00380014 00620053 00530062 00140038     ..8.S.b.b.S.8...
 8005a40:	ffc8ffec ff9effad ffadff9e ffecffc8     ................

08005a50 <dy>:
 8005a50:	00530062 00140038 ffc8ffec ff9effad     b.S.8...........
 8005a60:	ffadff9e ffecffc8 00380014 00620053     ..........8.S.b.

08005a70 <npio2_hw>:
 8005a70:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 8005a80:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 8005a90:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 8005aa0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 8005ab0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 8005ac0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 8005ad0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 8005ae0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

08005af0 <two_over_pi>:
 8005af0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 8005b00:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 8005b10:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 8005b20:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 8005b30:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 8005b40:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 8005b50:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 8005b60:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 8005b70:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 8005b80:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 8005b90:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 8005ba0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 8005bb0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 8005bc0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 8005bd0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 8005be0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 8005bf0:	0060e27b 00c08c6b 00000000 00000000     {.`.k...........

08005c00 <init_jk>:
 8005c00:	00000002 00000003 00000004 00000006     ................

08005c10 <PIo2>:
 8005c10:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 8005c20:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 8005c30:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 8005c40:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

08005c50 <atanlo>:
 8005c50:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 8005c60:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

08005c70 <atanhi>:
 8005c70:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 8005c80:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
